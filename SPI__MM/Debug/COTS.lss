
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00005824  000058b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080010c  0080010c  00005964  2**0
                  ALLOC
  3 .stab         00005484  00000000  00000000  00005964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001813  00000000  00000000  0000ade8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c73b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001018c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_1>
       8:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_2>
       c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_10>
      2c:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <main>
      8a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 2b 	jmp	0x57b2	; 0x57b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 2b 	jmp	0x57b2	; 0x57b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 05 2c 	jmp	0x580a	; 0x580a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:
#include"WDT_private.h"
#include"WDT_interface.h"


void WDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_WDTCR , 3) ;
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDT_WDTCR = (1<<4) | (1<<3);
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDT_WDTCR = 0x00;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <WDT_voidSetTime>:
void WDT_voidSetTime(u8 Copy_ResetTime)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	WDT_WDTCR &= 0b11111000 ;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	8c 93       	st	X, r24
	WDT_WDTCR |= Copy_ResetTime ;
     b98:	a1 e4       	ldi	r26, 0x41	; 65
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24

}
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <UART_voidInit>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_voidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	//Select UCSRA
	SET_BIT(UART_UCSRC_REG , 7) ;
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8c 93       	st	X, r24

	//selsect Asynch(baud rate)
	CLR_BIT(UART_UCSRC_REG , 6) ;
     bc6:	a0 e4       	ldi	r26, 0x40	; 64
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 7b       	andi	r24, 0xBF	; 191
     bd2:	8c 93       	st	X, r24

	//parity disable(error)
	CLR_BIT(UART_UCSRC_REG , 4);
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 7e       	andi	r24, 0xEF	; 239
     be0:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRC_REG , 5);
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8f 7d       	andi	r24, 0xDF	; 223
     bee:	8c 93       	st	X, r24

	//Stop bit 1 Or 2 bits
	CLR_BIT(UART_UCSRC_REG , 3);
     bf0:	a0 e4       	ldi	r26, 0x40	; 64
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	8c 93       	st	X, r24

	//Charctar Size 8 bits
	SET_BIT(UART_UCSRC_REG , 2);
     bfe:	a0 e4       	ldi	r26, 0x40	; 64
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	84 60       	ori	r24, 0x04	; 4
     c0a:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRC_REG , 1);
     c0c:	a0 e4       	ldi	r26, 0x40	; 64
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRB_REG , 2); //B
     c1a:	aa e2       	ldi	r26, 0x2A	; 42
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e2       	ldi	r30, 0x2A	; 42
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8b 7f       	andi	r24, 0xFB	; 251
     c26:	8c 93       	st	X, r24

	//select Baud rate reg
	CLR_BIT(UART_UCSRC_REG , 7) ;
     c28:	a0 e4       	ldi	r26, 0x40	; 64
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 77       	andi	r24, 0x7F	; 127
     c34:	8c 93       	st	X, r24
	//Select Baud Rate
	UART_UBRRH_REG = (u8)(BAUD_RATE>>8);
     c36:	e0 e4       	ldi	r30, 0x40	; 64
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	10 82       	st	Z, r1
	UART_UBRRL_REG = (u8)(BAUD_RATE);
     c3c:	e9 e2       	ldi	r30, 0x29	; 41
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	83 e3       	ldi	r24, 0x33	; 51
     c42:	80 83       	st	Z, r24

	//Enable RX & TX
	SET_BIT(UART_UCSRB_REG , 3); //B
     c44:	aa e2       	ldi	r26, 0x2A	; 42
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e2       	ldi	r30, 0x2A	; 42
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG , 4); //B
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	8c 93       	st	X, r24

}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 5)==0);
     c72:	eb e2       	ldi	r30, 0x2B	; 43
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	82 95       	swap	r24
     c7a:	86 95       	lsr	r24
     c7c:	87 70       	andi	r24, 0x07	; 7
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	a1 f3       	breq	.-24     	; 0xc72 <UART_voidSendData+0xc>

	//when flag = 1
	UART_UDR_REG = Copy_u8Data ;
     c8a:	ec e2       	ldi	r30, 0x2C	; 44
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	80 83       	st	Z, r24

	//clear flag
	SET_BIT(UART_UCSRA_REG , 6) ;
     c92:	ab e2       	ldi	r26, 0x2B	; 43
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	eb e2       	ldi	r30, 0x2B	; 43
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	8c 93       	st	X, r24
}
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <UART_u8RecieveData>:

void UART_u8RecieveData(u8 *Copy_pu8Data)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <UART_u8RecieveData+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 7)==0);
     cb6:	eb e2       	ldi	r30, 0x2B	; 43
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	dc f7       	brge	.-10     	; 0xcb6 <UART_u8RecieveData+0xe>

	//when flag = 1
	*Copy_pu8Data = UART_UDR_REG ;
     cc0:	ec e2       	ldi	r30, 0x2C	; 44
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	80 83       	st	Z, r24

}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TIMER0_voidInit>:
void(*TIMER_GPF0)(void) = NULL ;
void(*TIMER_GPF1)(void) = NULL ;


void TIMER0_voidInit()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	//normal mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
	CLR_BIT(TIMER0_TCCR0_REG , 3 );
	#elif(TIMER_MODE==TIMER_CTC_MODE)
	//compare mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 3 );
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 4 );
	SET_BIT(TIMER0_TCCR0_REG , 5 );
	#endif

	//prescaller division factor = 8
	CLR_BIT(TIMER0_TCCR0_REG , 2 );
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 0 );
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8e 7f       	andi	r24, 0xFE	; 254
     d14:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 1 );
     d16:	a3 e5       	ldi	r26, 0x53	; 83
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	SET_BIT(TIMER0_TIMSK_REG , 0) ;
     d24:	a9 e5       	ldi	r26, 0x59	; 89
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e9 e5       	ldi	r30, 0x59	; 89
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	8c 93       	st	X, r24

}
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <TIMER0_voidSetCallBackT0Ovf>:

void TIMER0_voidSetCallBackT0Ovf(void(*LPF0)(void))
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <TIMER0_voidSetCallBackT0Ovf+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF0 = LPF0 ;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	90 93 0d 01 	sts	0x010D, r25
     d4e:	80 93 0c 01 	sts	0x010C, r24
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue(u8 Copy_PreloadValue)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = Copy_PreloadValue ;
     d68:	e2 e5       	ldi	r30, 0x52	; 82
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	80 83       	st	Z, r24
}
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <TIMER0_voidSetCallBackT0CTC>:

void TIMER0_voidSetCallBackT0CTC(void(*LPF1)(void))
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <TIMER0_voidSetCallBackT0CTC+0x6>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF1 = LPF1 ;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	90 93 0f 01 	sts	0x010F, r25
     d8e:	80 93 0e 01 	sts	0x010E, r24
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_CompareMatchValue)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = Copy_CompareMatchValue ;
     da8:	ec e5       	ldi	r30, 0x5C	; 92
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	80 83       	st	Z, r24
}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <__vector_10>:


//ISR for T0CTC
void __vector_10(void)    __attribute__((signal));
void __vector_10(void)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
     de2:	80 91 10 01 	lds	r24, 0x0110
     de6:	90 91 11 01 	lds	r25, 0x0111
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	90 93 11 01 	sts	0x0111, r25
     df0:	80 93 10 01 	sts	0x0110, r24
	//compare =200 ,, time = 1sec
	if(counter == 5000)
     df4:	80 91 10 01 	lds	r24, 0x0110
     df8:	90 91 11 01 	lds	r25, 0x0111
     dfc:	23 e1       	ldi	r18, 0x13	; 19
     dfe:	88 38       	cpi	r24, 0x88	; 136
     e00:	92 07       	cpc	r25, r18
     e02:	49 f4       	brne	.+18     	; 0xe16 <__vector_10+0x5e>
	{
		TIMER_GPF1();
     e04:	e0 91 0e 01 	lds	r30, 0x010E
     e08:	f0 91 0f 01 	lds	r31, 0x010F
     e0c:	09 95       	icall
		counter = 0 ;
     e0e:	10 92 11 01 	sts	0x0111, r1
     e12:	10 92 10 01 	sts	0x0110, r1
	}

}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_11>:
void __vector_11(void)    __attribute__((signal));
void __vector_11(void)
{
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
     e66:	80 91 12 01 	lds	r24, 0x0112
     e6a:	90 91 13 01 	lds	r25, 0x0113
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	90 93 13 01 	sts	0x0113, r25
     e74:	80 93 12 01 	sts	0x0112, r24
	//overflow 1
	if(counter == 3907)
     e78:	80 91 12 01 	lds	r24, 0x0112
     e7c:	90 91 13 01 	lds	r25, 0x0113
     e80:	2f e0       	ldi	r18, 0x0F	; 15
     e82:	83 34       	cpi	r24, 0x43	; 67
     e84:	92 07       	cpc	r25, r18
     e86:	61 f4       	brne	.+24     	; 0xea0 <__vector_11+0x64>
	{
		TIMER_GPF0();
     e88:	e0 91 0c 01 	lds	r30, 0x010C
     e8c:	f0 91 0d 01 	lds	r31, 0x010D
     e90:	09 95       	icall
		counter = 0 ;
     e92:	10 92 13 01 	sts	0x0113, r1
     e96:	10 92 12 01 	sts	0x0112, r1
		TIMER0_voidSetPreloadValue(192);
     e9a:	80 ec       	ldi	r24, 0xC0	; 192
     e9c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TIMER0_voidSetPreloadValue>
	}

}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <TIMER1_voidInit>:
void TIMER1_voidInit(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62

	//fast PWM
	CLR_BIT(TIMER1_TCCR1A_REG , 0 );
     ece:	af e4       	ldi	r26, 0x4F	; 79
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e4       	ldi	r30, 0x4F	; 79
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 1);
     edc:	af e4       	ldi	r26, 0x4F	; 79
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	82 60       	ori	r24, 0x02	; 2
     ee8:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 3 );
     eea:	ae e4       	ldi	r26, 0x4E	; 78
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ee e4       	ldi	r30, 0x4E	; 78
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 4);
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24

	//set on top clear on compare
	CLR_BIT(TIMER1_TCCR1A_REG , 6 );
     f06:	af e4       	ldi	r26, 0x4F	; 79
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7b       	andi	r24, 0xBF	; 191
     f12:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 7 );
     f14:	af e4       	ldi	r26, 0x4F	; 79
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e4       	ldi	r30, 0x4F	; 79
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24


	//prescaller division factor = 8
	CLR_BIT(TIMER1_TCCR1B_REG , 0 );
     f22:	ae e4       	ldi	r26, 0x4E	; 78
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ee e4       	ldi	r30, 0x4E	; 78
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8e 7f       	andi	r24, 0xFE	; 254
     f2e:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 1 );
     f30:	ae e4       	ldi	r26, 0x4E	; 78
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ee e4       	ldi	r30, 0x4E	; 78
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	82 60       	ori	r24, 0x02	; 2
     f3c:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B_REG , 2 );
     f3e:	ae e4       	ldi	r26, 0x4E	; 78
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ee e4       	ldi	r30, 0x4E	; 78
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8b 7f       	andi	r24, 0xFB	; 251
     f4a:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	//SET_BIT(TIMER1 , 0) ;

	//intilize value over flow value
	TIMER1_ICR1_REG = 19999 ;
     f4c:	e6 e4       	ldi	r30, 0x46	; 70
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	8f e1       	ldi	r24, 0x1F	; 31
     f52:	9e e4       	ldi	r25, 0x4E	; 78
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24

	//intilize counter
	TIMER1_TCNT1_REG = 0 ;
     f58:	ec e4       	ldi	r30, 0x4C	; 76
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	10 82       	st	Z, r1

}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <TIMER1_voidSetPinACompareMatch>:




void TIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <TIMER1_voidSetPinACompareMatch+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1A_REG = Copy_u16Value ;
     f74:	ea e4       	ldi	r30, 0x4A	; 74
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <TIMERS_voidT1SetBusyWait>:

void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	2c 97       	sbiw	r28, 0x0c	; 12
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	69 87       	std	Y+9, r22	; 0x09
     fa0:	7a 87       	std	Y+10, r23	; 0x0a
     fa2:	8b 87       	std	Y+11, r24	; 0x0b
     fa4:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u64SWCounter = 0 ;
     fa6:	1d 82       	std	Y+5, r1	; 0x05
     fa8:	1e 82       	std	Y+6, r1	; 0x06
     faa:	1f 82       	std	Y+7, r1	; 0x07
     fac:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u64Iterator = 0 ;
     fae:	19 82       	std	Y+1, r1	; 0x01
     fb0:	1a 82       	std	Y+2, r1	; 0x02
     fb2:	1b 82       	std	Y+3, r1	; 0x03
     fb4:	1c 82       	std	Y+4, r1	; 0x04
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	ab 85       	ldd	r26, Y+11	; 0x0b
     fbc:	bc 85       	ldd	r27, Y+12	; 0x0c
     fbe:	28 ee       	ldi	r18, 0xE8	; 232
     fc0:	33 e0       	ldi	r19, 0x03	; 3
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 84 2b 	call	0x5708	; 0x5708 <__mulsi3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	2a ef       	ldi	r18, 0xFA	; 250
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
     fe2:	da 01       	movw	r26, r20
     fe4:	c9 01       	movw	r24, r18
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	af 83       	std	Y+7, r26	; 0x07
     fec:	b8 87       	std	Y+8, r27	; 0x08
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	1a 82       	std	Y+2, r1	; 0x02
     ff2:	1b 82       	std	Y+3, r1	; 0x03
     ff4:	1c 82       	std	Y+4, r1	; 0x04
     ff6:	1c c0       	rjmp	.+56     	; 0x1030 <TIMERS_voidT1SetBusyWait+0xa6>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
     ff8:	e8 e5       	ldi	r30, 0x58	; 88
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	86 95       	lsr	r24
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	b1 f3       	breq	.-20     	; 0xff8 <TIMERS_voidT1SetBusyWait+0x6e>
		SET_BIT(TIMER1_TIFR_REG , 1);
    100c:	a8 e5       	ldi	r26, 0x58	; 88
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e5       	ldi	r30, 0x58	; 88
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
	u32 Local_u64SWCounter = 0 ;
	u32 Local_u64Iterator = 0 ;
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	ab 81       	ldd	r26, Y+3	; 0x03
    1020:	bc 81       	ldd	r27, Y+4	; 0x04
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	a1 1d       	adc	r26, r1
    1026:	b1 1d       	adc	r27, r1
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	ab 83       	std	Y+3, r26	; 0x03
    102e:	bc 83       	std	Y+4, r27	; 0x04
    1030:	29 81       	ldd	r18, Y+1	; 0x01
    1032:	3a 81       	ldd	r19, Y+2	; 0x02
    1034:	4b 81       	ldd	r20, Y+3	; 0x03
    1036:	5c 81       	ldd	r21, Y+4	; 0x04
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	af 81       	ldd	r26, Y+7	; 0x07
    103e:	b8 85       	ldd	r27, Y+8	; 0x08
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	4a 07       	cpc	r20, r26
    1046:	5b 07       	cpc	r21, r27
    1048:	b8 f2       	brcs	.-82     	; 0xff8 <TIMERS_voidT1SetBusyWait+0x6e>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
		SET_BIT(TIMER1_TIFR_REG , 1);
	}
}
    104a:	2c 96       	adiw	r28, 0x0c	; 12
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <SPI_MasterInit>:
#include"SPI_Interface.h"
#include"SPI_Config.h"
#include"SPI_Private.h"

void SPI_MasterInit(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	//select master mode
	SET_BIT(SPCR_REG,SPCR_MSTR);
    1064:	ad e2       	ldi	r26, 0x2D	; 45
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ed e2       	ldi	r30, 0x2D	; 45
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 61       	ori	r24, 0x10	; 16
    1070:	8c 93       	st	X, r24
	// MSB OR LSB
	CLR_BIT(SPCR_REG,SPCR_DORD);
    1072:	ad e2       	ldi	r26, 0x2D	; 45
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ed e2       	ldi	r30, 0x2D	; 45
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	8c 93       	st	X, r24
	// select Rising as leading edge
	CLR_BIT(SPCR_REG,SPCR_CPOL);
    1080:	ad e2       	ldi	r26, 0x2D	; 45
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ed e2       	ldi	r30, 0x2D	; 45
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	8c 93       	st	X, r24
	//SELECT SAMPLE ON LEADING
	CLR_BIT(SPCR_REG,SPCR_CPHA);
    108e:	ad e2       	ldi	r26, 0x2D	; 45
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ed e2       	ldi	r30, 0x2D	; 45
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8b 7f       	andi	r24, 0xFB	; 251
    109a:	8c 93       	st	X, r24
	//SELECT PRESCALER
	SET_BIT(SPCR_REG,SPCR_SPR0);
    109c:	ad e2       	ldi	r26, 0x2D	; 45
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ed e2       	ldi	r30, 0x2D	; 45
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPCR_SPR1);
    10aa:	ad e2       	ldi	r26, 0x2D	; 45
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ed e2       	ldi	r30, 0x2D	; 45
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8d 7f       	andi	r24, 0xFD	; 253
    10b6:	8c 93       	st	X, r24
	CLR_BIT(SPSR_REG,SPSR_SPI2X);
    10b8:	ae e2       	ldi	r26, 0x2E	; 46
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ee e2       	ldi	r30, 0x2E	; 46
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	8c 93       	st	X, r24
	//ENABLE SPI
	SET_BIT(SPCR_REG,SPCR_SPE);
    10c6:	ad e2       	ldi	r26, 0x2D	; 45
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ed e2       	ldi	r30, 0x2D	; 45
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 64       	ori	r24, 0x40	; 64
    10d2:	8c 93       	st	X, r24
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <SPI_SlaveInit>:
void SPI_SlaveInit(void)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SPCR_REG,SPCR_MSTR);
    10e2:	ad e2       	ldi	r26, 0x2D	; 45
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ed e2       	ldi	r30, 0x2D	; 45
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 7e       	andi	r24, 0xEF	; 239
    10ee:	8c 93       	st	X, r24
		// MSB OR LSB
		CLR_BIT(SPCR_REG,SPCR_DORD);
    10f0:	ad e2       	ldi	r26, 0x2D	; 45
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ed e2       	ldi	r30, 0x2D	; 45
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7d       	andi	r24, 0xDF	; 223
    10fc:	8c 93       	st	X, r24
		// select Rising as leading edge
		CLR_BIT(SPCR_REG,SPCR_CPOL);
    10fe:	ad e2       	ldi	r26, 0x2D	; 45
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ed e2       	ldi	r30, 0x2D	; 45
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	8c 93       	st	X, r24
		//SELECT SAMPLE ON LEADING
		CLR_BIT(SPCR_REG,SPCR_CPHA);
    110c:	ad e2       	ldi	r26, 0x2D	; 45
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ed e2       	ldi	r30, 0x2D	; 45
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8b 7f       	andi	r24, 0xFB	; 251
    1118:	8c 93       	st	X, r24
		//ENABLE SPI
		SET_BIT(SPCR_REG,SPCR_SPE);
    111a:	ad e2       	ldi	r26, 0x2D	; 45
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ed e2       	ldi	r30, 0x2D	; 45
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24

}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <SPI_u8Tranceive>:
u8   SPI_u8Tranceive(u8 Copu_u8Data)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
	//set the data to register
	SPDR_REG = Copu_u8Data ;
    113a:	ef e2       	ldi	r30, 0x2F	; 47
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	80 83       	st	Z, r24
	while ((GET_BIT(SPSR_REG,SPSR_SPIF))==0);
    1142:	ee e2       	ldi	r30, 0x2E	; 46
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 23       	and	r24, r24
    114a:	dc f7       	brge	.-10     	; 0x1142 <SPI_u8Tranceive+0x14>
	SET_BIT(SPSR_REG,SPSR_SPIF);
    114c:	ae e2       	ldi	r26, 0x2E	; 46
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e2       	ldi	r30, 0x2E	; 46
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 68       	ori	r24, 0x80	; 128
    1158:	8c 93       	st	X, r24
	return  SPDR_REG ;
    115a:	ef e2       	ldi	r30, 0x2F	; 47
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <GIE_voidEnable>:
#include"GIE_config.h"
#include"GIE_private.h"
#include"GIE_interface.h"

void GIE_voidEnable(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
    1170:	af e5       	ldi	r26, 0x5F	; 95
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ef e5       	ldi	r30, 0x5F	; 95
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	8c 93       	st	X, r24

}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG , 7);
    118c:	af e5       	ldi	r26, 0x5F	; 95
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ef e5       	ldi	r30, 0x5F	; 95
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 77       	andi	r24, 0x7F	; 127
    1198:	8c 93       	st	X, r24

}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <EXTI_voidInit>:
void(*GpF1)(void) = NULL ;
void(*GpF2)(void) = NULL ;
void(*GpF3)(void) = NULL ;

void EXTI_voidInit(void)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
 	#if INT_ENABLE == INT0
		SET_BIT(GICR_REG,6);
    11a8:	ab e5       	ldi	r26, 0x5B	; 91
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	eb e5       	ldi	r30, 0x5B	; 91
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,5);
	#endif

	#if INT_ENABLE == INT0
		/*DIo*/
		DIO_voidSetPinDirection(PORTD , PIN2 ,INPUT);
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	62 e0       	ldi	r22, 0x02	; 2
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
		#if INT_SENSE_CONTROL == FALLING_EDGE
			DIO_voidSetPinvalue(PORTD,PIN2,HIGH);
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			/*falling edge*/
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    11ca:	a5 e5       	ldi	r26, 0x55	; 85
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e5       	ldi	r30, 0x55	; 85
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8e 7f       	andi	r24, 0xFE	; 254
    11e4:	8c 93       	st	X, r24
		#elif INT_SENSE_CONTROL == RISING_EDGE
			/*RISING edge*/
			CLR_BIT(MCUCR_REG,6);
		#endif
	#endif
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <EXTI_voidEnable>:

void EXTI_voidEnable(u8 Copy_u8IntNo , u8 Copy_u8Sensecontrol)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	2a 97       	sbiw	r28, 0x0a	; 10
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntNo)
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3a 87       	std	Y+10, r19	; 0x0a
    120c:	29 87       	std	Y+9, r18	; 0x09
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <EXTI_voidEnable+0x2e>
    1218:	6d c0       	rjmp	.+218    	; 0x12f4 <EXTI_voidEnable+0x108>
    121a:	29 85       	ldd	r18, Y+9	; 0x09
    121c:	3a 85       	ldd	r19, Y+10	; 0x0a
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <EXTI_voidEnable+0x3a>
    1224:	c9 c0       	rjmp	.+402    	; 0x13b8 <EXTI_voidEnable+0x1cc>
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	09 f0       	breq	.+2      	; 0x1230 <EXTI_voidEnable+0x44>
    122e:	e9 c0       	rjmp	.+466    	; 0x1402 <EXTI_voidEnable+0x216>
	{
		case INT0:
			SET_BIT(GICR_REG,6);
    1230:	ab e5       	ldi	r26, 0x5B	; 91
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e5       	ldi	r30, 0x5B	; 91
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 64       	ori	r24, 0x40	; 64
    123c:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	38 87       	std	Y+8, r19	; 0x08
    1246:	2f 83       	std	Y+7, r18	; 0x07
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	21 f1       	breq	.+72     	; 0x129a <EXTI_voidEnable+0xae>
    1252:	2f 81       	ldd	r18, Y+7	; 0x07
    1254:	38 85       	ldd	r19, Y+8	; 0x08
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <EXTI_voidEnable+0x7a>
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 f0       	breq	.+24     	; 0x127c <EXTI_voidEnable+0x90>
    1264:	ce c0       	rjmp	.+412    	; 0x1402 <EXTI_voidEnable+0x216>
    1266:	2f 81       	ldd	r18, Y+7	; 0x07
    1268:	38 85       	ldd	r19, Y+8	; 0x08
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	21 f1       	breq	.+72     	; 0x12b8 <EXTI_voidEnable+0xcc>
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	71 f1       	breq	.+92     	; 0x12d6 <EXTI_voidEnable+0xea>
    127a:	c3 c0       	rjmp	.+390    	; 0x1402 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,1);
    127c:	a5 e5       	ldi	r26, 0x55	; 85
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e5       	ldi	r30, 0x55	; 85
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	82 60       	ori	r24, 0x02	; 2
    1288:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    128a:	a5 e5       	ldi	r26, 0x55	; 85
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e5       	ldi	r30, 0x55	; 85
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8e 7f       	andi	r24, 0xFE	; 254
    1296:	8c 93       	st	X, r24
    1298:	b4 c0       	rjmp	.+360    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,1);
    129a:	a5 e5       	ldi	r26, 0x55	; 85
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e5 e5       	ldi	r30, 0x55	; 85
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    12a8:	a5 e5       	ldi	r26, 0x55	; 85
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e5       	ldi	r30, 0x55	; 85
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	8c 93       	st	X, r24
    12b6:	a5 c0       	rjmp	.+330    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,1);
    12b8:	a5 e5       	ldi	r26, 0x55	; 85
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e5       	ldi	r30, 0x55	; 85
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8d 7f       	andi	r24, 0xFD	; 253
    12c4:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    12c6:	a5 e5       	ldi	r26, 0x55	; 85
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e5       	ldi	r30, 0x55	; 85
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
    12d4:	96 c0       	rjmp	.+300    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,1);
    12d6:	a5 e5       	ldi	r26, 0x55	; 85
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e5       	ldi	r30, 0x55	; 85
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8d 7f       	andi	r24, 0xFD	; 253
    12e2:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    12e4:	a5 e5       	ldi	r26, 0x55	; 85
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e5       	ldi	r30, 0x55	; 85
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	81 60       	ori	r24, 0x01	; 1
    12f0:	8c 93       	st	X, r24
    12f2:	87 c0       	rjmp	.+270    	; 0x1402 <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT1:
			SET_BIT(GICR_REG,7);
    12f4:	ab e5       	ldi	r26, 0x5B	; 91
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	eb e5       	ldi	r30, 0x5B	; 91
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 68       	ori	r24, 0x80	; 128
    1300:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3e 83       	std	Y+6, r19	; 0x06
    130a:	2d 83       	std	Y+5, r18	; 0x05
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	21 f1       	breq	.+72     	; 0x135e <EXTI_voidEnable+0x172>
    1316:	2d 81       	ldd	r18, Y+5	; 0x05
    1318:	3e 81       	ldd	r19, Y+6	; 0x06
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <EXTI_voidEnable+0x13e>
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	61 f0       	breq	.+24     	; 0x1340 <EXTI_voidEnable+0x154>
    1328:	6c c0       	rjmp	.+216    	; 0x1402 <EXTI_voidEnable+0x216>
    132a:	2d 81       	ldd	r18, Y+5	; 0x05
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	21 f1       	breq	.+72     	; 0x137c <EXTI_voidEnable+0x190>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	71 f1       	breq	.+92     	; 0x139a <EXTI_voidEnable+0x1ae>
    133e:	61 c0       	rjmp	.+194    	; 0x1402 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,3);
    1340:	a5 e5       	ldi	r26, 0x55	; 85
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e5       	ldi	r30, 0x55	; 85
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 60       	ori	r24, 0x08	; 8
    134c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    134e:	a5 e5       	ldi	r26, 0x55	; 85
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e5       	ldi	r30, 0x55	; 85
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8b 7f       	andi	r24, 0xFB	; 251
    135a:	8c 93       	st	X, r24
    135c:	52 c0       	rjmp	.+164    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,3);
    135e:	a5 e5       	ldi	r26, 0x55	; 85
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e5       	ldi	r30, 0x55	; 85
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 60       	ori	r24, 0x08	; 8
    136a:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    136c:	a5 e5       	ldi	r26, 0x55	; 85
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e5       	ldi	r30, 0x55	; 85
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	84 60       	ori	r24, 0x04	; 4
    1378:	8c 93       	st	X, r24
    137a:	43 c0       	rjmp	.+134    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,3);
    137c:	a5 e5       	ldi	r26, 0x55	; 85
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e5       	ldi	r30, 0x55	; 85
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    138a:	a5 e5       	ldi	r26, 0x55	; 85
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e5       	ldi	r30, 0x55	; 85
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8b 7f       	andi	r24, 0xFB	; 251
    1396:	8c 93       	st	X, r24
    1398:	34 c0       	rjmp	.+104    	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,3);
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	87 7f       	andi	r24, 0xF7	; 247
    13a6:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    13a8:	a5 e5       	ldi	r26, 0x55	; 85
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e5       	ldi	r30, 0x55	; 85
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	84 60       	ori	r24, 0x04	; 4
    13b4:	8c 93       	st	X, r24
    13b6:	25 c0       	rjmp	.+74     	; 0x1402 <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT2:
			SET_BIT(GICR_REG,5);
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 62       	ori	r24, 0x20	; 32
    13c4:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3c 83       	std	Y+4, r19	; 0x04
    13ce:	2b 83       	std	Y+3, r18	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <EXTI_voidEnable+0x1f8>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	21 30       	cpi	r18, 0x01	; 1
    13de:	31 05       	cpc	r19, r1
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <EXTI_voidEnable+0x208>
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					CLR_BIT(MCUCSR_REG,6);
    13e4:	a4 e5       	ldi	r26, 0x54	; 84
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e4 e5       	ldi	r30, 0x54	; 84
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	8c 93       	st	X, r24
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCSR_REG,6);
    13f4:	a4 e5       	ldi	r26, 0x54	; 84
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e4 e5       	ldi	r30, 0x54	; 84
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	8c 93       	st	X, r24
			break ;
		default:
			break ;
	}

}
    1402:	2a 96       	adiw	r28, 0x0a	; 10
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8IntNo)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <EXTI_voidDisable+0x6>
    141a:	0f 92       	push	r0
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNo)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3b 83       	std	Y+3, r19	; 0x03
    142a:	2a 83       	std	Y+2, r18	; 0x02
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	89 f0       	breq	.+34     	; 0x1458 <EXTI_voidDisable+0x44>
    1436:	2a 81       	ldd	r18, Y+2	; 0x02
    1438:	3b 81       	ldd	r19, Y+3	; 0x03
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	a1 f0       	breq	.+40     	; 0x1468 <EXTI_voidDisable+0x54>
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	b9 f4       	brne	.+46     	; 0x1476 <EXTI_voidDisable+0x62>
	{
		case INT0 :
			CLR_BIT(GICR_REG,6);
    1448:	ab e5       	ldi	r26, 0x5B	; 91
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	eb e5       	ldi	r30, 0x5B	; 91
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8f 7b       	andi	r24, 0xBF	; 191
    1454:	8c 93       	st	X, r24
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <EXTI_voidDisable+0x62>
			break;
		case INT1 :
			CLR_BIT(GICR_REG,7);
    1458:	ab e5       	ldi	r26, 0x5B	; 91
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	eb e5       	ldi	r30, 0x5B	; 91
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8f 77       	andi	r24, 0x7F	; 127
    1464:	8c 93       	st	X, r24
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <EXTI_voidDisable+0x62>
			break;
		case INT2 :
			CLR_BIT(GICR_REG,5);
    1468:	ab e5       	ldi	r26, 0x5B	; 91
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e5       	ldi	r30, 0x5B	; 91
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8f 7d       	andi	r24, 0xDF	; 223
    1474:	8c 93       	st	X, r24

	}



}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <EXTI_voidSetCallBack_INT0>:

void EXTI_voidSetCallBack_INT0(void(*LPF1)(void))
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <EXTI_voidSetCallBack_INT0+0x6>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
	GpF1 = LPF1 ;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	90 93 15 01 	sts	0x0115, r25
    1498:	80 93 14 01 	sts	0x0114, r24
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EXTI_voidSetCallBack_INT1>:

void EXTI_voidSetCallBack_INT1(void(*LPF2)(void))
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <EXTI_voidSetCallBack_INT1+0x6>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
	GpF2 = LPF2 ;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	90 93 17 01 	sts	0x0117, r25
    14bc:	80 93 16 01 	sts	0x0116, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <EXTI_voidSetCallBack_INT2>:

void EXTI_voidSetCallBack_INT2(void(*LPF3)(void))
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <EXTI_voidSetCallBack_INT2+0x6>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
	GpF3 = LPF3 ;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	90 93 19 01 	sts	0x0119, r25
    14e0:	80 93 18 01 	sts	0x0118, r24
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <__vector_1>:




void __vector_1(void)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	if(GpF1!=NULL)
    1518:	80 91 14 01 	lds	r24, 0x0114
    151c:	90 91 15 01 	lds	r25, 0x0115
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	29 f0       	breq	.+10     	; 0x152e <__vector_1+0x40>
	{
		GpF1();
    1524:	e0 91 14 01 	lds	r30, 0x0114
    1528:	f0 91 15 01 	lds	r31, 0x0115
    152c:	09 95       	icall
	}
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_2>:

void __vector_2(void)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	if(GpF2!=NULL)
    157e:	80 91 16 01 	lds	r24, 0x0116
    1582:	90 91 17 01 	lds	r25, 0x0117
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	29 f0       	breq	.+10     	; 0x1594 <__vector_2+0x40>
	{
		GpF2();
    158a:	e0 91 16 01 	lds	r30, 0x0116
    158e:	f0 91 17 01 	lds	r31, 0x0117
    1592:	09 95       	icall
	}
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_3>:

void __vector_3(void)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	if(GpF3!=NULL)
    15e4:	80 91 18 01 	lds	r24, 0x0118
    15e8:	90 91 19 01 	lds	r25, 0x0119
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	29 f0       	breq	.+10     	; 0x15fa <__vector_3+0x40>
	{
		GpF3();
    15f0:	e0 91 18 01 	lds	r30, 0x0118
    15f4:	f0 91 19 01 	lds	r31, 0x0119
    15f8:	09 95       	icall
	}
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <DIO_voidSetPinvalue>:




void DIO_voidSetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	29 97       	sbiw	r28, 0x09	; 9
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
    1638:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	08 f0       	brcs	.+2      	; 0x1642 <DIO_voidSetPinvalue+0x22>
    1640:	f6 c0       	rjmp	.+492    	; 0x182e <DIO_voidSetPinvalue+0x20e>
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 30       	cpi	r24, 0x08	; 8
    1646:	08 f0       	brcs	.+2      	; 0x164a <DIO_voidSetPinvalue+0x2a>
    1648:	f2 c0       	rjmp	.+484    	; 0x182e <DIO_voidSetPinvalue+0x20e>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8Direction)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	39 87       	std	Y+9, r19	; 0x09
    1652:	28 87       	std	Y+8, r18	; 0x08
    1654:	88 85       	ldd	r24, Y+8	; 0x08
    1656:	99 85       	ldd	r25, Y+9	; 0x09
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	39 f0       	breq	.+14     	; 0x166a <DIO_voidSetPinvalue+0x4a>
    165c:	28 85       	ldd	r18, Y+8	; 0x08
    165e:	39 85       	ldd	r19, Y+9	; 0x09
    1660:	21 30       	cpi	r18, 0x01	; 1
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <DIO_voidSetPinvalue+0x48>
    1666:	75 c0       	rjmp	.+234    	; 0x1752 <DIO_voidSetPinvalue+0x132>
    1668:	e2 c0       	rjmp	.+452    	; 0x182e <DIO_voidSetPinvalue+0x20e>
		{
			case LOW  : switch(Copy_u8PortId)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3f 83       	std	Y+7, r19	; 0x07
    1672:	2e 83       	std	Y+6, r18	; 0x06
    1674:	8e 81       	ldd	r24, Y+6	; 0x06
    1676:	9f 81       	ldd	r25, Y+7	; 0x07
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	59 f1       	breq	.+86     	; 0x16d4 <DIO_voidSetPinvalue+0xb4>
    167e:	2e 81       	ldd	r18, Y+6	; 0x06
    1680:	3f 81       	ldd	r19, Y+7	; 0x07
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <DIO_voidSetPinvalue+0x72>
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	9f 81       	ldd	r25, Y+7	; 0x07
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f0       	breq	.+26     	; 0x16aa <DIO_voidSetPinvalue+0x8a>
    1690:	ce c0       	rjmp	.+412    	; 0x182e <DIO_voidSetPinvalue+0x20e>
    1692:	2e 81       	ldd	r18, Y+6	; 0x06
    1694:	3f 81       	ldd	r19, Y+7	; 0x07
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	89 f1       	breq	.+98     	; 0x16fe <DIO_voidSetPinvalue+0xde>
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <DIO_voidSetPinvalue+0x88>
    16a6:	40 c0       	rjmp	.+128    	; 0x1728 <DIO_voidSetPinvalue+0x108>
    16a8:	c2 c0       	rjmp	.+388    	; 0x182e <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										CLR_BIT(PORTA_REG,Copy_u8PinId);
    16aa:	ab e3       	ldi	r26, 0x3B	; 59
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_voidSetPinvalue+0xa8>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_voidSetPinvalue+0xa4>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	ad c0       	rjmp	.+346    	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										CLR_BIT(PORTB_REG,Copy_u8PinId);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_voidSetPinvalue+0xd2>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_voidSetPinvalue+0xce>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	98 c0       	rjmp	.+304    	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										CLR_BIT(PORTC_REG,Copy_u8PinId);
    16fe:	a5 e3       	ldi	r26, 0x35	; 53
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_voidSetPinvalue+0xfc>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_voidSetPinvalue+0xf8>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	83 c0       	rjmp	.+262    	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										CLR_BIT(PORTD_REG,Copy_u8PinId);
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_voidSetPinvalue+0x126>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_voidSetPinvalue+0x122>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	6e c0       	rjmp	.+220    	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							default :
										break ;
						}
						break ;
			case HIGH  : switch(Copy_u8PortId)
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	3d 83       	std	Y+5, r19	; 0x05
    175a:	2c 83       	std	Y+4, r18	; 0x04
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	49 f1       	breq	.+82     	; 0x17b8 <DIO_voidSetPinvalue+0x198>
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <DIO_voidSetPinvalue+0x15a>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	61 f0       	breq	.+24     	; 0x1790 <DIO_voidSetPinvalue+0x170>
    1778:	5a c0       	rjmp	.+180    	; 0x182e <DIO_voidSetPinvalue+0x20e>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	71 f1       	breq	.+92     	; 0x17e0 <DIO_voidSetPinvalue+0x1c0>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	e9 f1       	breq	.+122    	; 0x1808 <DIO_voidSetPinvalue+0x1e8>
    178e:	4f c0       	rjmp	.+158    	; 0x182e <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										SET_BIT(PORTA_REG,Copy_u8PinId);
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_voidSetPinvalue+0x18e>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_voidSetPinvalue+0x18a>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	3b c0       	rjmp	.+118    	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										SET_BIT(PORTB_REG,Copy_u8PinId);
    17b8:	a8 e3       	ldi	r26, 0x38	; 56
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_voidSetPinvalue+0x1b6>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_voidSetPinvalue+0x1b2>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	27 c0       	rjmp	.+78     	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										SET_BIT(PORTC_REG,Copy_u8PinId);
    17e0:	a5 e3       	ldi	r26, 0x35	; 53
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e3       	ldi	r30, 0x35	; 53
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_voidSetPinvalue+0x1de>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_voidSetPinvalue+0x1da>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	13 c0       	rjmp	.+38     	; 0x182e <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										SET_BIT(PORTD_REG,Copy_u8PinId);
    1808:	a2 e3       	ldi	r26, 0x32	; 50
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e2 e3       	ldi	r30, 0x32	; 50
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_voidSetPinvalue+0x206>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_voidSetPinvalue+0x202>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24

			default :
				break ;
		}
	}
}
    182e:	29 96       	adiw	r28, 0x09	; 9
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	29 97       	sbiw	r28, 0x09	; 9
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
    1858:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	08 f0       	brcs	.+2      	; 0x1862 <DIO_voidSetPinDirection+0x22>
    1860:	f6 c0       	rjmp	.+492    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	08 f0       	brcs	.+2      	; 0x186a <DIO_voidSetPinDirection+0x2a>
    1868:	f2 c0       	rjmp	.+484    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
		{
			//do nothing
		}
		else
		{
			switch(Copy_u8Direction)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	39 87       	std	Y+9, r19	; 0x09
    1872:	28 87       	std	Y+8, r18	; 0x08
    1874:	88 85       	ldd	r24, Y+8	; 0x08
    1876:	99 85       	ldd	r25, Y+9	; 0x09
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	39 f0       	breq	.+14     	; 0x188a <DIO_voidSetPinDirection+0x4a>
    187c:	28 85       	ldd	r18, Y+8	; 0x08
    187e:	39 85       	ldd	r19, Y+9	; 0x09
    1880:	21 30       	cpi	r18, 0x01	; 1
    1882:	31 05       	cpc	r19, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <DIO_voidSetPinDirection+0x48>
    1886:	75 c0       	rjmp	.+234    	; 0x1972 <DIO_voidSetPinDirection+0x132>
    1888:	e2 c0       	rjmp	.+452    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
			{
				case INPUT  : switch(Copy_u8PortId)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3f 83       	std	Y+7, r19	; 0x07
    1892:	2e 83       	std	Y+6, r18	; 0x06
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	59 f1       	breq	.+86     	; 0x18f4 <DIO_voidSetPinDirection+0xb4>
    189e:	2e 81       	ldd	r18, Y+6	; 0x06
    18a0:	3f 81       	ldd	r19, Y+7	; 0x07
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <DIO_voidSetPinDirection+0x72>
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f0       	breq	.+26     	; 0x18ca <DIO_voidSetPinDirection+0x8a>
    18b0:	ce c0       	rjmp	.+412    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
    18b2:	2e 81       	ldd	r18, Y+6	; 0x06
    18b4:	3f 81       	ldd	r19, Y+7	; 0x07
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	89 f1       	breq	.+98     	; 0x191e <DIO_voidSetPinDirection+0xde>
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	91 05       	cpc	r25, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <DIO_voidSetPinDirection+0x88>
    18c6:	40 c0       	rjmp	.+128    	; 0x1948 <DIO_voidSetPinDirection+0x108>
    18c8:	c2 c0       	rjmp	.+388    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											CLR_BIT(DDRA_REG,Copy_u8PinId);
    18ca:	aa e3       	ldi	r26, 0x3A	; 58
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ea e3       	ldi	r30, 0x3A	; 58
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_voidSetPinDirection+0xa8>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_voidSetPinDirection+0xa4>
    18ec:	80 95       	com	r24
    18ee:	84 23       	and	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	ad c0       	rjmp	.+346    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											CLR_BIT(DDRB_REG,Copy_u8PinId);
    18f4:	a7 e3       	ldi	r26, 0x37	; 55
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_voidSetPinDirection+0xd2>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_voidSetPinDirection+0xce>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	98 c0       	rjmp	.+304    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											CLR_BIT(DDRC_REG,Copy_u8PinId);
    191e:	a4 e3       	ldi	r26, 0x34	; 52
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e4 e3       	ldi	r30, 0x34	; 52
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_voidSetPinDirection+0xfc>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_voidSetPinDirection+0xf8>
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	83 c0       	rjmp	.+262    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											CLR_BIT(DDRD_REG,Copy_u8PinId);
    1948:	a1 e3       	ldi	r26, 0x31	; 49
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_voidSetPinDirection+0x126>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_voidSetPinDirection+0x122>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	6e c0       	rjmp	.+220    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								default :
											break ;
							}
							break ;
				case OUTPUT  : switch(Copy_u8PortId)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3d 83       	std	Y+5, r19	; 0x05
    197a:	2c 83       	std	Y+4, r18	; 0x04
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	49 f1       	breq	.+82     	; 0x19d8 <DIO_voidSetPinDirection+0x198>
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	3d 81       	ldd	r19, Y+5	; 0x05
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <DIO_voidSetPinDirection+0x15a>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <DIO_voidSetPinDirection+0x170>
    1998:	5a c0       	rjmp	.+180    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	71 f1       	breq	.+92     	; 0x1a00 <DIO_voidSetPinDirection+0x1c0>
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	e9 f1       	breq	.+122    	; 0x1a28 <DIO_voidSetPinDirection+0x1e8>
    19ae:	4f c0       	rjmp	.+158    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											SET_BIT(DDRA_REG,Copy_u8PinId);
    19b0:	aa e3       	ldi	r26, 0x3A	; 58
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_voidSetPinDirection+0x18e>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_voidSetPinDirection+0x18a>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	3b c0       	rjmp	.+118    	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											SET_BIT(DDRB_REG,Copy_u8PinId);
    19d8:	a7 e3       	ldi	r26, 0x37	; 55
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e7 e3       	ldi	r30, 0x37	; 55
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_voidSetPinDirection+0x1b6>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_voidSetPinDirection+0x1b2>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
    19fe:	27 c0       	rjmp	.+78     	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											SET_BIT(DDRC_REG,Copy_u8PinId);
    1a00:	a4 e3       	ldi	r26, 0x34	; 52
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e4 e3       	ldi	r30, 0x34	; 52
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_voidSetPinDirection+0x1de>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_voidSetPinDirection+0x1da>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	13 c0       	rjmp	.+38     	; 0x1a4e <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											SET_BIT(DDRD_REG,Copy_u8PinId);
    1a28:	a1 e3       	ldi	r26, 0x31	; 49
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e1 e3       	ldi	r30, 0x31	; 49
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_voidSetPinDirection+0x206>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <DIO_voidSetPinDirection+0x202>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24

					default :
							break ;
			}
		}
}
    1a4e:	29 96       	adiw	r28, 0x09	; 9
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <DIO_u8GetPinvalue>:


u8 DIO_u8GetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <DIO_u8GetPinvalue+0x6>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <DIO_u8GetPinvalue+0x8>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3d 83       	std	Y+5, r19	; 0x05
    1a7a:	2c 83       	std	Y+4, r18	; 0x04
    1a7c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a80:	41 30       	cpi	r20, 0x01	; 1
    1a82:	51 05       	cpc	r21, r1
    1a84:	41 f1       	breq	.+80     	; 0x1ad6 <DIO_u8GetPinvalue+0x76>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	34 f4       	brge	.+12     	; 0x1a9c <DIO_u8GetPinvalue+0x3c>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	21 15       	cp	r18, r1
    1a96:	31 05       	cpc	r19, r1
    1a98:	61 f0       	breq	.+24     	; 0x1ab2 <DIO_u8GetPinvalue+0x52>
    1a9a:	52 c0       	rjmp	.+164    	; 0x1b40 <DIO_u8GetPinvalue+0xe0>
    1a9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a9e:	5d 81       	ldd	r21, Y+5	; 0x05
    1aa0:	42 30       	cpi	r20, 0x02	; 2
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	51 f1       	breq	.+84     	; 0x1afa <DIO_u8GetPinvalue+0x9a>
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	91 05       	cpc	r25, r1
    1aae:	b9 f1       	breq	.+110    	; 0x1b1e <DIO_u8GetPinvalue+0xbe>
    1ab0:	47 c0       	rjmp	.+142    	; 0x1b40 <DIO_u8GetPinvalue+0xe0>
	{
		case PORTA : Local_u8Variable=GET_BIT(PINA_REG , Copy_u8PinId) ;
    1ab2:	e9 e3       	ldi	r30, 0x39	; 57
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_u8GetPinvalue+0x6a>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_u8GetPinvalue+0x66>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	35 c0       	rjmp	.+106    	; 0x1b40 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTB : Local_u8Variable=GET_BIT(PINB_REG , Copy_u8PinId) ;
    1ad6:	e6 e3       	ldi	r30, 0x36	; 54
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_u8GetPinvalue+0x8e>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_u8GetPinvalue+0x8a>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	23 c0       	rjmp	.+70     	; 0x1b40 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTC : Local_u8Variable=GET_BIT(PINC_REG , Copy_u8PinId) ;
    1afa:	e3 e3       	ldi	r30, 0x33	; 51
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_u8GetPinvalue+0xb2>
    1b0e:	55 95       	asr	r21
    1b10:	47 95       	ror	r20
    1b12:	8a 95       	dec	r24
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_u8GetPinvalue+0xae>
    1b16:	ca 01       	movw	r24, r20
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTD : Local_u8Variable=GET_BIT(PIND_REG , Copy_u8PinId) ;
    1b1e:	e0 e3       	ldi	r30, 0x30	; 48
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a9 01       	movw	r20, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_u8GetPinvalue+0xd6>
    1b32:	55 95       	asr	r21
    1b34:	47 95       	ror	r20
    1b36:	8a 95       	dec	r24
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_u8GetPinvalue+0xd2>
    1b3a:	ca 01       	movw	r24, r20
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_voidSetPortvalue>:

void DIO_voidSetPortvalue(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <DIO_voidSetPortvalue+0x6>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <DIO_voidSetPortvalue+0x8>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	84 30       	cpi	r24, 0x04	; 4
    1b66:	90 f5       	brcc	.+100    	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3c 83       	std	Y+4, r19	; 0x04
    1b70:	2b 83       	std	Y+3, r18	; 0x03
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	d1 f0       	breq	.+52     	; 0x1bb0 <DIO_voidSetPortvalue+0x5e>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <DIO_voidSetPortvalue+0x3e>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	61 f0       	breq	.+24     	; 0x1ba6 <DIO_voidSetPortvalue+0x54>
    1b8e:	1e c0       	rjmp	.+60     	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <DIO_voidSetPortvalue+0x68>
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	83 30       	cpi	r24, 0x03	; 3
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <DIO_voidSetPortvalue+0x72>
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
		{
			case PORTA :PORTA_REG = Copy_u8Direction ;
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	0e c0       	rjmp	.+28     	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTB :
						PORTB_REG = Copy_u8Direction ;
    1bb0:	e8 e3       	ldi	r30, 0x38	; 56
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTC :
						PORTC_REG = Copy_u8Direction ;
    1bba:	e5 e3       	ldi	r30, 0x35	; 53
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTD :
						PORTD_REG = Copy_u8Direction ;
    1bc4:	e2 e3       	ldi	r30, 0x32	; 50
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
						break ;

		}
	}

}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <DIO_voidSetPortDirection+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <DIO_voidSetPortDirection+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	84 30       	cpi	r24, 0x04	; 4
    1bee:	90 f5       	brcc	.+100    	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	3c 83       	std	Y+4, r19	; 0x04
    1bf8:	2b 83       	std	Y+3, r18	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	d1 f0       	breq	.+52     	; 0x1c38 <DIO_voidSetPortDirection+0x5e>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <DIO_voidSetPortDirection+0x3e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	61 f0       	breq	.+24     	; 0x1c2e <DIO_voidSetPortDirection+0x54>
    1c16:	1e c0       	rjmp	.+60     	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <DIO_voidSetPortDirection+0x68>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	91 05       	cpc	r25, r1
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <DIO_voidSetPortDirection+0x72>
    1c2c:	13 c0       	rjmp	.+38     	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
		{
			case PORTA :DDRA_REG = Copy_u8Direction ;
    1c2e:	ea e3       	ldi	r30, 0x3A	; 58
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTB :
						DDRB_REG = Copy_u8Direction ;
    1c38:	e7 e3       	ldi	r30, 0x37	; 55
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTC :
						DDRC_REG = Copy_u8Direction ;
    1c42:	e4 e3       	ldi	r30, 0x34	; 52
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTD :
						DDRD_REG = Copy_u8Direction ;
    1c4c:	e1 e3       	ldi	r30, 0x31	; 49
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
						break ;

		}
	}

}u8 DIO_u8GetPortvalue(u8 Copy_u8PortId)
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <DIO_u8GetPortvalue>:
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <DIO_u8GetPortvalue+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <DIO_u8GetPortvalue+0x8>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <DIO_u8GetPortvalue+0x56>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <DIO_u8GetPortvalue+0x36>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <DIO_u8GetPortvalue+0x4c>
    1c96:	1e c0       	rjmp	.+60     	; 0x1cd4 <DIO_u8GetPortvalue+0x72>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <DIO_u8GetPortvalue+0x60>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <DIO_u8GetPortvalue+0x6a>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <DIO_u8GetPortvalue+0x72>
	{
		case PORTA : Local_u8Variable=PINA_REG ;
    1cae:	e9 e3       	ldi	r30, 0x39	; 57
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTB : Local_u8Variable=PINB_REG ;
    1cb8:	e6 e3       	ldi	r30, 0x36	; 54
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTC : Local_u8Variable=PINC_REG ;
    1cc2:	e3 e3       	ldi	r30, 0x33	; 51
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTD : Local_u8Variable=PIND_REG ;
    1ccc:	e0 e3       	ldi	r30, 0x30	; 48
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <ADC_voidInit>:
u32 ADC_u32ADCDigitalValue ;
u32 ADC_u32ADCAnalogValue ;
u8 ADC_Flag = 0 ;

void ADC_voidInit(void)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	//select ref voltage = AVCC
	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    1cec:	a7 e2       	ldi	r26, 0x27	; 39
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e7 e2       	ldi	r30, 0x27	; 39
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 64       	ori	r24, 0x40	; 64
    1cf8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    1cfa:	a7 e2       	ldi	r26, 0x27	; 39
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e7 e2       	ldi	r30, 0x27	; 39
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 77       	andi	r24, 0x7F	; 127
    1d06:	8c 93       	st	X, r24
	//right adjust
	CLR_BIT(ADMUX_REG , ADMUX_ADLAR);
    1d08:	a7 e2       	ldi	r26, 0x27	; 39
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e7 e2       	ldi	r30, 0x27	; 39
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8f 7d       	andi	r24, 0xDF	; 223
    1d14:	8c 93       	st	X, r24
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    1d16:	a6 e2       	ldi	r26, 0x26	; 38
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e6 e2       	ldi	r30, 0x26	; 38
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 68       	ori	r24, 0x80	; 128
    1d22:	8c 93       	st	X, r24
	//Disable Auto Trigger
	CLR_BIT(ADCSRA_REG , ADCSRA_ADATE);
    1d24:	a6 e2       	ldi	r26, 0x26	; 38
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e6 e2       	ldi	r30, 0x26	; 38
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 7d       	andi	r24, 0xDF	; 223
    1d30:	8c 93       	st	X, r24
	//Disable PIE for ADC
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIF);
    1d32:	a6 e2       	ldi	r26, 0x26	; 38
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e6 e2       	ldi	r30, 0x26	; 38
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8f 7e       	andi	r24, 0xEF	; 239
    1d3e:	8c 93       	st	X, r24
	//prescaler 64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    1d40:	a6 e2       	ldi	r26, 0x26	; 38
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e6 e2       	ldi	r30, 0x26	; 38
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	84 60       	ori	r24, 0x04	; 4
    1d4c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    1d4e:	a6 e2       	ldi	r26, 0x26	; 38
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e6 e2       	ldi	r30, 0x26	; 38
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	82 60       	ori	r24, 0x02	; 2
    1d5a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    1d5c:	a6 e2       	ldi	r26, 0x26	; 38
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e6 e2       	ldi	r30, 0x26	; 38
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8e 7f       	andi	r24, 0xFE	; 254
    1d68:	8c 93       	st	X, r24
	//ADCSRA_REG &= 0b11111000
	//ADCSRA_REG |= ADC_PRESCALLER

}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <ADC_voidGetAnalogRead>:

u32 ADC_voidGetAnalogRead(u8 Copy_Channel)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	29 97       	sbiw	r28, 0x09	; 9
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_u32ADCDigitalValue ;
	u32 Local_u32ADCAnalogValue ;

	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= 0b11100000 ;
    1d86:	a7 e2       	ldi	r26, 0x27	; 39
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e7 e2       	ldi	r30, 0x27	; 39
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 7e       	andi	r24, 0xE0	; 224
    1d92:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    1d94:	a7 e2       	ldi	r26, 0x27	; 39
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e7 e2       	ldi	r30, 0x27	; 39
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	90 81       	ld	r25, Z
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	89 2b       	or	r24, r25
    1da2:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1da4:	a6 e2       	ldi	r26, 0x26	; 38
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e6 e2       	ldi	r30, 0x26	; 38
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 64       	ori	r24, 0x40	; 64
    1db0:	8c 93       	st	X, r24
	//polling flag
	while(GET_BIT(ADCSRA_REG , ADCSRA_ADIF)==0);
    1db2:	e6 e2       	ldi	r30, 0x26	; 38
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	82 95       	swap	r24
    1dba:	8f 70       	andi	r24, 0x0F	; 15
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	81 70       	andi	r24, 0x01	; 1
    1dc2:	90 70       	andi	r25, 0x00	; 0
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a9 f3       	breq	.-22     	; 0x1db2 <ADC_voidGetAnalogRead+0x42>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    1dc8:	a6 e2       	ldi	r26, 0x26	; 38
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e6 e2       	ldi	r30, 0x26	; 38
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 61       	ori	r24, 0x10	; 16
    1dd4:	8c 93       	st	X, r24
	//get reading right adjust
	Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1dd6:	e4 e2       	ldi	r30, 0x24	; 36
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	e5 e2       	ldi	r30, 0x25	; 37
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	98 2f       	mov	r25, r24
    1dec:	88 27       	eor	r24, r24
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	aa 27       	eor	r26, r26
    1df4:	97 fd       	sbrc	r25, 7
    1df6:	a0 95       	com	r26
    1df8:	ba 2f       	mov	r27, r26
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	af 83       	std	Y+7, r26	; 0x07
    1e00:	b8 87       	std	Y+8, r27	; 0x08

	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 5000) / 1024 ;
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	af 81       	ldd	r26, Y+7	; 0x07
    1e08:	b8 85       	ldd	r27, Y+8	; 0x08
    1e0a:	28 e8       	ldi	r18, 0x88	; 136
    1e0c:	33 e1       	ldi	r19, 0x13	; 19
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 84 2b 	call	0x5708	; 0x5708 <__mulsi3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	07 2e       	mov	r0, r23
    1e20:	7a e0       	ldi	r23, 0x0A	; 10
    1e22:	b6 95       	lsr	r27
    1e24:	a7 95       	ror	r26
    1e26:	97 95       	ror	r25
    1e28:	87 95       	ror	r24
    1e2a:	7a 95       	dec	r23
    1e2c:	d1 f7       	brne	.-12     	; 0x1e22 <ADC_voidGetAnalogRead+0xb2>
    1e2e:	70 2d       	mov	r23, r0
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	ab 83       	std	Y+3, r26	; 0x03
    1e36:	bc 83       	std	Y+4, r27	; 0x04


	return Local_u32ADCAnalogValue ;
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e3e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	29 96       	adiw	r28, 0x09	; 9
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <ADC_voidGetAnalogReadAsynch>:

u32 ADC_voidGetAnalogReadAsynch(u8 Copy_Channel , void(*Copy_pvCallBackFunc)(void))
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	27 97       	sbiw	r28, 0x07	; 7
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	7b 83       	std	Y+3, r23	; 0x03
    1e6e:	6a 83       	std	Y+2, r22	; 0x02
	if((ADC_Flag==1) ||(Copy_pvCallBackFunc==  NULL) )
    1e70:	80 91 1c 01 	lds	r24, 0x011C
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <ADC_voidGetAnalogReadAsynch+0x2a>
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <ADC_voidGetAnalogReadAsynch+0x34>
	{
		return 0 ;
    1e80:	1c 82       	std	Y+4, r1	; 0x04
    1e82:	1d 82       	std	Y+5, r1	; 0x05
    1e84:	1e 82       	std	Y+6, r1	; 0x06
    1e86:	1f 82       	std	Y+7, r1	; 0x07
    1e88:	32 c0       	rjmp	.+100    	; 0x1eee <ADC_voidGetAnalogReadAsynch+0x98>
	}
	else
	{
		ADC_Flag = 1 ; //busy
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 1c 01 	sts	0x011C, r24
		//clear Mux from 0 to 4 (reg&0b11100000)
		ADMUX_REG &= 0b11100000 ;
    1e90:	a7 e2       	ldi	r26, 0x27	; 39
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e7 e2       	ldi	r30, 0x27	; 39
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 7e       	andi	r24, 0xE0	; 224
    1e9c:	8c 93       	st	X, r24
		//reg or with copy_channel
		ADMUX_REG |= Copy_Channel ;
    1e9e:	a7 e2       	ldi	r26, 0x27	; 39
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e7 e2       	ldi	r30, 0x27	; 39
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	90 81       	ld	r25, Z
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	89 2b       	or	r24, r25
    1eac:	8c 93       	st	X, r24
		//set call back func
		ADC_GPF = Copy_pvCallBackFunc ;
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb2:	90 93 1b 01 	sts	0x011B, r25
    1eb6:	80 93 1a 01 	sts	0x011A, r24
		//start conversion
		SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1eba:	a6 e2       	ldi	r26, 0x26	; 38
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e6 e2       	ldi	r30, 0x26	; 38
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 64       	ori	r24, 0x40	; 64
    1ec6:	8c 93       	st	X, r24
		//Interrupt flag
		SET_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1ec8:	a6 e2       	ldi	r26, 0x26	; 38
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e6 e2       	ldi	r30, 0x26	; 38
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 60       	ori	r24, 0x08	; 8
    1ed4:	8c 93       	st	X, r24

		return ADC_u32ADCAnalogValue ;
    1ed6:	80 91 1d 01 	lds	r24, 0x011D
    1eda:	90 91 1e 01 	lds	r25, 0x011E
    1ede:	a0 91 1f 01 	lds	r26, 0x011F
    1ee2:	b0 91 20 01 	lds	r27, 0x0120
    1ee6:	8c 83       	std	Y+4, r24	; 0x04
    1ee8:	9d 83       	std	Y+5, r25	; 0x05
    1eea:	ae 83       	std	Y+6, r26	; 0x06
    1eec:	bf 83       	std	Y+7, r27	; 0x07
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	ae 81       	ldd	r26, Y+6	; 0x06
    1ef4:	bf 81       	ldd	r27, Y+7	; 0x07
	}
}
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	27 96       	adiw	r28, 0x07	; 7
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <__vector_16>:


void __vector_16(void)
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
	//get reading right adjust
	ADC_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1f36:	e4 e2       	ldi	r30, 0x24	; 36
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	e5 e2       	ldi	r30, 0x25	; 37
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	88 27       	eor	r24, r24
    1f4e:	82 0f       	add	r24, r18
    1f50:	93 1f       	adc	r25, r19
    1f52:	aa 27       	eor	r26, r26
    1f54:	97 fd       	sbrc	r25, 7
    1f56:	a0 95       	com	r26
    1f58:	ba 2f       	mov	r27, r26
    1f5a:	80 93 21 01 	sts	0x0121, r24
    1f5e:	90 93 22 01 	sts	0x0122, r25
    1f62:	a0 93 23 01 	sts	0x0123, r26
    1f66:	b0 93 24 01 	sts	0x0124, r27
	ADC_u32ADCAnalogValue = (ADC_u32ADCDigitalValue * 5000) / 1024 ;
    1f6a:	80 91 21 01 	lds	r24, 0x0121
    1f6e:	90 91 22 01 	lds	r25, 0x0122
    1f72:	a0 91 23 01 	lds	r26, 0x0123
    1f76:	b0 91 24 01 	lds	r27, 0x0124
    1f7a:	28 e8       	ldi	r18, 0x88	; 136
    1f7c:	33 e1       	ldi	r19, 0x13	; 19
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 84 2b 	call	0x5708	; 0x5708 <__mulsi3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	07 2e       	mov	r0, r23
    1f90:	7a e0       	ldi	r23, 0x0A	; 10
    1f92:	b6 95       	lsr	r27
    1f94:	a7 95       	ror	r26
    1f96:	97 95       	ror	r25
    1f98:	87 95       	ror	r24
    1f9a:	7a 95       	dec	r23
    1f9c:	d1 f7       	brne	.-12     	; 0x1f92 <__vector_16+0x86>
    1f9e:	70 2d       	mov	r23, r0
    1fa0:	80 93 1d 01 	sts	0x011D, r24
    1fa4:	90 93 1e 01 	sts	0x011E, r25
    1fa8:	a0 93 1f 01 	sts	0x011F, r26
    1fac:	b0 93 20 01 	sts	0x0120, r27

	ADC_Flag = 0 ; //not busy
    1fb0:	10 92 1c 01 	sts	0x011C, r1

	ADC_GPF() ; //call back function
    1fb4:	e0 91 1a 01 	lds	r30, 0x011A
    1fb8:	f0 91 1b 01 	lds	r31, 0x011B
    1fbc:	09 95       	icall

	//clear intuurrupt
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1fbe:	a6 e2       	ldi	r26, 0x26	; 38
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e6 e2       	ldi	r30, 0x26	; 38
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	87 7f       	andi	r24, 0xF7	; 247
    1fca:	8c 93       	st	X, r24


}
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	bf 91       	pop	r27
    1fd6:	af 91       	pop	r26
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	7f 91       	pop	r23
    1fde:	6f 91       	pop	r22
    1fe0:	5f 91       	pop	r21
    1fe2:	4f 91       	pop	r20
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <STP_voidInit>:
#include"STP_private.h"
#include"STP_interface.h"


void STP_voidInit(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT , STP_C1 , OUTPUT) ;
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	64 e0       	ldi	r22, 0x04	; 4
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C2 , OUTPUT) ;
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	65 e0       	ldi	r22, 0x05	; 5
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C3 , OUTPUT) ;
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	66 e0       	ldi	r22, 0x06	; 6
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C4 , OUTPUT) ;
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	67 e0       	ldi	r22, 0x07	; 7
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>

	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	64 e0       	ldi	r22, 0x04	; 4
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	66 e0       	ldi	r22, 0x06	; 6
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	67 e0       	ldi	r22, 0x07	; 7
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
}
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <STP_voidDirectionAngle>:

void STP_voidDirectionAngle(u8 Copy_u8Direction , u16 Copy_u8Angle)
{
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	ce 57       	subi	r28, 0x7E	; 126
    205e:	d0 40       	sbci	r29, 0x00	; 0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	fe 01       	movw	r30, r28
    206c:	e6 58       	subi	r30, 0x86	; 134
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 83       	st	Z, r24
    2072:	fe 01       	movw	r30, r28
    2074:	e5 58       	subi	r30, 0x85	; 133
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	71 83       	std	Z+1, r23	; 0x01
    207a:	60 83       	st	Z, r22
	u32 Local_STPSteps ;
	Local_STPSteps = Copy_u8Angle * 512 /360 ;
    207c:	fe 01       	movw	r30, r28
    207e:	e5 58       	subi	r30, 0x85	; 133
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	98 2f       	mov	r25, r24
    2088:	88 27       	eor	r24, r24
    208a:	99 0f       	add	r25, r25
    208c:	28 e6       	ldi	r18, 0x68	; 104
    208e:	31 e0       	ldi	r19, 0x01	; 1
    2090:	b9 01       	movw	r22, r18
    2092:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__udivmodhi4>
    2096:	cb 01       	movw	r24, r22
    2098:	fe 01       	movw	r30, r28
    209a:	ea 58       	subi	r30, 0x8A	; 138
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	cc 01       	movw	r24, r24
    20a0:	a0 e0       	ldi	r26, 0x00	; 0
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	a2 83       	std	Z+2, r26	; 0x02
    20aa:	b3 83       	std	Z+3, r27	; 0x03

	switch(Copy_u8Direction)
    20ac:	fe 01       	movw	r30, r28
    20ae:	e6 58       	subi	r30, 0x86	; 134
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	ef 96       	adiw	r28, 0x3f	; 63
    20ba:	3f af       	std	Y+63, r19	; 0x3f
    20bc:	2e af       	std	Y+62, r18	; 0x3e
    20be:	ef 97       	sbiw	r28, 0x3f	; 63
    20c0:	ef 96       	adiw	r28, 0x3f	; 63
    20c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c6:	ef 97       	sbiw	r28, 0x3f	; 63
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	09 f4       	brne	.+2      	; 0x20ce <STP_voidDirectionAngle+0x7e>
    20cc:	26 c3       	rjmp	.+1612   	; 0x271a <STP_voidDirectionAngle+0x6ca>
    20ce:	ef 96       	adiw	r28, 0x3f	; 63
    20d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    20d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20d4:	ef 97       	sbiw	r28, 0x3f	; 63
    20d6:	e1 30       	cpi	r30, 0x01	; 1
    20d8:	f1 05       	cpc	r31, r1
    20da:	09 f0       	breq	.+2      	; 0x20de <STP_voidDirectionAngle+0x8e>
    20dc:	59 c5       	rjmp	.+2738   	; 0x2b90 <STP_voidDirectionAngle+0xb40>
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    20de:	fe 01       	movw	r30, r28
    20e0:	ee 58       	subi	r30, 0x8E	; 142
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	10 82       	st	Z, r1
    20e6:	11 82       	std	Z+1, r1	; 0x01
    20e8:	12 82       	std	Z+2, r1	; 0x02
    20ea:	13 82       	std	Z+3, r1	; 0x03
    20ec:	00 c3       	rjmp	.+1536   	; 0x26ee <STP_voidDirectionAngle+0x69e>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	64 e0       	ldi	r22, 0x04	; 4
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	65 e0       	ldi	r22, 0x05	; 5
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2102:	83 e0       	ldi	r24, 0x03	; 3
    2104:	66 e0       	ldi	r22, 0x06	; 6
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	67 e0       	ldi	r22, 0x07	; 7
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2116:	fe 01       	movw	r30, r28
    2118:	e3 59       	subi	r30, 0x93	; 147
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e2       	ldi	r26, 0x20	; 32
    2122:	b1 e4       	ldi	r27, 0x41	; 65
    2124:	80 83       	st	Z, r24
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	a2 83       	std	Z+2, r26	; 0x02
    212a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212c:	8e 01       	movw	r16, r28
    212e:	07 59       	subi	r16, 0x97	; 151
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	fe 01       	movw	r30, r28
    2134:	e3 59       	subi	r30, 0x93	; 147
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	f8 01       	movw	r30, r16
    2152:	80 83       	st	Z, r24
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	a2 83       	std	Z+2, r26	; 0x02
    2158:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    215a:	fe 01       	movw	r30, r28
    215c:	e7 59       	subi	r30, 0x97	; 151
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	44 f4       	brge	.+16     	; 0x2188 <STP_voidDirectionAngle+0x138>
		__ticks = 1;
    2178:	fe 01       	movw	r30, r28
    217a:	e9 59       	subi	r30, 0x99	; 153
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
    2186:	64 c0       	rjmp	.+200    	; 0x2250 <STP_voidDirectionAngle+0x200>
	else if (__tmp > 65535)
    2188:	fe 01       	movw	r30, r28
    218a:	e7 59       	subi	r30, 0x97	; 151
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	0c f0       	brlt	.+2      	; 0x21a8 <STP_voidDirectionAngle+0x158>
    21a6:	43 c0       	rjmp	.+134    	; 0x222e <STP_voidDirectionAngle+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	fe 01       	movw	r30, r28
    21aa:	e3 59       	subi	r30, 0x93	; 147
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8e 01       	movw	r16, r28
    21c8:	09 59       	subi	r16, 0x99	; 153
    21ca:	1f 4f       	sbci	r17, 0xFF	; 255
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	f8 01       	movw	r30, r16
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	1f c0       	rjmp	.+62     	; 0x221e <STP_voidDirectionAngle+0x1ce>
    21e0:	fe 01       	movw	r30, r28
    21e2:	eb 59       	subi	r30, 0x9B	; 155
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ee:	fe 01       	movw	r30, r28
    21f0:	eb 59       	subi	r30, 0x9B	; 155
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <STP_voidDirectionAngle+0x1a8>
    21fc:	fe 01       	movw	r30, r28
    21fe:	eb 59       	subi	r30, 0x9B	; 155
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	de 01       	movw	r26, r28
    2208:	a9 59       	subi	r26, 0x99	; 153
    220a:	bf 4f       	sbci	r27, 0xFF	; 255
    220c:	fe 01       	movw	r30, r28
    220e:	e9 59       	subi	r30, 0x99	; 153
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	11 96       	adiw	r26, 0x01	; 1
    221a:	9c 93       	st	X, r25
    221c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	fe 01       	movw	r30, r28
    2220:	e9 59       	subi	r30, 0x99	; 153
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	d1 f6       	brne	.-76     	; 0x21e0 <STP_voidDirectionAngle+0x190>
    222c:	27 c0       	rjmp	.+78     	; 0x227c <STP_voidDirectionAngle+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	8e 01       	movw	r16, r28
    2230:	09 59       	subi	r16, 0x99	; 153
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	fe 01       	movw	r30, r28
    2236:	e7 59       	subi	r30, 0x97	; 151
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	f8 01       	movw	r30, r16
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    2250:	de 01       	movw	r26, r28
    2252:	ad 59       	subi	r26, 0x9D	; 157
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e9 59       	subi	r30, 0x99	; 153
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	8d 93       	st	X+, r24
    2262:	9c 93       	st	X, r25
    2264:	fe 01       	movw	r30, r28
    2266:	ed 59       	subi	r30, 0x9D	; 157
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <STP_voidDirectionAngle+0x21e>
    2272:	fe 01       	movw	r30, r28
    2274:	ed 59       	subi	r30, 0x9D	; 157
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	64 e0       	ldi	r22, 0x04	; 4
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	65 e0       	ldi	r22, 0x05	; 5
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	66 e0       	ldi	r22, 0x06	; 6
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    229a:	83 e0       	ldi	r24, 0x03	; 3
    229c:	67 e0       	ldi	r22, 0x07	; 7
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    22a4:	fe 01       	movw	r30, r28
    22a6:	e1 5a       	subi	r30, 0xA1	; 161
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e2       	ldi	r26, 0x20	; 32
    22b0:	b1 e4       	ldi	r27, 0x41	; 65
    22b2:	80 83       	st	Z, r24
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	a2 83       	std	Z+2, r26	; 0x02
    22b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	8e 01       	movw	r16, r28
    22bc:	05 5a       	subi	r16, 0xA5	; 165
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	fe 01       	movw	r30, r28
    22c2:	e1 5a       	subi	r30, 0xA1	; 161
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a ef       	ldi	r20, 0xFA	; 250
    22d4:	54 e4       	ldi	r21, 0x44	; 68
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	f8 01       	movw	r30, r16
    22e0:	80 83       	st	Z, r24
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	a2 83       	std	Z+2, r26	; 0x02
    22e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e8:	fe 01       	movw	r30, r28
    22ea:	e5 5a       	subi	r30, 0xA5	; 165
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	44 f4       	brge	.+16     	; 0x2316 <STP_voidDirectionAngle+0x2c6>
		__ticks = 1;
    2306:	fe 01       	movw	r30, r28
    2308:	e7 5a       	subi	r30, 0xA7	; 167
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
    2314:	64 c0       	rjmp	.+200    	; 0x23de <STP_voidDirectionAngle+0x38e>
	else if (__tmp > 65535)
    2316:	fe 01       	movw	r30, r28
    2318:	e5 5a       	subi	r30, 0xA5	; 165
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	0c f0       	brlt	.+2      	; 0x2336 <STP_voidDirectionAngle+0x2e6>
    2334:	43 c0       	rjmp	.+134    	; 0x23bc <STP_voidDirectionAngle+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	fe 01       	movw	r30, r28
    2338:	e1 5a       	subi	r30, 0xA1	; 161
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8e 01       	movw	r16, r28
    2356:	07 5a       	subi	r16, 0xA7	; 167
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	f8 01       	movw	r30, r16
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	1f c0       	rjmp	.+62     	; 0x23ac <STP_voidDirectionAngle+0x35c>
    236e:	fe 01       	movw	r30, r28
    2370:	e9 5a       	subi	r30, 0xA9	; 169
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	fe 01       	movw	r30, r28
    237e:	e9 5a       	subi	r30, 0xA9	; 169
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <STP_voidDirectionAngle+0x336>
    238a:	fe 01       	movw	r30, r28
    238c:	e9 5a       	subi	r30, 0xA9	; 169
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	de 01       	movw	r26, r28
    2396:	a7 5a       	subi	r26, 0xA7	; 167
    2398:	bf 4f       	sbci	r27, 0xFF	; 255
    239a:	fe 01       	movw	r30, r28
    239c:	e7 5a       	subi	r30, 0xA7	; 167
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	11 96       	adiw	r26, 0x01	; 1
    23a8:	9c 93       	st	X, r25
    23aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 5a       	subi	r30, 0xA7	; 167
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	d1 f6       	brne	.-76     	; 0x236e <STP_voidDirectionAngle+0x31e>
    23ba:	27 c0       	rjmp	.+78     	; 0x240a <STP_voidDirectionAngle+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	8e 01       	movw	r16, r28
    23be:	07 5a       	subi	r16, 0xA7	; 167
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e5 5a       	subi	r30, 0xA5	; 165
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	f8 01       	movw	r30, r16
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
    23de:	de 01       	movw	r26, r28
    23e0:	ab 5a       	subi	r26, 0xAB	; 171
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e7 5a       	subi	r30, 0xA7	; 167
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	8d 93       	st	X+, r24
    23f0:	9c 93       	st	X, r25
    23f2:	fe 01       	movw	r30, r28
    23f4:	eb 5a       	subi	r30, 0xAB	; 171
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <STP_voidDirectionAngle+0x3ac>
    2400:	fe 01       	movw	r30, r28
    2402:	eb 5a       	subi	r30, 0xAB	; 171
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    240a:	83 e0       	ldi	r24, 0x03	; 3
    240c:	64 e0       	ldi	r22, 0x04	; 4
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	65 e0       	ldi	r22, 0x05	; 5
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	66 e0       	ldi	r22, 0x06	; 6
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	67 e0       	ldi	r22, 0x07	; 7
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2432:	fe 01       	movw	r30, r28
    2434:	ef 5a       	subi	r30, 0xAF	; 175
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e2       	ldi	r26, 0x20	; 32
    243e:	b1 e4       	ldi	r27, 0x41	; 65
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	8e 01       	movw	r16, r28
    244a:	03 5b       	subi	r16, 0xB3	; 179
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ef 5a       	subi	r30, 0xAF	; 175
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a ef       	ldi	r20, 0xFA	; 250
    2462:	54 e4       	ldi	r21, 0x44	; 68
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2476:	fe 01       	movw	r30, r28
    2478:	e3 5b       	subi	r30, 0xB3	; 179
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	44 f4       	brge	.+16     	; 0x24a4 <STP_voidDirectionAngle+0x454>
		__ticks = 1;
    2494:	fe 01       	movw	r30, r28
    2496:	e5 5b       	subi	r30, 0xB5	; 181
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	64 c0       	rjmp	.+200    	; 0x256c <STP_voidDirectionAngle+0x51c>
	else if (__tmp > 65535)
    24a4:	fe 01       	movw	r30, r28
    24a6:	e3 5b       	subi	r30, 0xB3	; 179
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <STP_voidDirectionAngle+0x474>
    24c2:	43 c0       	rjmp	.+134    	; 0x254a <STP_voidDirectionAngle+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5a       	subi	r30, 0xAF	; 175
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8e 01       	movw	r16, r28
    24e4:	05 5b       	subi	r16, 0xB5	; 181
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	f8 01       	movw	r30, r16
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <STP_voidDirectionAngle+0x4ea>
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5b       	subi	r30, 0xB7	; 183
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	88 ec       	ldi	r24, 0xC8	; 200
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5b       	subi	r30, 0xB7	; 183
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <STP_voidDirectionAngle+0x4c4>
    2518:	fe 01       	movw	r30, r28
    251a:	e7 5b       	subi	r30, 0xB7	; 183
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	de 01       	movw	r26, r28
    2524:	a5 5b       	subi	r26, 0xB5	; 181
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	fe 01       	movw	r30, r28
    253c:	e5 5b       	subi	r30, 0xB5	; 181
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	d1 f6       	brne	.-76     	; 0x24fc <STP_voidDirectionAngle+0x4ac>
    2548:	27 c0       	rjmp	.+78     	; 0x2598 <STP_voidDirectionAngle+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	8e 01       	movw	r16, r28
    254c:	05 5b       	subi	r16, 0xB5	; 181
    254e:	1f 4f       	sbci	r17, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	e3 5b       	subi	r30, 0xB3	; 179
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	f8 01       	movw	r30, r16
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	de 01       	movw	r26, r28
    256e:	a9 5b       	subi	r26, 0xB9	; 185
    2570:	bf 4f       	sbci	r27, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e5 5b       	subi	r30, 0xB5	; 181
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	8d 93       	st	X+, r24
    257e:	9c 93       	st	X, r25
    2580:	fe 01       	movw	r30, r28
    2582:	e9 5b       	subi	r30, 0xB9	; 185
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <STP_voidDirectionAngle+0x53a>
    258e:	fe 01       	movw	r30, r28
    2590:	e9 5b       	subi	r30, 0xB9	; 185
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	64 e0       	ldi	r22, 0x04	; 4
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	65 e0       	ldi	r22, 0x05	; 5
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	66 e0       	ldi	r22, 0x06	; 6
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    25b6:	83 e0       	ldi	r24, 0x03	; 3
    25b8:	67 e0       	ldi	r22, 0x07	; 7
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 5b       	subi	r30, 0xBD	; 189
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 e2       	ldi	r26, 0x20	; 32
    25cc:	b1 e4       	ldi	r27, 0x41	; 65
    25ce:	80 83       	st	Z, r24
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	a2 83       	std	Z+2, r26	; 0x02
    25d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	8e 01       	movw	r16, r28
    25d8:	01 5c       	subi	r16, 0xC1	; 193
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	ed 5b       	subi	r30, 0xBD	; 189
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2604:	fe 01       	movw	r30, r28
    2606:	ff 96       	adiw	r30, 0x3f	; 63
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <STP_voidDirectionAngle+0x5da>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e af       	std	Y+62, r25	; 0x3e
    2626:	8d af       	std	Y+61, r24	; 0x3d
    2628:	46 c0       	rjmp	.+140    	; 0x26b6 <STP_voidDirectionAngle+0x666>
	else if (__tmp > 65535)
    262a:	fe 01       	movw	r30, r28
    262c:	ff 96       	adiw	r30, 0x3f	; 63
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	64 f5       	brge	.+88     	; 0x269e <STP_voidDirectionAngle+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	fe 01       	movw	r30, r28
    2648:	ed 5b       	subi	r30, 0xBD	; 189
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9e af       	std	Y+62, r25	; 0x3e
    2672:	8d af       	std	Y+61, r24	; 0x3d
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <STP_voidDirectionAngle+0x644>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c af       	std	Y+60, r25	; 0x3c
    267c:	8b af       	std	Y+59, r24	; 0x3b
    267e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2680:	9c ad       	ldd	r25, Y+60	; 0x3c
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <STP_voidDirectionAngle+0x632>
    2686:	9c af       	std	Y+60, r25	; 0x3c
    2688:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8d ad       	ldd	r24, Y+61	; 0x3d
    268c:	9e ad       	ldd	r25, Y+62	; 0x3e
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9e af       	std	Y+62, r25	; 0x3e
    2692:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8d ad       	ldd	r24, Y+61	; 0x3d
    2696:	9e ad       	ldd	r25, Y+62	; 0x3e
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <STP_voidDirectionAngle+0x626>
    269c:	16 c0       	rjmp	.+44     	; 0x26ca <STP_voidDirectionAngle+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	fe 01       	movw	r30, r28
    26a0:	ff 96       	adiw	r30, 0x3f	; 63
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e af       	std	Y+62, r25	; 0x3e
    26b4:	8d af       	std	Y+61, r24	; 0x3d
    26b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ba:	9a af       	std	Y+58, r25	; 0x3a
    26bc:	89 af       	std	Y+57, r24	; 0x39
    26be:	89 ad       	ldd	r24, Y+57	; 0x39
    26c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <STP_voidDirectionAngle+0x672>
    26c6:	9a af       	std	Y+58, r25	; 0x3a
    26c8:	89 af       	std	Y+57, r24	; 0x39
	Local_STPSteps = Copy_u8Angle * 512 /360 ;

	switch(Copy_u8Direction)
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    26ca:	9e 01       	movw	r18, r28
    26cc:	2e 58       	subi	r18, 0x8E	; 142
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	ee 58       	subi	r30, 0x8E	; 142
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	a2 81       	ldd	r26, Z+2	; 0x02
    26dc:	b3 81       	ldd	r27, Z+3	; 0x03
    26de:	01 96       	adiw	r24, 0x01	; 1
    26e0:	a1 1d       	adc	r26, r1
    26e2:	b1 1d       	adc	r27, r1
    26e4:	f9 01       	movw	r30, r18
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
    26ee:	fe 01       	movw	r30, r28
    26f0:	ee 58       	subi	r30, 0x8E	; 142
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	de 01       	movw	r26, r28
    26f6:	aa 58       	subi	r26, 0x8A	; 138
    26f8:	bf 4f       	sbci	r27, 0xFF	; 255
    26fa:	20 81       	ld	r18, Z
    26fc:	31 81       	ldd	r19, Z+1	; 0x01
    26fe:	42 81       	ldd	r20, Z+2	; 0x02
    2700:	53 81       	ldd	r21, Z+3	; 0x03
    2702:	8d 91       	ld	r24, X+
    2704:	9d 91       	ld	r25, X+
    2706:	0d 90       	ld	r0, X+
    2708:	bc 91       	ld	r27, X
    270a:	a0 2d       	mov	r26, r0
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	4a 07       	cpc	r20, r26
    2712:	5b 07       	cpc	r21, r27
    2714:	08 f4       	brcc	.+2      	; 0x2718 <STP_voidDirectionAngle+0x6c8>
    2716:	eb cc       	rjmp	.-1578   	; 0x20ee <STP_voidDirectionAngle+0x9e>
    2718:	3b c2       	rjmp	.+1142   	; 0x2b90 <STP_voidDirectionAngle+0xb40>
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    271a:	fe 01       	movw	r30, r28
    271c:	ef 58       	subi	r30, 0x8F	; 143
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	10 82       	st	Z, r1
    2722:	21 c2       	rjmp	.+1090   	; 0x2b66 <STP_voidDirectionAngle+0xb16>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	64 e0       	ldi	r22, 0x04	; 4
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	65 e0       	ldi	r22, 0x05	; 5
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	66 e0       	ldi	r22, 0x06	; 6
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	67 e0       	ldi	r22, 0x07	; 7
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e2       	ldi	r26, 0x20	; 32
    2752:	b1 e4       	ldi	r27, 0x41	; 65
    2754:	8d ab       	std	Y+53, r24	; 0x35
    2756:	9e ab       	std	Y+54, r25	; 0x36
    2758:	af ab       	std	Y+55, r26	; 0x37
    275a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	6d a9       	ldd	r22, Y+53	; 0x35
    275e:	7e a9       	ldd	r23, Y+54	; 0x36
    2760:	8f a9       	ldd	r24, Y+55	; 0x37
    2762:	98 ad       	ldd	r25, Y+56	; 0x38
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a ef       	ldi	r20, 0xFA	; 250
    276a:	54 e4       	ldi	r21, 0x44	; 68
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	89 ab       	std	Y+49, r24	; 0x31
    2776:	9a ab       	std	Y+50, r25	; 0x32
    2778:	ab ab       	std	Y+51, r26	; 0x33
    277a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    277c:	69 a9       	ldd	r22, Y+49	; 0x31
    277e:	7a a9       	ldd	r23, Y+50	; 0x32
    2780:	8b a9       	ldd	r24, Y+51	; 0x33
    2782:	9c a9       	ldd	r25, Y+52	; 0x34
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <STP_voidDirectionAngle+0x74e>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	98 ab       	std	Y+48, r25	; 0x30
    279a:	8f a7       	std	Y+47, r24	; 0x2f
    279c:	3f c0       	rjmp	.+126    	; 0x281c <STP_voidDirectionAngle+0x7cc>
	else if (__tmp > 65535)
    279e:	69 a9       	ldd	r22, Y+49	; 0x31
    27a0:	7a a9       	ldd	r23, Y+50	; 0x32
    27a2:	8b a9       	ldd	r24, Y+51	; 0x33
    27a4:	9c a9       	ldd	r25, Y+52	; 0x34
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <STP_voidDirectionAngle+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	6d a9       	ldd	r22, Y+53	; 0x35
    27b8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ba:	8f a9       	ldd	r24, Y+55	; 0x37
    27bc:	98 ad       	ldd	r25, Y+56	; 0x38
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	98 ab       	std	Y+48, r25	; 0x30
    27dc:	8f a7       	std	Y+47, r24	; 0x2f
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <STP_voidDirectionAngle+0x7ae>
    27e0:	88 ec       	ldi	r24, 0xC8	; 200
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9e a7       	std	Y+46, r25	; 0x2e
    27e6:	8d a7       	std	Y+45, r24	; 0x2d
    27e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <STP_voidDirectionAngle+0x79c>
    27f0:	9e a7       	std	Y+46, r25	; 0x2e
    27f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	98 a9       	ldd	r25, Y+48	; 0x30
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	98 ab       	std	Y+48, r25	; 0x30
    27fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2800:	98 a9       	ldd	r25, Y+48	; 0x30
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <STP_voidDirectionAngle+0x790>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <STP_voidDirectionAngle+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	69 a9       	ldd	r22, Y+49	; 0x31
    280a:	7a a9       	ldd	r23, Y+50	; 0x32
    280c:	8b a9       	ldd	r24, Y+51	; 0x33
    280e:	9c a9       	ldd	r25, Y+52	; 0x34
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	98 ab       	std	Y+48, r25	; 0x30
    281a:	8f a7       	std	Y+47, r24	; 0x2f
    281c:	8f a5       	ldd	r24, Y+47	; 0x2f
    281e:	98 a9       	ldd	r25, Y+48	; 0x30
    2820:	9c a7       	std	Y+44, r25	; 0x2c
    2822:	8b a7       	std	Y+43, r24	; 0x2b
    2824:	8b a5       	ldd	r24, Y+43	; 0x2b
    2826:	9c a5       	ldd	r25, Y+44	; 0x2c
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <STP_voidDirectionAngle+0x7d8>
    282c:	9c a7       	std	Y+44, r25	; 0x2c
    282e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	64 e0       	ldi	r22, 0x04	; 4
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	65 e0       	ldi	r22, 0x05	; 5
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	66 e0       	ldi	r22, 0x06	; 6
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	67 e0       	ldi	r22, 0x07	; 7
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e2       	ldi	r26, 0x20	; 32
    285e:	b1 e4       	ldi	r27, 0x41	; 65
    2860:	8f a3       	std	Y+39, r24	; 0x27
    2862:	98 a7       	std	Y+40, r25	; 0x28
    2864:	a9 a7       	std	Y+41, r26	; 0x29
    2866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6f a1       	ldd	r22, Y+39	; 0x27
    286a:	78 a5       	ldd	r23, Y+40	; 0x28
    286c:	89 a5       	ldd	r24, Y+41	; 0x29
    286e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a ef       	ldi	r20, 0xFA	; 250
    2876:	54 e4       	ldi	r21, 0x44	; 68
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8b a3       	std	Y+35, r24	; 0x23
    2882:	9c a3       	std	Y+36, r25	; 0x24
    2884:	ad a3       	std	Y+37, r26	; 0x25
    2886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2888:	6b a1       	ldd	r22, Y+35	; 0x23
    288a:	7c a1       	ldd	r23, Y+36	; 0x24
    288c:	8d a1       	ldd	r24, Y+37	; 0x25
    288e:	9e a1       	ldd	r25, Y+38	; 0x26
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <STP_voidDirectionAngle+0x85a>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9a a3       	std	Y+34, r25	; 0x22
    28a6:	89 a3       	std	Y+33, r24	; 0x21
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <STP_voidDirectionAngle+0x8d8>
	else if (__tmp > 65535)
    28aa:	6b a1       	ldd	r22, Y+35	; 0x23
    28ac:	7c a1       	ldd	r23, Y+36	; 0x24
    28ae:	8d a1       	ldd	r24, Y+37	; 0x25
    28b0:	9e a1       	ldd	r25, Y+38	; 0x26
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <STP_voidDirectionAngle+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6f a1       	ldd	r22, Y+39	; 0x27
    28c4:	78 a5       	ldd	r23, Y+40	; 0x28
    28c6:	89 a5       	ldd	r24, Y+41	; 0x29
    28c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9a a3       	std	Y+34, r25	; 0x22
    28e8:	89 a3       	std	Y+33, r24	; 0x21
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <STP_voidDirectionAngle+0x8ba>
    28ec:	88 ec       	ldi	r24, 0xC8	; 200
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	98 a3       	std	Y+32, r25	; 0x20
    28f2:	8f 8f       	std	Y+31, r24	; 0x1f
    28f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f6:	98 a1       	ldd	r25, Y+32	; 0x20
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <STP_voidDirectionAngle+0x8a8>
    28fc:	98 a3       	std	Y+32, r25	; 0x20
    28fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	89 a1       	ldd	r24, Y+33	; 0x21
    2902:	9a a1       	ldd	r25, Y+34	; 0x22
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9a a3       	std	Y+34, r25	; 0x22
    2908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	89 a1       	ldd	r24, Y+33	; 0x21
    290c:	9a a1       	ldd	r25, Y+34	; 0x22
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <STP_voidDirectionAngle+0x89c>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <STP_voidDirectionAngle+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6b a1       	ldd	r22, Y+35	; 0x23
    2916:	7c a1       	ldd	r23, Y+36	; 0x24
    2918:	8d a1       	ldd	r24, Y+37	; 0x25
    291a:	9e a1       	ldd	r25, Y+38	; 0x26
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9a a3       	std	Y+34, r25	; 0x22
    2926:	89 a3       	std	Y+33, r24	; 0x21
    2928:	89 a1       	ldd	r24, Y+33	; 0x21
    292a:	9a a1       	ldd	r25, Y+34	; 0x22
    292c:	9e 8f       	std	Y+30, r25	; 0x1e
    292e:	8d 8f       	std	Y+29, r24	; 0x1d
    2930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <STP_voidDirectionAngle+0x8e4>
    2938:	9e 8f       	std	Y+30, r25	; 0x1e
    293a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    293c:	83 e0       	ldi	r24, 0x03	; 3
    293e:	64 e0       	ldi	r22, 0x04	; 4
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	65 e0       	ldi	r22, 0x05	; 5
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	66 e0       	ldi	r22, 0x06	; 6
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	67 e0       	ldi	r22, 0x07	; 7
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e2       	ldi	r26, 0x20	; 32
    296a:	b1 e4       	ldi	r27, 0x41	; 65
    296c:	89 8f       	std	Y+25, r24	; 0x19
    296e:	9a 8f       	std	Y+26, r25	; 0x1a
    2970:	ab 8f       	std	Y+27, r26	; 0x1b
    2972:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	69 8d       	ldd	r22, Y+25	; 0x19
    2976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8d 8b       	std	Y+21, r24	; 0x15
    298e:	9e 8b       	std	Y+22, r25	; 0x16
    2990:	af 8b       	std	Y+23, r26	; 0x17
    2992:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <STP_voidDirectionAngle+0x966>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9c 8b       	std	Y+20, r25	; 0x14
    29b2:	8b 8b       	std	Y+19, r24	; 0x13
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <STP_voidDirectionAngle+0x9e4>
	else if (__tmp > 65535)
    29b6:	6d 89       	ldd	r22, Y+21	; 0x15
    29b8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ba:	8f 89       	ldd	r24, Y+23	; 0x17
    29bc:	98 8d       	ldd	r25, Y+24	; 0x18
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <STP_voidDirectionAngle+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	69 8d       	ldd	r22, Y+25	; 0x19
    29d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <STP_voidDirectionAngle+0x9c6>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9a 8b       	std	Y+18, r25	; 0x12
    29fe:	89 8b       	std	Y+17, r24	; 0x11
    2a00:	89 89       	ldd	r24, Y+17	; 0x11
    2a02:	9a 89       	ldd	r25, Y+18	; 0x12
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <STP_voidDirectionAngle+0x9b4>
    2a08:	9a 8b       	std	Y+18, r25	; 0x12
    2a0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9c 8b       	std	Y+20, r25	; 0x14
    2a14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <STP_voidDirectionAngle+0x9a8>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <STP_voidDirectionAngle+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6d 89       	ldd	r22, Y+21	; 0x15
    2a22:	7e 89       	ldd	r23, Y+22	; 0x16
    2a24:	8f 89       	ldd	r24, Y+23	; 0x17
    2a26:	98 8d       	ldd	r25, Y+24	; 0x18
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9c 8b       	std	Y+20, r25	; 0x14
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	8b 89       	ldd	r24, Y+19	; 0x13
    2a36:	9c 89       	ldd	r25, Y+20	; 0x14
    2a38:	98 8b       	std	Y+16, r25	; 0x10
    2a3a:	8f 87       	std	Y+15, r24	; 0x0f
    2a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3e:	98 89       	ldd	r25, Y+16	; 0x10
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <STP_voidDirectionAngle+0x9f0>
    2a44:	98 8b       	std	Y+16, r25	; 0x10
    2a46:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2a52:	83 e0       	ldi	r24, 0x03	; 3
    2a54:	65 e0       	ldi	r22, 0x05	; 5
    2a56:	41 e0       	ldi	r20, 0x01	; 1
    2a58:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	66 e0       	ldi	r22, 0x06	; 6
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	67 e0       	ldi	r22, 0x07	; 7
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e2       	ldi	r26, 0x20	; 32
    2a76:	b1 e4       	ldi	r27, 0x41	; 65
    2a78:	8b 87       	std	Y+11, r24	; 0x0b
    2a7a:	9c 87       	std	Y+12, r25	; 0x0c
    2a7c:	ad 87       	std	Y+13, r26	; 0x0d
    2a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4a ef       	ldi	r20, 0xFA	; 250
    2a8e:	54 e4       	ldi	r21, 0x44	; 68
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8f 83       	std	Y+7, r24	; 0x07
    2a9a:	98 87       	std	Y+8, r25	; 0x08
    2a9c:	a9 87       	std	Y+9, r26	; 0x09
    2a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa2:	78 85       	ldd	r23, Y+8	; 0x08
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <STP_voidDirectionAngle+0xa72>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	3f c0       	rjmp	.+126    	; 0x2b40 <STP_voidDirectionAngle+0xaf0>
	else if (__tmp > 65535)
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	4c f5       	brge	.+82     	; 0x2b2c <STP_voidDirectionAngle+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    2adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <STP_voidDirectionAngle+0xad2>
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 83       	std	Y+4, r25	; 0x04
    2b0a:	8b 83       	std	Y+3, r24	; 0x03
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <STP_voidDirectionAngle+0xac0>
    2b14:	9c 83       	std	Y+4, r25	; 0x04
    2b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	69 f7       	brne	.-38     	; 0x2b04 <STP_voidDirectionAngle+0xab4>
    2b2a:	14 c0       	rjmp	.+40     	; 0x2b54 <STP_voidDirectionAngle+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <STP_voidDirectionAngle+0xafc>
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    2b54:	de 01       	movw	r26, r28
    2b56:	af 58       	subi	r26, 0x8F	; 143
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ef 58       	subi	r30, 0x8F	; 143
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	8c 93       	st	X, r24
    2b66:	fe 01       	movw	r30, r28
    2b68:	ef 58       	subi	r30, 0x8F	; 143
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	fe 01       	movw	r30, r28
    2b78:	ea 58       	subi	r30, 0x8A	; 138
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	a2 81       	ldd	r26, Z+2	; 0x02
    2b82:	b3 81       	ldd	r27, Z+3	; 0x03
    2b84:	28 17       	cp	r18, r24
    2b86:	39 07       	cpc	r19, r25
    2b88:	4a 07       	cpc	r20, r26
    2b8a:	5b 07       	cpc	r21, r27
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <STP_voidDirectionAngle+0xb40>
    2b8e:	ca cd       	rjmp	.-1132   	; 0x2724 <STP_voidDirectionAngle+0x6d4>
			break;
		default :
			break ;
	}

}
    2b90:	c2 58       	subi	r28, 0x82	; 130
    2b92:	df 4f       	sbci	r29, 0xFF	; 255
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <STP_voidMove>:

void STP_voidMove(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	e8 97       	sbiw	r28, 0x38	; 56
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	64 e0       	ldi	r22, 0x04	; 4
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2bc6:	83 e0       	ldi	r24, 0x03	; 3
    2bc8:	65 e0       	ldi	r22, 0x05	; 5
    2bca:	41 e0       	ldi	r20, 0x01	; 1
    2bcc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	66 e0       	ldi	r22, 0x06	; 6
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	67 e0       	ldi	r22, 0x07	; 7
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e2       	ldi	r26, 0x20	; 32
    2bea:	b1 e4       	ldi	r27, 0x41	; 65
    2bec:	8d ab       	std	Y+53, r24	; 0x35
    2bee:	9e ab       	std	Y+54, r25	; 0x36
    2bf0:	af ab       	std	Y+55, r26	; 0x37
    2bf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a ef       	ldi	r20, 0xFA	; 250
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	89 ab       	std	Y+49, r24	; 0x31
    2c0e:	9a ab       	std	Y+50, r25	; 0x32
    2c10:	ab ab       	std	Y+51, r26	; 0x33
    2c12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <STP_voidMove+0x8e>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	98 ab       	std	Y+48, r25	; 0x30
    2c32:	8f a7       	std	Y+47, r24	; 0x2f
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <STP_voidMove+0x10c>
	else if (__tmp > 65535)
    2c36:	69 a9       	ldd	r22, Y+49	; 0x31
    2c38:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <STP_voidMove+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c50:	7e a9       	ldd	r23, Y+54	; 0x36
    2c52:	8f a9       	ldd	r24, Y+55	; 0x37
    2c54:	98 ad       	ldd	r25, Y+56	; 0x38
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	98 ab       	std	Y+48, r25	; 0x30
    2c74:	8f a7       	std	Y+47, r24	; 0x2f
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <STP_voidMove+0xee>
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9e a7       	std	Y+46, r25	; 0x2e
    2c7e:	8d a7       	std	Y+45, r24	; 0x2d
    2c80:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c82:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <STP_voidMove+0xdc>
    2c88:	9e a7       	std	Y+46, r25	; 0x2e
    2c8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	98 ab       	std	Y+48, r25	; 0x30
    2c94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c98:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <STP_voidMove+0xd0>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <STP_voidMove+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	98 ab       	std	Y+48, r25	; 0x30
    2cb2:	8f a7       	std	Y+47, r24	; 0x2f
    2cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb8:	9c a7       	std	Y+44, r25	; 0x2c
    2cba:	8b a7       	std	Y+43, r24	; 0x2b
    2cbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <STP_voidMove+0x118>
    2cc4:	9c a7       	std	Y+44, r25	; 0x2c
    2cc6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2cc8:	83 e0       	ldi	r24, 0x03	; 3
    2cca:	64 e0       	ldi	r22, 0x04	; 4
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2cd2:	83 e0       	ldi	r24, 0x03	; 3
    2cd4:	65 e0       	ldi	r22, 0x05	; 5
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	66 e0       	ldi	r22, 0x06	; 6
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2ce6:	83 e0       	ldi	r24, 0x03	; 3
    2ce8:	67 e0       	ldi	r22, 0x07	; 7
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e2       	ldi	r26, 0x20	; 32
    2cf6:	b1 e4       	ldi	r27, 0x41	; 65
    2cf8:	8f a3       	std	Y+39, r24	; 0x27
    2cfa:	98 a7       	std	Y+40, r25	; 0x28
    2cfc:	a9 a7       	std	Y+41, r26	; 0x29
    2cfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	6f a1       	ldd	r22, Y+39	; 0x27
    2d02:	78 a5       	ldd	r23, Y+40	; 0x28
    2d04:	89 a5       	ldd	r24, Y+41	; 0x29
    2d06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a ef       	ldi	r20, 0xFA	; 250
    2d0e:	54 e4       	ldi	r21, 0x44	; 68
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	8b a3       	std	Y+35, r24	; 0x23
    2d1a:	9c a3       	std	Y+36, r25	; 0x24
    2d1c:	ad a3       	std	Y+37, r26	; 0x25
    2d1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d20:	6b a1       	ldd	r22, Y+35	; 0x23
    2d22:	7c a1       	ldd	r23, Y+36	; 0x24
    2d24:	8d a1       	ldd	r24, Y+37	; 0x25
    2d26:	9e a1       	ldd	r25, Y+38	; 0x26
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e8       	ldi	r20, 0x80	; 128
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	2c f4       	brge	.+10     	; 0x2d42 <STP_voidMove+0x19a>
		__ticks = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9a a3       	std	Y+34, r25	; 0x22
    2d3e:	89 a3       	std	Y+33, r24	; 0x21
    2d40:	3f c0       	rjmp	.+126    	; 0x2dc0 <STP_voidMove+0x218>
	else if (__tmp > 65535)
    2d42:	6b a1       	ldd	r22, Y+35	; 0x23
    2d44:	7c a1       	ldd	r23, Y+36	; 0x24
    2d46:	8d a1       	ldd	r24, Y+37	; 0x25
    2d48:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	4c f5       	brge	.+82     	; 0x2dac <STP_voidMove+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9a a3       	std	Y+34, r25	; 0x22
    2d80:	89 a3       	std	Y+33, r24	; 0x21
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <STP_voidMove+0x1fa>
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	98 a3       	std	Y+32, r25	; 0x20
    2d8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <STP_voidMove+0x1e8>
    2d94:	98 a3       	std	Y+32, r25	; 0x20
    2d96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	89 a1       	ldd	r24, Y+33	; 0x21
    2d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9a a3       	std	Y+34, r25	; 0x22
    2da0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	89 a1       	ldd	r24, Y+33	; 0x21
    2da4:	9a a1       	ldd	r25, Y+34	; 0x22
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <STP_voidMove+0x1dc>
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <STP_voidMove+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	6b a1       	ldd	r22, Y+35	; 0x23
    2dae:	7c a1       	ldd	r23, Y+36	; 0x24
    2db0:	8d a1       	ldd	r24, Y+37	; 0x25
    2db2:	9e a1       	ldd	r25, Y+38	; 0x26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9a a3       	std	Y+34, r25	; 0x22
    2dbe:	89 a3       	std	Y+33, r24	; 0x21
    2dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <STP_voidMove+0x224>
    2dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	64 e0       	ldi	r22, 0x04	; 4
    2dd8:	41 e0       	ldi	r20, 0x01	; 1
    2dda:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2dde:	83 e0       	ldi	r24, 0x03	; 3
    2de0:	65 e0       	ldi	r22, 0x05	; 5
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2de8:	83 e0       	ldi	r24, 0x03	; 3
    2dea:	66 e0       	ldi	r22, 0x06	; 6
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2df2:	83 e0       	ldi	r24, 0x03	; 3
    2df4:	67 e0       	ldi	r22, 0x07	; 7
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	a0 e2       	ldi	r26, 0x20	; 32
    2e02:	b1 e4       	ldi	r27, 0x41	; 65
    2e04:	89 8f       	std	Y+25, r24	; 0x19
    2e06:	9a 8f       	std	Y+26, r25	; 0x1a
    2e08:	ab 8f       	std	Y+27, r26	; 0x1b
    2e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	54 e4       	ldi	r21, 0x44	; 68
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8d 8b       	std	Y+21, r24	; 0x15
    2e26:	9e 8b       	std	Y+22, r25	; 0x16
    2e28:	af 8b       	std	Y+23, r26	; 0x17
    2e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e30:	8f 89       	ldd	r24, Y+23	; 0x17
    2e32:	98 8d       	ldd	r25, Y+24	; 0x18
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	2c f4       	brge	.+10     	; 0x2e4e <STP_voidMove+0x2a6>
		__ticks = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
    2e4c:	3f c0       	rjmp	.+126    	; 0x2ecc <STP_voidMove+0x324>
	else if (__tmp > 65535)
    2e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e50:	7e 89       	ldd	r23, Y+22	; 0x16
    2e52:	8f 89       	ldd	r24, Y+23	; 0x17
    2e54:	98 8d       	ldd	r25, Y+24	; 0x18
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	57 e4       	ldi	r21, 0x47	; 71
    2e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	4c f5       	brge	.+82     	; 0x2eb8 <STP_voidMove+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e66:	69 8d       	ldd	r22, Y+25	; 0x19
    2e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9c 8b       	std	Y+20, r25	; 0x14
    2e8c:	8b 8b       	std	Y+19, r24	; 0x13
    2e8e:	0f c0       	rjmp	.+30     	; 0x2eae <STP_voidMove+0x306>
    2e90:	88 ec       	ldi	r24, 0xC8	; 200
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9a 8b       	std	Y+18, r25	; 0x12
    2e96:	89 8b       	std	Y+17, r24	; 0x11
    2e98:	89 89       	ldd	r24, Y+17	; 0x11
    2e9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <STP_voidMove+0x2f4>
    2ea0:	9a 8b       	std	Y+18, r25	; 0x12
    2ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	69 f7       	brne	.-38     	; 0x2e90 <STP_voidMove+0x2e8>
    2eb6:	14 c0       	rjmp	.+40     	; 0x2ee0 <STP_voidMove+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eba:	7e 89       	ldd	r23, Y+22	; 0x16
    2ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9c 8b       	std	Y+20, r25	; 0x14
    2eca:	8b 8b       	std	Y+19, r24	; 0x13
    2ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ece:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed0:	98 8b       	std	Y+16, r25	; 0x10
    2ed2:	8f 87       	std	Y+15, r24	; 0x0f
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	98 89       	ldd	r25, Y+16	; 0x10
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <STP_voidMove+0x330>
    2edc:	98 8b       	std	Y+16, r25	; 0x10
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	64 e0       	ldi	r22, 0x04	; 4
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	65 e0       	ldi	r22, 0x05	; 5
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	66 e0       	ldi	r22, 0x06	; 6
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2efe:	83 e0       	ldi	r24, 0x03	; 3
    2f00:	67 e0       	ldi	r22, 0x07	; 7
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e2       	ldi	r26, 0x20	; 32
    2f0e:	b1 e4       	ldi	r27, 0x41	; 65
    2f10:	8b 87       	std	Y+11, r24	; 0x0b
    2f12:	9c 87       	std	Y+12, r25	; 0x0c
    2f14:	ad 87       	std	Y+13, r26	; 0x0d
    2f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a ef       	ldi	r20, 0xFA	; 250
    2f26:	54 e4       	ldi	r21, 0x44	; 68
    2f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8f 83       	std	Y+7, r24	; 0x07
    2f32:	98 87       	std	Y+8, r25	; 0x08
    2f34:	a9 87       	std	Y+9, r26	; 0x09
    2f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <STP_voidMove+0x3b2>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <STP_voidMove+0x430>
	else if (__tmp > 65535)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <STP_voidMove+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <STP_voidMove+0x412>
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <STP_voidMove+0x400>
    2fac:	9c 83       	std	Y+4, r25	; 0x04
    2fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9e 83       	std	Y+6, r25	; 0x06
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <STP_voidMove+0x3f4>
    2fc2:	fc cd       	rjmp	.-1032   	; 0x2bbc <STP_voidMove+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <STP_voidMove+0x43c>
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	e7 cd       	rjmp	.-1074   	; 0x2bbc <STP_voidMove+0x14>

00002fee <STP_voidStop>:
			_delay_ms(10);
	}
}

void STP_voidStop(void)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	64 e0       	ldi	r22, 0x04	; 4
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    300c:	83 e0       	ldi	r24, 0x03	; 3
    300e:	65 e0       	ldi	r22, 0x05	; 5
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	66 e0       	ldi	r22, 0x06	; 6
    301a:	41 e0       	ldi	r20, 0x01	; 1
    301c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	67 e0       	ldi	r22, 0x07	; 7
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	a0 e2       	ldi	r26, 0x20	; 32
    3030:	b1 e4       	ldi	r27, 0x41	; 65
    3032:	8b 87       	std	Y+11, r24	; 0x0b
    3034:	9c 87       	std	Y+12, r25	; 0x0c
    3036:	ad 87       	std	Y+13, r26	; 0x0d
    3038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303a:	6b 85       	ldd	r22, Y+11	; 0x0b
    303c:	7c 85       	ldd	r23, Y+12	; 0x0c
    303e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3040:	9e 85       	ldd	r25, Y+14	; 0x0e
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	4a ef       	ldi	r20, 0xFA	; 250
    3048:	54 e4       	ldi	r21, 0x44	; 68
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	8f 83       	std	Y+7, r24	; 0x07
    3054:	98 87       	std	Y+8, r25	; 0x08
    3056:	a9 87       	std	Y+9, r26	; 0x09
    3058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	78 85       	ldd	r23, Y+8	; 0x08
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	9a 85       	ldd	r25, Y+10	; 0x0a
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306e:	88 23       	and	r24, r24
    3070:	2c f4       	brge	.+10     	; 0x307c <STP_voidStop+0x8e>
		__ticks = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <STP_voidStop+0x10c>
	else if (__tmp > 65535)
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	3f ef       	ldi	r19, 0xFF	; 255
    3088:	4f e7       	ldi	r20, 0x7F	; 127
    308a:	57 e4       	ldi	r21, 0x47	; 71
    308c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3090:	18 16       	cp	r1, r24
    3092:	4c f5       	brge	.+82     	; 0x30e6 <STP_voidStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <STP_voidStop+0xee>
    30be:	88 ec       	ldi	r24, 0xC8	; 200
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	8b 83       	std	Y+3, r24	; 0x03
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <STP_voidStop+0xdc>
    30ce:	9c 83       	std	Y+4, r25	; 0x04
    30d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	69 f7       	brne	.-38     	; 0x30be <STP_voidStop+0xd0>
    30e4:	14 c0       	rjmp	.+40     	; 0x310e <STP_voidStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	6f 81       	ldd	r22, Y+7	; 0x07
    30e8:	78 85       	ldd	r23, Y+8	; 0x08
    30ea:	89 85       	ldd	r24, Y+9	; 0x09
    30ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
    30fa:	8d 81       	ldd	r24, Y+5	; 0x05
    30fc:	9e 81       	ldd	r25, Y+6	; 0x06
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <STP_voidStop+0x118>
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    310e:	2e 96       	adiw	r28, 0x0e	; 14
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <SevenSeg_voidInit>:




void SevenSeg_voidInit(u8 Copy_u8PortId)
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	0f 92       	push	r0
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	89 83       	std	Y+1, r24	; 0x01
	LED_voidInitLedString(Copy_u8PortId);
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	0e 94 c5 18 	call	0x318a	; 0x318a <LED_voidInitLedString>
}
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <SevenSeg_voidDisplayNumber>:

void SevenSeg_voidDisplayNumber(u8 Copy_u8PortId,u8 Copy_u8DisblayNumber)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <SevenSeg_voidDisplayNumber+0x6>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	6a 83       	std	Y+2, r22	; 0x02
	if ( (Copy_u8DisblayNumber >= 0) || (Copy_u8DisblayNumber<10) )
	{
		LED_voidLedStringOnOff(Copy_u8PortId ,SevenSEG_u8SevenSegArray[Copy_u8DisblayNumber]);
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	fc 01       	movw	r30, r24
    3150:	ef 50       	subi	r30, 0x0F	; 15
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	90 81       	ld	r25, Z
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	69 2f       	mov	r22, r25
    315a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <LED_voidLedStringOnOff>
	}
	else
	{
		//Do nothing
	}
}
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <LED_voidInitOneLed>:
#include"LED_interface.h"



void LED_voidInitOneLed(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <LED_voidInitOneLed+0x6>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8PortId ,Copy_u8PinId , OUTPUT) ;
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	6a 81       	ldd	r22, Y+2	; 0x02
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <LED_voidInitLedString>:

void LED_voidInitLedString(u8 Copy_u8PortId)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	0f 92       	push	r0
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_u8PortId , DIO_u8PORT_OUTPUT);
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	6f ef       	ldi	r22, 0xFF	; 255
    319a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <DIO_voidSetPortDirection>
}
    319e:	0f 90       	pop	r0
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <LED_voidLedOnOff>:

void LED_voidLedOnOff(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8State)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <LED_voidLedOnOff+0x6>
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <LED_voidLedOnOff+0x8>
    31ae:	0f 92       	push	r0
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	6a 83       	std	Y+2, r22	; 0x02
    31b8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8State)
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	3d 83       	std	Y+5, r19	; 0x05
    31c2:	2c 83       	std	Y+4, r18	; 0x04
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	9d 81       	ldd	r25, Y+5	; 0x05
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	59 f0       	breq	.+22     	; 0x31e2 <LED_voidLedOnOff+0x3c>
    31cc:	2c 81       	ldd	r18, Y+4	; 0x04
    31ce:	3d 81       	ldd	r19, Y+5	; 0x05
    31d0:	21 30       	cpi	r18, 0x01	; 1
    31d2:	31 05       	cpc	r19, r1
    31d4:	59 f4       	brne	.+22     	; 0x31ec <LED_voidLedOnOff+0x46>
	{
		case ON  :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , HIGH) ; break ;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	6a 81       	ldd	r22, Y+2	; 0x02
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    31e0:	05 c0       	rjmp	.+10     	; 0x31ec <LED_voidLedOnOff+0x46>
		case OFF :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , LOW ) ; break ;
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	6a 81       	ldd	r22, Y+2	; 0x02
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
		default  :
			break ;
	}
}
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <LED_voidLedStringOnOff>:
void LED_voidLedStringOnOff(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	00 d0       	rcall	.+0      	; 0x3202 <LED_voidLedStringOnOff+0x6>
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	6a 83       	std	Y+2, r22	; 0x02

	DIO_voidSetPortvalue(Copy_u8PortId , Copy_u8Value) ;
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	6a 81       	ldd	r22, Y+2	; 0x02
    320e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_voidSetPortvalue>

}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <LCD_voidInit>:
#include"LCD_config.h"
#include"LCD_private.h"
#include"LCD_interface.h"

void LCD_voidInit(void)
{
    321c:	0f 93       	push	r16
    321e:	1f 93       	push	r17
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	c6 54       	subi	r28, 0x46	; 70
    322a:	d0 40       	sbci	r29, 0x00	; 0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
	/*config LCD control pins*/
	DIO_voidSetPinDirection(LCD_CR , RS_PIN , OUTPUT) ; //rs output
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	64 e0       	ldi	r22, 0x04	; 4
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , RW_PIN , OUTPUT) ; //rw output
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	65 e0       	ldi	r22, 0x05	; 5
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , E_PIN , OUTPUT) ; //E output
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	66 e0       	ldi	r22, 0x06	; 6
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>

	/*Direction of data pins*/
	DIO_voidSetPortDirection(LCD_DR , DIO_u8PORT_OUTPUT);
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	6f ef       	ldi	r22, 0xFF	; 255
    3258:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <DIO_voidSetPortDirection>
    325c:	fe 01       	movw	r30, r28
    325e:	ed 5b       	subi	r30, 0xBD	; 189
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a8 e4       	ldi	r26, 0x48	; 72
    3268:	b2 e4       	ldi	r27, 0x42	; 66
    326a:	80 83       	st	Z, r24
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	a2 83       	std	Z+2, r26	; 0x02
    3270:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	8e 01       	movw	r16, r28
    3274:	01 5c       	subi	r16, 0xC1	; 193
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	ed 5b       	subi	r30, 0xBD	; 189
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	4a ef       	ldi	r20, 0xFA	; 250
    328c:	54 e4       	ldi	r21, 0x44	; 68
    328e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	f8 01       	movw	r30, r16
    3298:	80 83       	st	Z, r24
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	a2 83       	std	Z+2, r26	; 0x02
    329e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32a0:	fe 01       	movw	r30, r28
    32a2:	ff 96       	adiw	r30, 0x3f	; 63
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <LCD_voidInit+0xaa>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9e af       	std	Y+62, r25	; 0x3e
    32c2:	8d af       	std	Y+61, r24	; 0x3d
    32c4:	46 c0       	rjmp	.+140    	; 0x3352 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    32c6:	fe 01       	movw	r30, r28
    32c8:	ff 96       	adiw	r30, 0x3f	; 63
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	3f ef       	ldi	r19, 0xFF	; 255
    32d6:	4f e7       	ldi	r20, 0x7F	; 127
    32d8:	57 e4       	ldi	r21, 0x47	; 71
    32da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32de:	18 16       	cp	r1, r24
    32e0:	64 f5       	brge	.+88     	; 0x333a <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e2:	fe 01       	movw	r30, r28
    32e4:	ed 5b       	subi	r30, 0xBD	; 189
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e2       	ldi	r20, 0x20	; 32
    32f6:	51 e4       	ldi	r21, 0x41	; 65
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9e af       	std	Y+62, r25	; 0x3e
    330e:	8d af       	std	Y+61, r24	; 0x3d
    3310:	0f c0       	rjmp	.+30     	; 0x3330 <LCD_voidInit+0x114>
    3312:	88 ec       	ldi	r24, 0xC8	; 200
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	9c af       	std	Y+60, r25	; 0x3c
    3318:	8b af       	std	Y+59, r24	; 0x3b
    331a:	8b ad       	ldd	r24, Y+59	; 0x3b
    331c:	9c ad       	ldd	r25, Y+60	; 0x3c
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <LCD_voidInit+0x102>
    3322:	9c af       	std	Y+60, r25	; 0x3c
    3324:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3326:	8d ad       	ldd	r24, Y+61	; 0x3d
    3328:	9e ad       	ldd	r25, Y+62	; 0x3e
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	9e af       	std	Y+62, r25	; 0x3e
    332e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	8d ad       	ldd	r24, Y+61	; 0x3d
    3332:	9e ad       	ldd	r25, Y+62	; 0x3e
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	69 f7       	brne	.-38     	; 0x3312 <LCD_voidInit+0xf6>
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	fe 01       	movw	r30, r28
    333c:	ff 96       	adiw	r30, 0x3f	; 63
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9e af       	std	Y+62, r25	; 0x3e
    3350:	8d af       	std	Y+61, r24	; 0x3d
    3352:	8d ad       	ldd	r24, Y+61	; 0x3d
    3354:	9e ad       	ldd	r25, Y+62	; 0x3e
    3356:	9a af       	std	Y+58, r25	; 0x3a
    3358:	89 af       	std	Y+57, r24	; 0x39
    335a:	89 ad       	ldd	r24, Y+57	; 0x39
    335c:	9a ad       	ldd	r25, Y+58	; 0x3a
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <LCD_voidInit+0x142>
    3362:	9a af       	std	Y+58, r25	; 0x3a
    3364:	89 af       	std	Y+57, r24	; 0x39

	/*delay 50 ms*/
	_delay_ms(50);

	/*Send Function Set instruction*/
	LCD_voidSendCommand(0b00111000);
    3366:	88 e3       	ldi	r24, 0x38	; 56
    3368:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a0 e0       	ldi	r26, 0x00	; 0
    3372:	b0 e4       	ldi	r27, 0x40	; 64
    3374:	8d ab       	std	Y+53, r24	; 0x35
    3376:	9e ab       	std	Y+54, r25	; 0x36
    3378:	af ab       	std	Y+55, r26	; 0x37
    337a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	6d a9       	ldd	r22, Y+53	; 0x35
    337e:	7e a9       	ldd	r23, Y+54	; 0x36
    3380:	8f a9       	ldd	r24, Y+55	; 0x37
    3382:	98 ad       	ldd	r25, Y+56	; 0x38
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a ef       	ldi	r20, 0xFA	; 250
    338a:	54 e4       	ldi	r21, 0x44	; 68
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	89 ab       	std	Y+49, r24	; 0x31
    3396:	9a ab       	std	Y+50, r25	; 0x32
    3398:	ab ab       	std	Y+51, r26	; 0x33
    339a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    339c:	69 a9       	ldd	r22, Y+49	; 0x31
    339e:	7a a9       	ldd	r23, Y+50	; 0x32
    33a0:	8b a9       	ldd	r24, Y+51	; 0x33
    33a2:	9c a9       	ldd	r25, Y+52	; 0x34
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <LCD_voidInit+0x1a2>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	98 ab       	std	Y+48, r25	; 0x30
    33ba:	8f a7       	std	Y+47, r24	; 0x2f
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    33be:	69 a9       	ldd	r22, Y+49	; 0x31
    33c0:	7a a9       	ldd	r23, Y+50	; 0x32
    33c2:	8b a9       	ldd	r24, Y+51	; 0x33
    33c4:	9c a9       	ldd	r25, Y+52	; 0x34
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	6d a9       	ldd	r22, Y+53	; 0x35
    33d8:	7e a9       	ldd	r23, Y+54	; 0x36
    33da:	8f a9       	ldd	r24, Y+55	; 0x37
    33dc:	98 ad       	ldd	r25, Y+56	; 0x38
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	98 ab       	std	Y+48, r25	; 0x30
    33fc:	8f a7       	std	Y+47, r24	; 0x2f
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <LCD_voidInit+0x202>
    3400:	88 ec       	ldi	r24, 0xC8	; 200
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9e a7       	std	Y+46, r25	; 0x2e
    3406:	8d a7       	std	Y+45, r24	; 0x2d
    3408:	8d a5       	ldd	r24, Y+45	; 0x2d
    340a:	9e a5       	ldd	r25, Y+46	; 0x2e
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_voidInit+0x1f0>
    3410:	9e a7       	std	Y+46, r25	; 0x2e
    3412:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8f a5       	ldd	r24, Y+47	; 0x2f
    3416:	98 a9       	ldd	r25, Y+48	; 0x30
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	98 ab       	std	Y+48, r25	; 0x30
    341c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3420:	98 a9       	ldd	r25, Y+48	; 0x30
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <LCD_voidInit+0x1e4>
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	69 a9       	ldd	r22, Y+49	; 0x31
    342a:	7a a9       	ldd	r23, Y+50	; 0x32
    342c:	8b a9       	ldd	r24, Y+51	; 0x33
    342e:	9c a9       	ldd	r25, Y+52	; 0x34
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	98 ab       	std	Y+48, r25	; 0x30
    343a:	8f a7       	std	Y+47, r24	; 0x2f
    343c:	8f a5       	ldd	r24, Y+47	; 0x2f
    343e:	98 a9       	ldd	r25, Y+48	; 0x30
    3440:	9c a7       	std	Y+44, r25	; 0x2c
    3442:	8b a7       	std	Y+43, r24	; 0x2b
    3444:	8b a5       	ldd	r24, Y+43	; 0x2b
    3446:	9c a5       	ldd	r25, Y+44	; 0x2c
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <LCD_voidInit+0x22c>
    344c:	9c a7       	std	Y+44, r25	; 0x2c
    344e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/*clear display inst*/
	LCD_voidSendCommand(0b00000001);
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	a0 e0       	ldi	r26, 0x00	; 0
    345c:	b0 e4       	ldi	r27, 0x40	; 64
    345e:	8f a3       	std	Y+39, r24	; 0x27
    3460:	98 a7       	std	Y+40, r25	; 0x28
    3462:	a9 a7       	std	Y+41, r26	; 0x29
    3464:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3466:	6f a1       	ldd	r22, Y+39	; 0x27
    3468:	78 a5       	ldd	r23, Y+40	; 0x28
    346a:	89 a5       	ldd	r24, Y+41	; 0x29
    346c:	9a a5       	ldd	r25, Y+42	; 0x2a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a ef       	ldi	r20, 0xFA	; 250
    3474:	54 e4       	ldi	r21, 0x44	; 68
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	8b a3       	std	Y+35, r24	; 0x23
    3480:	9c a3       	std	Y+36, r25	; 0x24
    3482:	ad a3       	std	Y+37, r26	; 0x25
    3484:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3486:	6b a1       	ldd	r22, Y+35	; 0x23
    3488:	7c a1       	ldd	r23, Y+36	; 0x24
    348a:	8d a1       	ldd	r24, Y+37	; 0x25
    348c:	9e a1       	ldd	r25, Y+38	; 0x26
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	40 e8       	ldi	r20, 0x80	; 128
    3494:	5f e3       	ldi	r21, 0x3F	; 63
    3496:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    349a:	88 23       	and	r24, r24
    349c:	2c f4       	brge	.+10     	; 0x34a8 <LCD_voidInit+0x28c>
		__ticks = 1;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9a a3       	std	Y+34, r25	; 0x22
    34a4:	89 a3       	std	Y+33, r24	; 0x21
    34a6:	3f c0       	rjmp	.+126    	; 0x3526 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    34a8:	6b a1       	ldd	r22, Y+35	; 0x23
    34aa:	7c a1       	ldd	r23, Y+36	; 0x24
    34ac:	8d a1       	ldd	r24, Y+37	; 0x25
    34ae:	9e a1       	ldd	r25, Y+38	; 0x26
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	4c f5       	brge	.+82     	; 0x3512 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c0:	6f a1       	ldd	r22, Y+39	; 0x27
    34c2:	78 a5       	ldd	r23, Y+40	; 0x28
    34c4:	89 a5       	ldd	r24, Y+41	; 0x29
    34c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e2       	ldi	r20, 0x20	; 32
    34ce:	51 e4       	ldi	r21, 0x41	; 65
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9a a3       	std	Y+34, r25	; 0x22
    34e6:	89 a3       	std	Y+33, r24	; 0x21
    34e8:	0f c0       	rjmp	.+30     	; 0x3508 <LCD_voidInit+0x2ec>
    34ea:	88 ec       	ldi	r24, 0xC8	; 200
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	98 a3       	std	Y+32, r25	; 0x20
    34f0:	8f 8f       	std	Y+31, r24	; 0x1f
    34f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f4:	98 a1       	ldd	r25, Y+32	; 0x20
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <LCD_voidInit+0x2da>
    34fa:	98 a3       	std	Y+32, r25	; 0x20
    34fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3500:	9a a1       	ldd	r25, Y+34	; 0x22
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	9a a3       	std	Y+34, r25	; 0x22
    3506:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3508:	89 a1       	ldd	r24, Y+33	; 0x21
    350a:	9a a1       	ldd	r25, Y+34	; 0x22
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	69 f7       	brne	.-38     	; 0x34ea <LCD_voidInit+0x2ce>
    3510:	14 c0       	rjmp	.+40     	; 0x353a <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3512:	6b a1       	ldd	r22, Y+35	; 0x23
    3514:	7c a1       	ldd	r23, Y+36	; 0x24
    3516:	8d a1       	ldd	r24, Y+37	; 0x25
    3518:	9e a1       	ldd	r25, Y+38	; 0x26
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	9a a3       	std	Y+34, r25	; 0x22
    3524:	89 a3       	std	Y+33, r24	; 0x21
    3526:	89 a1       	ldd	r24, Y+33	; 0x21
    3528:	9a a1       	ldd	r25, Y+34	; 0x22
    352a:	9e 8f       	std	Y+30, r25	; 0x1e
    352c:	8d 8f       	std	Y+29, r24	; 0x1d
    352e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3530:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <LCD_voidInit+0x316>
    3536:	9e 8f       	std	Y+30, r25	; 0x1e
    3538:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*display*/
	LCD_voidSendCommand(0b00001100);
    353a:	8c e0       	ldi	r24, 0x0C	; 12
    353c:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e4       	ldi	r27, 0x40	; 64
    3548:	89 8f       	std	Y+25, r24	; 0x19
    354a:	9a 8f       	std	Y+26, r25	; 0x1a
    354c:	ab 8f       	std	Y+27, r26	; 0x1b
    354e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	69 8d       	ldd	r22, Y+25	; 0x19
    3552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	4a ef       	ldi	r20, 0xFA	; 250
    355e:	54 e4       	ldi	r21, 0x44	; 68
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8d 8b       	std	Y+21, r24	; 0x15
    356a:	9e 8b       	std	Y+22, r25	; 0x16
    356c:	af 8b       	std	Y+23, r26	; 0x17
    356e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e8       	ldi	r20, 0x80	; 128
    357e:	5f e3       	ldi	r21, 0x3F	; 63
    3580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3584:	88 23       	and	r24, r24
    3586:	2c f4       	brge	.+10     	; 0x3592 <LCD_voidInit+0x376>
		__ticks = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	4c f5       	brge	.+82     	; 0x35fc <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	69 8d       	ldd	r22, Y+25	; 0x19
    35ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <LCD_voidInit+0x3d6>
    35d4:	88 ec       	ldi	r24, 0xC8	; 200
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9a 8b       	std	Y+18, r25	; 0x12
    35da:	89 8b       	std	Y+17, r24	; 0x11
    35dc:	89 89       	ldd	r24, Y+17	; 0x11
    35de:	9a 89       	ldd	r25, Y+18	; 0x12
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_voidInit+0x3c4>
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f2:	8b 89       	ldd	r24, Y+19	; 0x13
    35f4:	9c 89       	ldd	r25, Y+20	; 0x14
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	69 f7       	brne	.-38     	; 0x35d4 <LCD_voidInit+0x3b8>
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	6d 89       	ldd	r22, Y+21	; 0x15
    35fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3600:	8f 89       	ldd	r24, Y+23	; 0x17
    3602:	98 8d       	ldd	r25, Y+24	; 0x18
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 8b       	std	Y+20, r25	; 0x14
    360e:	8b 8b       	std	Y+19, r24	; 0x13
    3610:	8b 89       	ldd	r24, Y+19	; 0x13
    3612:	9c 89       	ldd	r25, Y+20	; 0x14
    3614:	98 8b       	std	Y+16, r25	; 0x10
    3616:	8f 87       	std	Y+15, r24	; 0x0f
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	98 89       	ldd	r25, Y+16	; 0x10
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <LCD_voidInit+0x400>
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*entry mode*/
	LCD_voidSendCommand(0b00000110);
    3624:	86 e0       	ldi	r24, 0x06	; 6
    3626:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a0 e0       	ldi	r26, 0x00	; 0
    3630:	b0 e4       	ldi	r27, 0x40	; 64
    3632:	8b 87       	std	Y+11, r24	; 0x0b
    3634:	9c 87       	std	Y+12, r25	; 0x0c
    3636:	ad 87       	std	Y+13, r26	; 0x0d
    3638:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363a:	6b 85       	ldd	r22, Y+11	; 0x0b
    363c:	7c 85       	ldd	r23, Y+12	; 0x0c
    363e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3640:	9e 85       	ldd	r25, Y+14	; 0x0e
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	4a ef       	ldi	r20, 0xFA	; 250
    3648:	54 e4       	ldi	r21, 0x44	; 68
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	8f 83       	std	Y+7, r24	; 0x07
    3654:	98 87       	std	Y+8, r25	; 0x08
    3656:	a9 87       	std	Y+9, r26	; 0x09
    3658:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e8       	ldi	r20, 0x80	; 128
    3668:	5f e3       	ldi	r21, 0x3F	; 63
    366a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366e:	88 23       	and	r24, r24
    3670:	2c f4       	brge	.+10     	; 0x367c <LCD_voidInit+0x460>
		__ticks = 1;
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	3f c0       	rjmp	.+126    	; 0x36fa <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    367c:	6f 81       	ldd	r22, Y+7	; 0x07
    367e:	78 85       	ldd	r23, Y+8	; 0x08
    3680:	89 85       	ldd	r24, Y+9	; 0x09
    3682:	9a 85       	ldd	r25, Y+10	; 0x0a
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	3f ef       	ldi	r19, 0xFF	; 255
    3688:	4f e7       	ldi	r20, 0x7F	; 127
    368a:	57 e4       	ldi	r21, 0x47	; 71
    368c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3690:	18 16       	cp	r1, r24
    3692:	4c f5       	brge	.+82     	; 0x36e6 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3694:	6b 85       	ldd	r22, Y+11	; 0x0b
    3696:	7c 85       	ldd	r23, Y+12	; 0x0c
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	0f c0       	rjmp	.+30     	; 0x36dc <LCD_voidInit+0x4c0>
    36be:	88 ec       	ldi	r24, 0xC8	; 200
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <LCD_voidInit+0x4ae>
    36ce:	9c 83       	std	Y+4, r25	; 0x04
    36d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d2:	8d 81       	ldd	r24, Y+5	; 0x05
    36d4:	9e 81       	ldd	r25, Y+6	; 0x06
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	9e 83       	std	Y+6, r25	; 0x06
    36da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	69 f7       	brne	.-38     	; 0x36be <LCD_voidInit+0x4a2>
    36e4:	14 c0       	rjmp	.+40     	; 0x370e <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e6:	6f 81       	ldd	r22, Y+7	; 0x07
    36e8:	78 85       	ldd	r23, Y+8	; 0x08
    36ea:	89 85       	ldd	r24, Y+9	; 0x09
    36ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	9e 83       	std	Y+6, r25	; 0x06
    36f8:	8d 83       	std	Y+5, r24	; 0x05
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <LCD_voidInit+0x4ea>
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    370e:	ca 5b       	subi	r28, 0xBA	; 186
    3710:	df 4f       	sbci	r29, 0xFF	; 255
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	cf 91       	pop	r28
    371e:	df 91       	pop	r29
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	08 95       	ret

00003726 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	2f 97       	sbiw	r28, 0x0f	; 15
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 0 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , LOW);
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	64 e0       	ldi	r22, 0x04	; 4
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	65 e0       	ldi	r22, 0x05	; 5
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Command) ;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	6f 85       	ldd	r22, Y+15	; 0x0f
    3754:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	66 e0       	ldi	r22, 0x06	; 6
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	a0 e0       	ldi	r26, 0x00	; 0
    3768:	b0 e4       	ldi	r27, 0x40	; 64
    376a:	8b 87       	std	Y+11, r24	; 0x0b
    376c:	9c 87       	std	Y+12, r25	; 0x0c
    376e:	ad 87       	std	Y+13, r26	; 0x0d
    3770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3772:	6b 85       	ldd	r22, Y+11	; 0x0b
    3774:	7c 85       	ldd	r23, Y+12	; 0x0c
    3776:	8d 85       	ldd	r24, Y+13	; 0x0d
    3778:	9e 85       	ldd	r25, Y+14	; 0x0e
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a ef       	ldi	r20, 0xFA	; 250
    3780:	54 e4       	ldi	r21, 0x44	; 68
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	8f 83       	std	Y+7, r24	; 0x07
    378c:	98 87       	std	Y+8, r25	; 0x08
    378e:	a9 87       	std	Y+9, r26	; 0x09
    3790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3792:	6f 81       	ldd	r22, Y+7	; 0x07
    3794:	78 85       	ldd	r23, Y+8	; 0x08
    3796:	89 85       	ldd	r24, Y+9	; 0x09
    3798:	9a 85       	ldd	r25, Y+10	; 0x0a
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e8       	ldi	r20, 0x80	; 128
    37a0:	5f e3       	ldi	r21, 0x3F	; 63
    37a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	2c f4       	brge	.+10     	; 0x37b4 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
    37b2:	3f c0       	rjmp	.+126    	; 0x3832 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    37b4:	6f 81       	ldd	r22, Y+7	; 0x07
    37b6:	78 85       	ldd	r23, Y+8	; 0x08
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	3f ef       	ldi	r19, 0xFF	; 255
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	57 e4       	ldi	r21, 0x47	; 71
    37c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	4c f5       	brge	.+82     	; 0x381e <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e2       	ldi	r20, 0x20	; 32
    37da:	51 e4       	ldi	r21, 0x41	; 65
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	0f c0       	rjmp	.+30     	; 0x3814 <LCD_voidSendCommand+0xee>
    37f6:	88 ec       	ldi	r24, 0xC8	; 200
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9c 83       	std	Y+4, r25	; 0x04
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	9c 81       	ldd	r25, Y+4	; 0x04
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <LCD_voidSendCommand+0xdc>
    3806:	9c 83       	std	Y+4, r25	; 0x04
    3808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	9e 81       	ldd	r25, Y+6	; 0x06
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	69 f7       	brne	.-38     	; 0x37f6 <LCD_voidSendCommand+0xd0>
    381c:	14 c0       	rjmp	.+40     	; 0x3846 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	9e 83       	std	Y+6, r25	; 0x06
    3830:	8d 83       	std	Y+5, r24	; 0x05
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <LCD_voidSendCommand+0x118>
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	66 e0       	ldi	r22, 0x06	; 6
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

}
    3850:	2f 96       	adiw	r28, 0x0f	; 15
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Data)
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	2f 97       	sbiw	r28, 0x0f	; 15
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 1 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , HIGH);
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	64 e0       	ldi	r22, 0x04	; 4
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	65 e0       	ldi	r22, 0x05	; 5
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Data) ;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3890:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	66 e0       	ldi	r22, 0x06	; 6
    3898:	41 e0       	ldi	r20, 0x01	; 1
    389a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	a0 e0       	ldi	r26, 0x00	; 0
    38a4:	b0 e4       	ldi	r27, 0x40	; 64
    38a6:	8b 87       	std	Y+11, r24	; 0x0b
    38a8:	9c 87       	std	Y+12, r25	; 0x0c
    38aa:	ad 87       	std	Y+13, r26	; 0x0d
    38ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	4a ef       	ldi	r20, 0xFA	; 250
    38bc:	54 e4       	ldi	r21, 0x44	; 68
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	8f 83       	std	Y+7, r24	; 0x07
    38c8:	98 87       	std	Y+8, r25	; 0x08
    38ca:	a9 87       	std	Y+9, r26	; 0x09
    38cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ce:	6f 81       	ldd	r22, Y+7	; 0x07
    38d0:	78 85       	ldd	r23, Y+8	; 0x08
    38d2:	89 85       	ldd	r24, Y+9	; 0x09
    38d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e8       	ldi	r20, 0x80	; 128
    38dc:	5f e3       	ldi	r21, 0x3F	; 63
    38de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e2:	88 23       	and	r24, r24
    38e4:	2c f4       	brge	.+10     	; 0x38f0 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	9e 83       	std	Y+6, r25	; 0x06
    38ec:	8d 83       	std	Y+5, r24	; 0x05
    38ee:	3f c0       	rjmp	.+126    	; 0x396e <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    38f0:	6f 81       	ldd	r22, Y+7	; 0x07
    38f2:	78 85       	ldd	r23, Y+8	; 0x08
    38f4:	89 85       	ldd	r24, Y+9	; 0x09
    38f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	3f ef       	ldi	r19, 0xFF	; 255
    38fc:	4f e7       	ldi	r20, 0x7F	; 127
    38fe:	57 e4       	ldi	r21, 0x47	; 71
    3900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3904:	18 16       	cp	r1, r24
    3906:	4c f5       	brge	.+82     	; 0x395a <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3908:	6b 85       	ldd	r22, Y+11	; 0x0b
    390a:	7c 85       	ldd	r23, Y+12	; 0x0c
    390c:	8d 85       	ldd	r24, Y+13	; 0x0d
    390e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e2       	ldi	r20, 0x20	; 32
    3916:	51 e4       	ldi	r21, 0x41	; 65
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	8d 83       	std	Y+5, r24	; 0x05
    3930:	0f c0       	rjmp	.+30     	; 0x3950 <LCD_voidSendChar+0xee>
    3932:	88 ec       	ldi	r24, 0xC8	; 200
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	8b 83       	std	Y+3, r24	; 0x03
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
    393c:	9c 81       	ldd	r25, Y+4	; 0x04
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <LCD_voidSendChar+0xdc>
    3942:	9c 83       	std	Y+4, r25	; 0x04
    3944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3946:	8d 81       	ldd	r24, Y+5	; 0x05
    3948:	9e 81       	ldd	r25, Y+6	; 0x06
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3950:	8d 81       	ldd	r24, Y+5	; 0x05
    3952:	9e 81       	ldd	r25, Y+6	; 0x06
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	69 f7       	brne	.-38     	; 0x3932 <LCD_voidSendChar+0xd0>
    3958:	14 c0       	rjmp	.+40     	; 0x3982 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395a:	6f 81       	ldd	r22, Y+7	; 0x07
    395c:	78 85       	ldd	r23, Y+8	; 0x08
    395e:	89 85       	ldd	r24, Y+9	; 0x09
    3960:	9a 85       	ldd	r25, Y+10	; 0x0a
    3962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	9e 83       	std	Y+6, r25	; 0x06
    396c:	8d 83       	std	Y+5, r24	; 0x05
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	9a 83       	std	Y+2, r25	; 0x02
    3974:	89 83       	std	Y+1, r24	; 0x01
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	9a 81       	ldd	r25, Y+2	; 0x02
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <LCD_voidSendChar+0x118>
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	66 e0       	ldi	r22, 0x06	; 6
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

}
    398c:	2f 96       	adiw	r28, 0x0f	; 15
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	08 95       	ret

0000399e <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8Arr)
{
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <LCD_voidSendString+0x6>
    39a4:	0f 92       	push	r0
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	9b 83       	std	Y+3, r25	; 0x03
    39ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0 ;
    39ae:	19 82       	std	Y+1, r1	; 0x01
    39b0:	0e c0       	rjmp	.+28     	; 0x39ce <LCD_voidSendString+0x30>
	while(Copy_u8Arr[i]!='\0')
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	28 2f       	mov	r18, r24
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ba:	9b 81       	ldd	r25, Y+3	; 0x03
    39bc:	fc 01       	movw	r30, r24
    39be:	e2 0f       	add	r30, r18
    39c0:	f3 1f       	adc	r31, r19
    39c2:	80 81       	ld	r24, Z
    39c4:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
		i++;
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	8f 5f       	subi	r24, 0xFF	; 255
    39cc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8Arr)
{
	u8 i=0 ;
	while(Copy_u8Arr[i]!='\0')
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	9b 81       	ldd	r25, Y+3	; 0x03
    39d8:	fc 01       	movw	r30, r24
    39da:	e2 0f       	add	r30, r18
    39dc:	f3 1f       	adc	r31, r19
    39de:	80 81       	ld	r24, Z
    39e0:	88 23       	and	r24, r24
    39e2:	39 f7       	brne	.-50     	; 0x39b2 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
		i++;
	}

}
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <LCD_voidSendNum>:

void LCD_voidSendNum(u32 Copy_u32Num)
{
    39f0:	ef 92       	push	r14
    39f2:	ff 92       	push	r15
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	28 97       	sbiw	r28, 0x08	; 8
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	6d 83       	std	Y+5, r22	; 0x05
    3a0e:	7e 83       	std	Y+6, r23	; 0x06
    3a10:	8f 83       	std	Y+7, r24	; 0x07
    3a12:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Number = 1 ;
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	9a 83       	std	Y+2, r25	; 0x02
    3a20:	ab 83       	std	Y+3, r26	; 0x03
    3a22:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Num==0)
    3a24:	8d 81       	ldd	r24, Y+5	; 0x05
    3a26:	9e 81       	ldd	r25, Y+6	; 0x06
    3a28:	af 81       	ldd	r26, Y+7	; 0x07
    3a2a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	a1 05       	cpc	r26, r1
    3a30:	b1 05       	cpc	r27, r1
    3a32:	d1 f5       	brne	.+116    	; 0x3aa8 <LCD_voidSendNum+0xb8>
	{
		LCD_voidSendChar(0+'0');
    3a34:	80 e3       	ldi	r24, 0x30	; 48
    3a36:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
    3a3a:	6b c0       	rjmp	.+214    	; 0x3b12 <LCD_voidSendNum+0x122>
	}
	else
	{
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a40:	ab 81       	ldd	r26, Y+3	; 0x03
    3a42:	bc 81       	ldd	r27, Y+4	; 0x04
    3a44:	2a e0       	ldi	r18, 0x0A	; 10
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	50 e0       	ldi	r21, 0x00	; 0
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 84 2b 	call	0x5708	; 0x5708 <__mulsi3>
    3a54:	7b 01       	movw	r14, r22
    3a56:	8c 01       	movw	r16, r24
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	af 81       	ldd	r26, Y+7	; 0x07
    3a5e:	b8 85       	ldd	r27, Y+8	; 0x08
    3a60:	2a e0       	ldi	r18, 0x0A	; 10
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e0       	ldi	r20, 0x00	; 0
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	8e 0d       	add	r24, r14
    3a76:	9f 1d       	adc	r25, r15
    3a78:	a0 1f       	adc	r26, r16
    3a7a:	b1 1f       	adc	r27, r17
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	ab 83       	std	Y+3, r26	; 0x03
    3a82:	bc 83       	std	Y+4, r27	; 0x04
			Copy_u32Num /= 10 ;
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	af 81       	ldd	r26, Y+7	; 0x07
    3a8a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a8c:	2a e0       	ldi	r18, 0x0A	; 10
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
    3a9c:	da 01       	movw	r26, r20
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	8d 83       	std	Y+5, r24	; 0x05
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	af 83       	std	Y+7, r26	; 0x07
    3aa6:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_voidSendChar(0+'0');
	}
	else
	{
		while(Copy_u32Num!=0)
    3aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3aac:	af 81       	ldd	r26, Y+7	; 0x07
    3aae:	b8 85       	ldd	r27, Y+8	; 0x08
    3ab0:	00 97       	sbiw	r24, 0x00	; 0
    3ab2:	a1 05       	cpc	r26, r1
    3ab4:	b1 05       	cpc	r27, r1
    3ab6:	11 f6       	brne	.-124    	; 0x3a3c <LCD_voidSendNum+0x4c>
    3ab8:	23 c0       	rjmp	.+70     	; 0x3b00 <LCD_voidSendNum+0x110>
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	9a 81       	ldd	r25, Y+2	; 0x02
    3abe:	ab 81       	ldd	r26, Y+3	; 0x03
    3ac0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ac2:	2a e0       	ldi	r18, 0x0A	; 10
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e0       	ldi	r20, 0x00	; 0
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	80 5d       	subi	r24, 0xD0	; 208
    3ad8:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
			Local_u32Number = Local_u32Number / 10 ;
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ae2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ae4:	2a e0       	ldi	r18, 0x0A	; 10
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e0       	ldi	r20, 0x00	; 0
    3aea:	50 e0       	ldi	r21, 0x00	; 0
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
    3af4:	da 01       	movw	r26, r20
    3af6:	c9 01       	movw	r24, r18
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	ab 83       	std	Y+3, r26	; 0x03
    3afe:	bc 83       	std	Y+4, r27	; 0x04
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	9a 81       	ldd	r25, Y+2	; 0x02
    3b04:	ab 81       	ldd	r26, Y+3	; 0x03
    3b06:	bc 81       	ldd	r27, Y+4	; 0x04
    3b08:	81 30       	cpi	r24, 0x01	; 1
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	a1 05       	cpc	r26, r1
    3b0e:	b1 05       	cpc	r27, r1
    3b10:	a1 f6       	brne	.-88     	; 0x3aba <LCD_voidSendNum+0xca>
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
			Local_u32Number = Local_u32Number / 10 ;
		}
	}
}
    3b12:	28 96       	adiw	r28, 0x08	; 8
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	cf 91       	pop	r28
    3b20:	df 91       	pop	r29
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	ff 90       	pop	r15
    3b28:	ef 90       	pop	r14
    3b2a:	08 95       	ret

00003b2c <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8Line , u8 Copy_u8Position)
{
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <LCD_voidGoToXY+0x6>
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <LCD_voidGoToXY+0x8>
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	89 83       	std	Y+1, r24	; 0x01
    3b3a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Line)
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	3c 83       	std	Y+4, r19	; 0x04
    3b44:	2b 83       	std	Y+3, r18	; 0x03
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	31 f0       	breq	.+12     	; 0x3b5a <LCD_voidGoToXY+0x2e>
    3b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b50:	3c 81       	ldd	r19, Y+4	; 0x04
    3b52:	21 30       	cpi	r18, 0x01	; 1
    3b54:	31 05       	cpc	r19, r1
    3b56:	31 f0       	breq	.+12     	; 0x3b64 <LCD_voidGoToXY+0x38>
    3b58:	09 c0       	rjmp	.+18     	; 0x3b6c <LCD_voidGoToXY+0x40>
	{
		case 0 : LCD_voidSendCommand(0x80+Copy_u8Position); break ;
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	80 58       	subi	r24, 0x80	; 128
    3b5e:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
    3b62:	04 c0       	rjmp	.+8      	; 0x3b6c <LCD_voidGoToXY+0x40>
		case 1 : LCD_voidSendCommand(0xC0+Copy_u8Position); break ;
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	80 54       	subi	r24, 0x40	; 64
    3b68:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
		default: break;
	}
}
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <LCD_voidCLR>:
void LCD_voidCLR(void)
{
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
	/*clear the LCD*/
	LCD_voidSendCommand(0b00000001);
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>
}
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	08 95       	ret

00003b8e <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber ,u8 Copy_u8xPos , u8 Copy_u8YPos )
{
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	27 97       	sbiw	r28, 0x07	; 7
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	de bf       	out	0x3e, r29	; 62
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	cd bf       	out	0x3d, r28	; 61
    3ba2:	9c 83       	std	Y+4, r25	; 0x04
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
    3ba6:	6d 83       	std	Y+5, r22	; 0x05
    3ba8:	4e 83       	std	Y+6, r20	; 0x06
    3baa:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 , Local_u8Iterator ;
    3bac:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	88 2f       	mov	r24, r24
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	88 0f       	add	r24, r24
    3bb6:	99 1f       	adc	r25, r25
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	8a 83       	std	Y+2, r24	; 0x02

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	80 5c       	subi	r24, 0xC0	; 192
    3bc6:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_voidSendCommand>

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3bca:	19 82       	std	Y+1, r1	; 0x01
    3bcc:	0e c0       	rjmp	.+28     	; 0x3bea <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	28 2f       	mov	r18, r24
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd8:	fc 01       	movw	r30, r24
    3bda:	e2 0f       	add	r30, r18
    3bdc:	f3 1f       	adc	r31, r19
    3bde:	80 81       	ld	r24, Z
    3be0:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	8f 5f       	subi	r24, 0xFF	; 255
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	88 30       	cpi	r24, 0x08	; 8
    3bee:	78 f3       	brcs	.-34     	; 0x3bce <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
	}

	/*Go bach to the DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8xPos , Copy_u8YPos) ;
    3bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidGoToXY>

	/*Display the pattern writen in CGRAm*/
	LCD_voidSendChar(Copy_u8PatternNumber) ;
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>

}
    3bfe:	27 96       	adiw	r28, 0x07	; 7
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <KPD_voidInit>:
#include"KPD_interface.h"



void KPD_voidInit(void)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
	/*rows input*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_R1 , INPUT);
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R2 , INPUT);
    3c22:	82 e0       	ldi	r24, 0x02	; 2
    3c24:	61 e0       	ldi	r22, 0x01	; 1
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R3 , INPUT);
    3c2c:	82 e0       	ldi	r24, 0x02	; 2
    3c2e:	62 e0       	ldi	r22, 0x02	; 2
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R4 , INPUT);
    3c36:	82 e0       	ldi	r24, 0x02	; 2
    3c38:	63 e0       	ldi	r22, 0x03	; 3
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>


	/*columns pins*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_C1 , OUTPUT);
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	64 e0       	ldi	r22, 0x04	; 4
    3c44:	41 e0       	ldi	r20, 0x01	; 1
    3c46:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C2 , OUTPUT);
    3c4a:	82 e0       	ldi	r24, 0x02	; 2
    3c4c:	65 e0       	ldi	r22, 0x05	; 5
    3c4e:	41 e0       	ldi	r20, 0x01	; 1
    3c50:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C3 , OUTPUT);
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	66 e0       	ldi	r22, 0x06	; 6
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C4 , OUTPUT);
    3c5e:	82 e0       	ldi	r24, 0x02	; 2
    3c60:	67 e0       	ldi	r22, 0x07	; 7
    3c62:	41 e0       	ldi	r20, 0x01	; 1
    3c64:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>


	/*columns deactive , rows pullup */
	DIO_voidSetPortvalue(KPD_PORT , DIO_u8PORT_HIGH);
    3c68:	82 e0       	ldi	r24, 0x02	; 2
    3c6a:	6f ef       	ldi	r22, 0xFF	; 255
    3c6c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_voidSetPortvalue>

}
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	6b 97       	sbiw	r28, 0x1b	; 27
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator1 , Local_u8Iterator2 ;
	u8 Local_Au8ColsArr[4]={KPD_C1,KPD_C2,KPD_C3,KPD_C4};
    3c8a:	84 e0       	ldi	r24, 0x04	; 4
    3c8c:	8c 8b       	std	Y+20, r24	; 0x14
    3c8e:	85 e0       	ldi	r24, 0x05	; 5
    3c90:	8d 8b       	std	Y+21, r24	; 0x15
    3c92:	86 e0       	ldi	r24, 0x06	; 6
    3c94:	8e 8b       	std	Y+22, r24	; 0x16
    3c96:	87 e0       	ldi	r24, 0x07	; 7
    3c98:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
    3c9a:	18 8e       	std	Y+24, r1	; 0x18
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	89 8f       	std	Y+25, r24	; 0x19
    3ca0:	82 e0       	ldi	r24, 0x02	; 2
    3ca2:	8a 8f       	std	Y+26, r24	; 0x1a
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
    3ca8:	8f ef       	ldi	r24, 0xFF	; 255
    3caa:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag =0 ;
    3cac:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    3cae:	1b 8a       	std	Y+19, r1	; 0x13
    3cb0:	e3 c0       	rjmp	.+454    	; 0x3e78 <KPD_u8GetPressedKey+0x202>
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);
    3cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb4:	28 2f       	mov	r18, r24
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	ce 01       	movw	r24, r28
    3cba:	44 96       	adiw	r24, 0x14	; 20
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	e2 0f       	add	r30, r18
    3cc0:	f3 1f       	adc	r31, r19
    3cc2:	90 81       	ld	r25, Z
    3cc4:	82 e0       	ldi	r24, 0x02	; 2
    3cc6:	69 2f       	mov	r22, r25
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    3cce:	1a 8a       	std	Y+18, r1	; 0x12
    3cd0:	bb c0       	rjmp	.+374    	; 0x3e48 <KPD_u8GetPressedKey+0x1d2>
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	a0 ea       	ldi	r26, 0xA0	; 160
    3cd8:	b0 e4       	ldi	r27, 0x40	; 64
    3cda:	8b 87       	std	Y+11, r24	; 0x0b
    3cdc:	9c 87       	std	Y+12, r25	; 0x0c
    3cde:	ad 87       	std	Y+13, r26	; 0x0d
    3ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	4a ef       	ldi	r20, 0xFA	; 250
    3cf0:	54 e4       	ldi	r21, 0x44	; 68
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	8f 83       	std	Y+7, r24	; 0x07
    3cfc:	98 87       	std	Y+8, r25	; 0x08
    3cfe:	a9 87       	std	Y+9, r26	; 0x09
    3d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d02:	6f 81       	ldd	r22, Y+7	; 0x07
    3d04:	78 85       	ldd	r23, Y+8	; 0x08
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e8       	ldi	r20, 0x80	; 128
    3d10:	5f e3       	ldi	r21, 0x3F	; 63
    3d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	2c f4       	brge	.+10     	; 0x3d24 <KPD_u8GetPressedKey+0xae>
		__ticks = 1;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
    3d22:	3f c0       	rjmp	.+126    	; 0x3da2 <KPD_u8GetPressedKey+0x12c>
	else if (__tmp > 65535)
    3d24:	6f 81       	ldd	r22, Y+7	; 0x07
    3d26:	78 85       	ldd	r23, Y+8	; 0x08
    3d28:	89 85       	ldd	r24, Y+9	; 0x09
    3d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	3f ef       	ldi	r19, 0xFF	; 255
    3d30:	4f e7       	ldi	r20, 0x7F	; 127
    3d32:	57 e4       	ldi	r21, 0x47	; 71
    3d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d38:	18 16       	cp	r1, r24
    3d3a:	4c f5       	brge	.+82     	; 0x3d8e <KPD_u8GetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e2       	ldi	r20, 0x20	; 32
    3d4a:	51 e4       	ldi	r21, 0x41	; 65
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
    3d64:	0f c0       	rjmp	.+30     	; 0x3d84 <KPD_u8GetPressedKey+0x10e>
    3d66:	88 ec       	ldi	r24, 0xC8	; 200
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9c 83       	std	Y+4, r25	; 0x04
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	9c 81       	ldd	r25, Y+4	; 0x04
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <KPD_u8GetPressedKey+0xfc>
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <KPD_u8GetPressedKey+0xf0>
    3d8c:	14 c0       	rjmp	.+40     	; 0x3db6 <KPD_u8GetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d90:	78 85       	ldd	r23, Y+8	; 0x08
    3d92:	89 85       	ldd	r24, Y+9	; 0x09
    3d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9e 83       	std	Y+6, r25	; 0x06
    3da0:	8d 83       	std	Y+5, r24	; 0x05
    3da2:	8d 81       	ldd	r24, Y+5	; 0x05
    3da4:	9e 81       	ldd	r25, Y+6	; 0x06
    3da6:	9a 83       	std	Y+2, r25	; 0x02
    3da8:	89 83       	std	Y+1, r24	; 0x01
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	9a 81       	ldd	r25, Y+2	; 0x02
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <KPD_u8GetPressedKey+0x138>
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01
		{
			//debouncing
			_delay_ms(5);

			Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3db6:	8a 89       	ldd	r24, Y+18	; 0x12
    3db8:	28 2f       	mov	r18, r24
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	48 96       	adiw	r24, 0x18	; 24
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	e2 0f       	add	r30, r18
    3dc4:	f3 1f       	adc	r31, r19
    3dc6:	90 81       	ld	r25, Z
    3dc8:	82 e0       	ldi	r24, 0x02	; 2
    3dca:	69 2f       	mov	r22, r25
    3dcc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_u8GetPinvalue>
    3dd0:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
    3dd2:	89 89       	ldd	r24, Y+17	; 0x11
    3dd4:	88 23       	and	r24, r24
    3dd6:	a9 f5       	brne	.+106    	; 0x3e42 <KPD_u8GetPressedKey+0x1cc>
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3dd8:	8a 89       	ldd	r24, Y+18	; 0x12
    3dda:	28 2f       	mov	r18, r24
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	ce 01       	movw	r24, r28
    3de0:	48 96       	adiw	r24, 0x18	; 24
    3de2:	fc 01       	movw	r30, r24
    3de4:	e2 0f       	add	r30, r18
    3de6:	f3 1f       	adc	r31, r19
    3de8:	90 81       	ld	r25, Z
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	69 2f       	mov	r22, r25
    3dee:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_u8GetPinvalue>
    3df2:	89 8b       	std	Y+17, r24	; 0x11
    3df4:	0e c0       	rjmp	.+28     	; 0x3e12 <KPD_u8GetPressedKey+0x19c>

				while(Local_PinValue==0)
				{
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3df6:	8a 89       	ldd	r24, Y+18	; 0x12
    3df8:	28 2f       	mov	r18, r24
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	48 96       	adiw	r24, 0x18	; 24
    3e00:	fc 01       	movw	r30, r24
    3e02:	e2 0f       	add	r30, r18
    3e04:	f3 1f       	adc	r31, r19
    3e06:	90 81       	ld	r25, Z
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	69 2f       	mov	r22, r25
    3e0c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_u8GetPinvalue>
    3e10:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);

				while(Local_PinValue==0)
    3e12:	89 89       	ldd	r24, Y+17	; 0x11
    3e14:	88 23       	and	r24, r24
    3e16:	79 f3       	breq	.-34     	; 0x3df6 <KPD_u8GetPressedKey+0x180>
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
				}
				//Safety debouncing


				Local_PressedKey = KeyPadArr[Local_u8Iterator2][Local_u8Iterator1];
    3e18:	8a 89       	ldd	r24, Y+18	; 0x12
    3e1a:	48 2f       	mov	r20, r24
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e20:	28 2f       	mov	r18, r24
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	ca 01       	movw	r24, r20
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	88 0f       	add	r24, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	82 0f       	add	r24, r18
    3e30:	93 1f       	adc	r25, r19
    3e32:	fc 01       	movw	r30, r24
    3e34:	e5 50       	subi	r30, 0x05	; 5
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	88 8b       	std	Y+16, r24	; 0x10
				Local_u8Flag = 1 ;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	8f 87       	std	Y+15, r24	; 0x0f
    3e40:	07 c0       	rjmp	.+14     	; 0x3e50 <KPD_u8GetPressedKey+0x1da>
	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    3e42:	8a 89       	ldd	r24, Y+18	; 0x12
    3e44:	8f 5f       	subi	r24, 0xFF	; 255
    3e46:	8a 8b       	std	Y+18, r24	; 0x12
    3e48:	8a 89       	ldd	r24, Y+18	; 0x12
    3e4a:	84 30       	cpi	r24, 0x04	; 4
    3e4c:	08 f4       	brcc	.+2      	; 0x3e50 <KPD_u8GetPressedKey+0x1da>
    3e4e:	41 cf       	rjmp	.-382    	; 0x3cd2 <KPD_u8GetPressedKey+0x5c>
				break ;
			}

		}
		//deactivate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , HIGH);
    3e50:	8b 89       	ldd	r24, Y+19	; 0x13
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	ce 01       	movw	r24, r28
    3e58:	44 96       	adiw	r24, 0x14	; 20
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	e2 0f       	add	r30, r18
    3e5e:	f3 1f       	adc	r31, r19
    3e60:	90 81       	ld	r25, Z
    3e62:	82 e0       	ldi	r24, 0x02	; 2
    3e64:	69 2f       	mov	r22, r25
    3e66:	41 e0       	ldi	r20, 0x01	; 1
    3e68:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
		if(Local_u8Flag==1)
    3e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e6e:	81 30       	cpi	r24, 0x01	; 1
    3e70:	39 f0       	breq	.+14     	; 0x3e80 <KPD_u8GetPressedKey+0x20a>
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
	u8 Local_u8Flag =0 ;

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    3e72:	8b 89       	ldd	r24, Y+19	; 0x13
    3e74:	8f 5f       	subi	r24, 0xFF	; 255
    3e76:	8b 8b       	std	Y+19, r24	; 0x13
    3e78:	8b 89       	ldd	r24, Y+19	; 0x13
    3e7a:	84 30       	cpi	r24, 0x04	; 4
    3e7c:	08 f4       	brcc	.+2      	; 0x3e80 <KPD_u8GetPressedKey+0x20a>
    3e7e:	19 cf       	rjmp	.-462    	; 0x3cb2 <KPD_u8GetPressedKey+0x3c>
		if(Local_u8Flag==1)
		{
			break ;
		}
	}
	return Local_PressedKey ;
    3e80:	88 89       	ldd	r24, Y+16	; 0x10
}
    3e82:	6b 96       	adiw	r28, 0x1b	; 27
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	08 95       	ret

00003e94 <DCM_voidInit>:
#include"DCM_private.h"
#include"DCM_interface.h"


void DCM_voidInit(void)
{
    3e94:	df 93       	push	r29
    3e96:	cf 93       	push	r28
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DCM_PORT , DCM_C1 , OUTPUT) ;
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	41 e0       	ldi	r20, 0x01	; 1
    3ea2:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCM_PORT , DCM_C2 , OUTPUT) ;
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	61 e0       	ldi	r22, 0x01	; 1
    3eaa:	41 e0       	ldi	r20, 0x01	; 1
    3eac:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>

}
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <DCM_voidDirection>:

void DCM_voidDirection(u8 Copy_u8Direction)
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <DCM_voidDirection+0x6>
    3ebc:	0f 92       	push	r0
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Direction)
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	28 2f       	mov	r18, r24
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	3b 83       	std	Y+3, r19	; 0x03
    3ecc:	2a 83       	std	Y+2, r18	; 0x02
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	81 f0       	breq	.+32     	; 0x3ef6 <DCM_voidDirection+0x40>
    3ed6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ed8:	3b 81       	ldd	r19, Y+3	; 0x03
    3eda:	21 30       	cpi	r18, 0x01	; 1
    3edc:	31 05       	cpc	r19, r1
    3ede:	a9 f4       	brne	.+42     	; 0x3f0a <DCM_voidDirection+0x54>
	{
	case ClockWise :
		DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,HIGH);
    3ee0:	82 e0       	ldi	r24, 0x02	; 2
    3ee2:	60 e0       	ldi	r22, 0x00	; 0
    3ee4:	41 e0       	ldi	r20, 0x01	; 1
    3ee6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
		DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,LOW);
    3eea:	82 e0       	ldi	r24, 0x02	; 2
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    3ef4:	0a c0       	rjmp	.+20     	; 0x3f0a <DCM_voidDirection+0x54>
		break ;
	case AntiClockWise :
		DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,HIGH);
    3ef6:	82 e0       	ldi	r24, 0x02	; 2
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	41 e0       	ldi	r20, 0x01	; 1
    3efc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
		DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,LOW);
    3f00:	82 e0       	ldi	r24, 0x02	; 2
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	40 e0       	ldi	r20, 0x00	; 0
    3f06:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
		break;
	default :
		break ;
	}

}
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	0f 90       	pop	r0
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <DCM_voidStop>:
void DCM_voidStop(void)
{
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,LOW);
    3f1e:	82 e0       	ldi	r24, 0x02	; 2
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,LOW);
    3f28:	82 e0       	ldi	r24, 0x02	; 2
    3f2a:	61 e0       	ldi	r22, 0x01	; 1
    3f2c:	40 e0       	ldi	r20, 0x00	; 0
    3f2e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
}
    3f32:	cf 91       	pop	r28
    3f34:	df 91       	pop	r29
    3f36:	08 95       	ret

00003f38 <main>:


void Emergeny(void);

int main()
{
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	c9 5e       	subi	r28, 0xE9	; 233
    3f46:	d0 40       	sbci	r29, 0x00	; 0
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
	u8 Recieved ;
	u32 Read1 ;
	u16 Password = 1234 ;
    3f52:	fe 01       	movw	r30, r28
    3f54:	ed 51       	subi	r30, 0x1D	; 29
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	82 ed       	ldi	r24, 0xD2	; 210
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	91 83       	std	Z+1, r25	; 0x01
    3f5e:	80 83       	st	Z, r24
	u16 User_Pass , Try_Again=0 ;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e1 52       	subi	r30, 0x21	; 33
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	11 82       	std	Z+1, r1	; 0x01
    3f68:	10 82       	st	Z, r1
	u8 pass1 , pass2 , pass3 , pass4 ;
	STP_voidInit();
    3f6a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <STP_voidInit>
	KPD_voidInit();
    3f6e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <KPD_voidInit>
	LCD_voidInit();
    3f72:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_voidInit>
	//buzzer
	DIO_voidSetPinDirection(PORTD , PIN3 , OUTPUT);
    3f76:	83 e0       	ldi	r24, 0x03	; 3
    3f78:	63 e0       	ldi	r22, 0x03	; 3
    3f7a:	41 e0       	ldi	r20, 0x01	; 1
    3f7c:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(PORTD , PIN3 , LOW);
    3f80:	83 e0       	ldi	r24, 0x03	; 3
    3f82:	63 e0       	ldi	r22, 0x03	; 3
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
	//uart
	DIO_voidSetPinDirection(PORTD , PIN0 , INPUT);
    3f8a:	83 e0       	ldi	r24, 0x03	; 3
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	40 e0       	ldi	r20, 0x00	; 0
    3f90:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD , PIN1 , OUTPUT);
    3f94:	83 e0       	ldi	r24, 0x03	; 3
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	UART_voidInit();
    3f9e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UART_voidInit>

	//light sensor
	ADC_voidInit();
    3fa2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <ADC_voidInit>
	LED_voidInitOneLed(PORTA , PIN0 ) ;
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	0e 94 b4 18 	call	0x3168	; 0x3168 <LED_voidInitOneLed>

	//tempsensor
	DIO_voidSetPinDirection(PORTA , PIN7 , OUTPUT);
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	67 e0       	ldi	r22, 0x07	; 7
    3fb2:	41 e0       	ldi	r20, 0x01	; 1
    3fb4:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	u32 Read2 ;
	u32 Temp ;

	//interrupt
	DIO_voidSetPinDirection(PORTD , PIN2 , INPUT) ;
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	62 e0       	ldi	r22, 0x02	; 2
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(PORTD , PIN2 , HIGH);
    3fc2:	83 e0       	ldi	r24, 0x03	; 3
    3fc4:	62 e0       	ldi	r22, 0x02	; 2
    3fc6:	41 e0       	ldi	r20, 0x01	; 1
    3fc8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>

	GIE_voidEnable();
    3fcc:	0e 94 b4 08 	call	0x1168	; 0x1168 <GIE_voidEnable>


	EXTI_voidEnable(INT0 , FALLING_EDGE);
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <EXTI_voidEnable>

	EXTI_voidSetCallBack_INT0(&Emergeny);
    3fd8:	8a ef       	ldi	r24, 0xFA	; 250
    3fda:	9a e2       	ldi	r25, 0x2A	; 42
    3fdc:	0e 94 41 0a 	call	0x1482	; 0x1482 <EXTI_voidSetCallBack_INT0>

	jump :
	Try_Again++;
    3fe0:	de 01       	movw	r26, r28
    3fe2:	a1 52       	subi	r26, 0x21	; 33
    3fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e1 52       	subi	r30, 0x21	; 33
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	80 81       	ld	r24, Z
    3fee:	91 81       	ldd	r25, Z+1	; 0x01
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	11 96       	adiw	r26, 0x01	; 1
    3ff4:	9c 93       	st	X, r25
    3ff6:	8e 93       	st	-X, r24
	if(Try_Again==0)
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e1 52       	subi	r30, 0x21	; 33
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	80 81       	ld	r24, Z
    4000:	91 81       	ldd	r25, Z+1	; 0x01
    4002:	00 97       	sbiw	r24, 0x00	; 0
    4004:	19 f4       	brne	.+6      	; 0x400c <main+0xd4>
	{
		UART_voidSendData('a');
    4006:	81 e6       	ldi	r24, 0x61	; 97
    4008:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_voidSendData>
	}
	if(Try_Again==1)
    400c:	fe 01       	movw	r30, r28
    400e:	e1 52       	subi	r30, 0x21	; 33
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	80 81       	ld	r24, Z
    4014:	91 81       	ldd	r25, Z+1	; 0x01
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	91 05       	cpc	r25, r1
    401a:	19 f4       	brne	.+6      	; 0x4022 <main+0xea>
	{
		UART_voidSendData('b');
    401c:	82 e6       	ldi	r24, 0x62	; 98
    401e:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_voidSendData>
	}
	if(Try_Again==2)
    4022:	fe 01       	movw	r30, r28
    4024:	e1 52       	subi	r30, 0x21	; 33
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	82 30       	cpi	r24, 0x02	; 2
    402e:	91 05       	cpc	r25, r1
    4030:	19 f4       	brne	.+6      	; 0x4038 <main+0x100>
	{
		UART_voidSendData('c');
    4032:	83 e6       	ldi	r24, 0x63	; 99
    4034:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_voidSendData>
	}

	while(1)
	{
		LCD_voidCLR();
    4038:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
		LCD_voidSendString("Welcome");
    403c:	80 e6       	ldi	r24, 0x60	; 96
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4044:	fe 01       	movw	r30, r28
    4046:	e1 53       	subi	r30, 0x31	; 49
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	aa e7       	ldi	r26, 0x7A	; 122
    4050:	b4 e4       	ldi	r27, 0x44	; 68
    4052:	80 83       	st	Z, r24
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	a2 83       	std	Z+2, r26	; 0x02
    4058:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405a:	8e 01       	movw	r16, r28
    405c:	05 53       	subi	r16, 0x35	; 53
    405e:	1f 4f       	sbci	r17, 0xFF	; 255
    4060:	fe 01       	movw	r30, r28
    4062:	e1 53       	subi	r30, 0x31	; 49
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	60 81       	ld	r22, Z
    4068:	71 81       	ldd	r23, Z+1	; 0x01
    406a:	82 81       	ldd	r24, Z+2	; 0x02
    406c:	93 81       	ldd	r25, Z+3	; 0x03
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	4a ef       	ldi	r20, 0xFA	; 250
    4074:	54 e4       	ldi	r21, 0x44	; 68
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	f8 01       	movw	r30, r16
    4080:	80 83       	st	Z, r24
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	a2 83       	std	Z+2, r26	; 0x02
    4086:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4088:	fe 01       	movw	r30, r28
    408a:	e5 53       	subi	r30, 0x35	; 53
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e8       	ldi	r20, 0x80	; 128
    409c:	5f e3       	ldi	r21, 0x3F	; 63
    409e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40a2:	88 23       	and	r24, r24
    40a4:	44 f4       	brge	.+16     	; 0x40b6 <main+0x17e>
		__ticks = 1;
    40a6:	fe 01       	movw	r30, r28
    40a8:	e7 53       	subi	r30, 0x37	; 55
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	91 83       	std	Z+1, r25	; 0x01
    40b2:	80 83       	st	Z, r24
    40b4:	64 c0       	rjmp	.+200    	; 0x417e <main+0x246>
	else if (__tmp > 65535)
    40b6:	fe 01       	movw	r30, r28
    40b8:	e5 53       	subi	r30, 0x35	; 53
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	60 81       	ld	r22, Z
    40be:	71 81       	ldd	r23, Z+1	; 0x01
    40c0:	82 81       	ldd	r24, Z+2	; 0x02
    40c2:	93 81       	ldd	r25, Z+3	; 0x03
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	4f e7       	ldi	r20, 0x7F	; 127
    40ca:	57 e4       	ldi	r21, 0x47	; 71
    40cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d0:	18 16       	cp	r1, r24
    40d2:	0c f0       	brlt	.+2      	; 0x40d6 <main+0x19e>
    40d4:	43 c0       	rjmp	.+134    	; 0x415c <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d6:	fe 01       	movw	r30, r28
    40d8:	e1 53       	subi	r30, 0x31	; 49
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e2       	ldi	r20, 0x20	; 32
    40ea:	51 e4       	ldi	r21, 0x41	; 65
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	8e 01       	movw	r16, r28
    40f6:	07 53       	subi	r16, 0x37	; 55
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	bc 01       	movw	r22, r24
    40fc:	cd 01       	movw	r24, r26
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	f8 01       	movw	r30, r16
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	80 83       	st	Z, r24
    410c:	1f c0       	rjmp	.+62     	; 0x414c <main+0x214>
    410e:	fe 01       	movw	r30, r28
    4110:	e9 53       	subi	r30, 0x39	; 57
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	88 ec       	ldi	r24, 0xC8	; 200
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
    411c:	fe 01       	movw	r30, r28
    411e:	e9 53       	subi	r30, 0x39	; 57
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	f1 f7       	brne	.-4      	; 0x4126 <main+0x1ee>
    412a:	fe 01       	movw	r30, r28
    412c:	e9 53       	subi	r30, 0x39	; 57
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4134:	de 01       	movw	r26, r28
    4136:	a7 53       	subi	r26, 0x37	; 55
    4138:	bf 4f       	sbci	r27, 0xFF	; 255
    413a:	fe 01       	movw	r30, r28
    413c:	e7 53       	subi	r30, 0x37	; 55
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	11 96       	adiw	r26, 0x01	; 1
    4148:	9c 93       	st	X, r25
    414a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414c:	fe 01       	movw	r30, r28
    414e:	e7 53       	subi	r30, 0x37	; 55
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	80 81       	ld	r24, Z
    4154:	91 81       	ldd	r25, Z+1	; 0x01
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	d1 f6       	brne	.-76     	; 0x410e <main+0x1d6>
    415a:	27 c0       	rjmp	.+78     	; 0x41aa <main+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415c:	8e 01       	movw	r16, r28
    415e:	07 53       	subi	r16, 0x37	; 55
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
    4162:	fe 01       	movw	r30, r28
    4164:	e5 53       	subi	r30, 0x35	; 53
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	f8 01       	movw	r30, r16
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
    417e:	de 01       	movw	r26, r28
    4180:	ab 53       	subi	r26, 0x3B	; 59
    4182:	bf 4f       	sbci	r27, 0xFF	; 255
    4184:	fe 01       	movw	r30, r28
    4186:	e7 53       	subi	r30, 0x37	; 55
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	8d 93       	st	X+, r24
    4190:	9c 93       	st	X, r25
    4192:	fe 01       	movw	r30, r28
    4194:	eb 53       	subi	r30, 0x3B	; 59
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	80 81       	ld	r24, Z
    419a:	91 81       	ldd	r25, Z+1	; 0x01
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	f1 f7       	brne	.-4      	; 0x419c <main+0x264>
    41a0:	fe 01       	movw	r30, r28
    41a2:	eb 53       	subi	r30, 0x3B	; 59
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_voidCLR();
    41aa:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
		LCD_voidSendString("Enter password");
    41ae:	88 e6       	ldi	r24, 0x68	; 104
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    41b6:	fe 01       	movw	r30, r28
    41b8:	ef 53       	subi	r30, 0x3F	; 63
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	aa e7       	ldi	r26, 0x7A	; 122
    41c2:	b4 e4       	ldi	r27, 0x44	; 68
    41c4:	80 83       	st	Z, r24
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	a2 83       	std	Z+2, r26	; 0x02
    41ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41cc:	8e 01       	movw	r16, r28
    41ce:	03 54       	subi	r16, 0x43	; 67
    41d0:	1f 4f       	sbci	r17, 0xFF	; 255
    41d2:	fe 01       	movw	r30, r28
    41d4:	ef 53       	subi	r30, 0x3F	; 63
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	60 81       	ld	r22, Z
    41da:	71 81       	ldd	r23, Z+1	; 0x01
    41dc:	82 81       	ldd	r24, Z+2	; 0x02
    41de:	93 81       	ldd	r25, Z+3	; 0x03
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	4a ef       	ldi	r20, 0xFA	; 250
    41e6:	54 e4       	ldi	r21, 0x44	; 68
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	f8 01       	movw	r30, r16
    41f2:	80 83       	st	Z, r24
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	a2 83       	std	Z+2, r26	; 0x02
    41f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41fa:	fe 01       	movw	r30, r28
    41fc:	e3 54       	subi	r30, 0x43	; 67
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e8       	ldi	r20, 0x80	; 128
    420e:	5f e3       	ldi	r21, 0x3F	; 63
    4210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4214:	88 23       	and	r24, r24
    4216:	44 f4       	brge	.+16     	; 0x4228 <main+0x2f0>
		__ticks = 1;
    4218:	fe 01       	movw	r30, r28
    421a:	e5 54       	subi	r30, 0x45	; 69
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	91 83       	std	Z+1, r25	; 0x01
    4224:	80 83       	st	Z, r24
    4226:	64 c0       	rjmp	.+200    	; 0x42f0 <main+0x3b8>
	else if (__tmp > 65535)
    4228:	fe 01       	movw	r30, r28
    422a:	e3 54       	subi	r30, 0x43	; 67
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	60 81       	ld	r22, Z
    4230:	71 81       	ldd	r23, Z+1	; 0x01
    4232:	82 81       	ldd	r24, Z+2	; 0x02
    4234:	93 81       	ldd	r25, Z+3	; 0x03
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	3f ef       	ldi	r19, 0xFF	; 255
    423a:	4f e7       	ldi	r20, 0x7F	; 127
    423c:	57 e4       	ldi	r21, 0x47	; 71
    423e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4242:	18 16       	cp	r1, r24
    4244:	0c f0       	brlt	.+2      	; 0x4248 <main+0x310>
    4246:	43 c0       	rjmp	.+134    	; 0x42ce <main+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4248:	fe 01       	movw	r30, r28
    424a:	ef 53       	subi	r30, 0x3F	; 63
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e2       	ldi	r20, 0x20	; 32
    425c:	51 e4       	ldi	r21, 0x41	; 65
    425e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	8e 01       	movw	r16, r28
    4268:	05 54       	subi	r16, 0x45	; 69
    426a:	1f 4f       	sbci	r17, 0xFF	; 255
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	f8 01       	movw	r30, r16
    427a:	91 83       	std	Z+1, r25	; 0x01
    427c:	80 83       	st	Z, r24
    427e:	1f c0       	rjmp	.+62     	; 0x42be <main+0x386>
    4280:	fe 01       	movw	r30, r28
    4282:	e7 54       	subi	r30, 0x47	; 71
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	88 ec       	ldi	r24, 0xC8	; 200
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	91 83       	std	Z+1, r25	; 0x01
    428c:	80 83       	st	Z, r24
    428e:	fe 01       	movw	r30, r28
    4290:	e7 54       	subi	r30, 0x47	; 71
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	80 81       	ld	r24, Z
    4296:	91 81       	ldd	r25, Z+1	; 0x01
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	f1 f7       	brne	.-4      	; 0x4298 <main+0x360>
    429c:	fe 01       	movw	r30, r28
    429e:	e7 54       	subi	r30, 0x47	; 71
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	91 83       	std	Z+1, r25	; 0x01
    42a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	de 01       	movw	r26, r28
    42a8:	a5 54       	subi	r26, 0x45	; 69
    42aa:	bf 4f       	sbci	r27, 0xFF	; 255
    42ac:	fe 01       	movw	r30, r28
    42ae:	e5 54       	subi	r30, 0x45	; 69
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	80 81       	ld	r24, Z
    42b4:	91 81       	ldd	r25, Z+1	; 0x01
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	11 96       	adiw	r26, 0x01	; 1
    42ba:	9c 93       	st	X, r25
    42bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42be:	fe 01       	movw	r30, r28
    42c0:	e5 54       	subi	r30, 0x45	; 69
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	80 81       	ld	r24, Z
    42c6:	91 81       	ldd	r25, Z+1	; 0x01
    42c8:	00 97       	sbiw	r24, 0x00	; 0
    42ca:	d1 f6       	brne	.-76     	; 0x4280 <main+0x348>
    42cc:	27 c0       	rjmp	.+78     	; 0x431c <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ce:	8e 01       	movw	r16, r28
    42d0:	05 54       	subi	r16, 0x45	; 69
    42d2:	1f 4f       	sbci	r17, 0xFF	; 255
    42d4:	fe 01       	movw	r30, r28
    42d6:	e3 54       	subi	r30, 0x43	; 67
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	f8 01       	movw	r30, r16
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
    42f0:	de 01       	movw	r26, r28
    42f2:	a9 54       	subi	r26, 0x49	; 73
    42f4:	bf 4f       	sbci	r27, 0xFF	; 255
    42f6:	fe 01       	movw	r30, r28
    42f8:	e5 54       	subi	r30, 0x45	; 69
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	80 81       	ld	r24, Z
    42fe:	91 81       	ldd	r25, Z+1	; 0x01
    4300:	8d 93       	st	X+, r24
    4302:	9c 93       	st	X, r25
    4304:	fe 01       	movw	r30, r28
    4306:	e9 54       	subi	r30, 0x49	; 73
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	80 81       	ld	r24, Z
    430c:	91 81       	ldd	r25, Z+1	; 0x01
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	f1 f7       	brne	.-4      	; 0x430e <main+0x3d6>
    4312:	fe 01       	movw	r30, r28
    4314:	e9 54       	subi	r30, 0x49	; 73
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_voidGoToXY(1,0);
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	60 e0       	ldi	r22, 0x00	; 0
    4320:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidGoToXY>
		while(1)
		{
			pass1 = KPD_u8GetPressedKey();
    4324:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <KPD_u8GetPressedKey>
    4328:	fe 01       	movw	r30, r28
    432a:	e2 52       	subi	r30, 0x22	; 34
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	80 83       	st	Z, r24

			if((pass1!=0xff))
    4330:	fe 01       	movw	r30, r28
    4332:	e2 52       	subi	r30, 0x22	; 34
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	80 81       	ld	r24, Z
    4338:	8f 3f       	cpi	r24, 0xFF	; 255
    433a:	a1 f3       	breq	.-24     	; 0x4324 <main+0x3ec>
			{
				LCD_voidSendChar('*');
    433c:	8a e2       	ldi	r24, 0x2A	; 42
    433e:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass2 = KPD_u8GetPressedKey();
    4342:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <KPD_u8GetPressedKey>
    4346:	fe 01       	movw	r30, r28
    4348:	e3 52       	subi	r30, 0x23	; 35
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	80 83       	st	Z, r24

			if((pass2!=0xff))
    434e:	fe 01       	movw	r30, r28
    4350:	e3 52       	subi	r30, 0x23	; 35
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	8f 3f       	cpi	r24, 0xFF	; 255
    4358:	a1 f3       	breq	.-24     	; 0x4342 <main+0x40a>
			{
				LCD_voidSendChar('*');
    435a:	8a e2       	ldi	r24, 0x2A	; 42
    435c:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass3 = KPD_u8GetPressedKey();
    4360:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <KPD_u8GetPressedKey>
    4364:	fe 01       	movw	r30, r28
    4366:	e4 52       	subi	r30, 0x24	; 36
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	80 83       	st	Z, r24

			if((pass3!=0xff))
    436c:	fe 01       	movw	r30, r28
    436e:	e4 52       	subi	r30, 0x24	; 36
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	8f 3f       	cpi	r24, 0xFF	; 255
    4376:	a1 f3       	breq	.-24     	; 0x4360 <main+0x428>
			{
				LCD_voidSendChar('*');
    4378:	8a e2       	ldi	r24, 0x2A	; 42
    437a:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass4 = KPD_u8GetPressedKey();
    437e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <KPD_u8GetPressedKey>
    4382:	fe 01       	movw	r30, r28
    4384:	e5 52       	subi	r30, 0x25	; 37
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 83       	st	Z, r24

			if((pass4!=0xff))
    438a:	fe 01       	movw	r30, r28
    438c:	e5 52       	subi	r30, 0x25	; 37
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	80 81       	ld	r24, Z
    4392:	8f 3f       	cpi	r24, 0xFF	; 255
    4394:	a1 f3       	breq	.-24     	; 0x437e <main+0x446>
			{
				LCD_voidSendChar('*');
    4396:	8a e2       	ldi	r24, 0x2A	; 42
    4398:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_voidSendChar>
				break ;
			}

		}

		User_Pass = (pass1*1000+pass2*100+pass3*10+pass4);
    439c:	fe 01       	movw	r30, r28
    439e:	e2 52       	subi	r30, 0x22	; 34
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	88 ee       	ldi	r24, 0xE8	; 232
    43aa:	93 e0       	ldi	r25, 0x03	; 3
    43ac:	28 9f       	mul	r18, r24
    43ae:	a0 01       	movw	r20, r0
    43b0:	29 9f       	mul	r18, r25
    43b2:	50 0d       	add	r21, r0
    43b4:	38 9f       	mul	r19, r24
    43b6:	50 0d       	add	r21, r0
    43b8:	11 24       	eor	r1, r1
    43ba:	fe 01       	movw	r30, r28
    43bc:	e3 52       	subi	r30, 0x23	; 35
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	80 81       	ld	r24, Z
    43c2:	28 2f       	mov	r18, r24
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	84 e6       	ldi	r24, 0x64	; 100
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	bc 01       	movw	r22, r24
    43cc:	26 9f       	mul	r18, r22
    43ce:	c0 01       	movw	r24, r0
    43d0:	27 9f       	mul	r18, r23
    43d2:	90 0d       	add	r25, r0
    43d4:	36 9f       	mul	r19, r22
    43d6:	90 0d       	add	r25, r0
    43d8:	11 24       	eor	r1, r1
    43da:	48 0f       	add	r20, r24
    43dc:	59 1f       	adc	r21, r25
    43de:	fe 01       	movw	r30, r28
    43e0:	e4 52       	subi	r30, 0x24	; 36
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	80 81       	ld	r24, Z
    43e6:	88 2f       	mov	r24, r24
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	9c 01       	movw	r18, r24
    43ec:	22 0f       	add	r18, r18
    43ee:	33 1f       	adc	r19, r19
    43f0:	c9 01       	movw	r24, r18
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	82 0f       	add	r24, r18
    43fc:	93 1f       	adc	r25, r19
    43fe:	9a 01       	movw	r18, r20
    4400:	28 0f       	add	r18, r24
    4402:	39 1f       	adc	r19, r25
    4404:	fe 01       	movw	r30, r28
    4406:	e5 52       	subi	r30, 0x25	; 37
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 81       	ld	r24, Z
    440c:	88 2f       	mov	r24, r24
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	82 0f       	add	r24, r18
    4412:	93 1f       	adc	r25, r19
    4414:	fe 01       	movw	r30, r28
    4416:	ef 51       	subi	r30, 0x1F	; 31
    4418:	ff 4f       	sbci	r31, 0xFF	; 255
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
		if((User_Pass!=Password)&&(Try_Again<3))
    441e:	fe 01       	movw	r30, r28
    4420:	ef 51       	subi	r30, 0x1F	; 31
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	de 01       	movw	r26, r28
    4426:	ad 51       	subi	r26, 0x1D	; 29
    4428:	bf 4f       	sbci	r27, 0xFF	; 255
    442a:	20 81       	ld	r18, Z
    442c:	31 81       	ldd	r19, Z+1	; 0x01
    442e:	8d 91       	ld	r24, X+
    4430:	9c 91       	ld	r25, X
    4432:	11 97       	sbiw	r26, 0x01	; 1
    4434:	28 17       	cp	r18, r24
    4436:	39 07       	cpc	r19, r25
    4438:	09 f4       	brne	.+2      	; 0x443c <main+0x504>
    443a:	7d c1       	rjmp	.+762    	; 0x4736 <main+0x7fe>
			{
				LCD_voidSendChar('*');
				break ;
			}

		}
    443c:	fe 01       	movw	r30, r28
    443e:	e1 52       	subi	r30, 0x21	; 33
    4440:	ff 4f       	sbci	r31, 0xFF	; 255
    4442:	80 81       	ld	r24, Z
    4444:	91 81       	ldd	r25, Z+1	; 0x01
    4446:	83 30       	cpi	r24, 0x03	; 3
    4448:	91 05       	cpc	r25, r1
    444a:	08 f0       	brcs	.+2      	; 0x444e <main+0x516>
    444c:	74 c1       	rjmp	.+744    	; 0x4736 <main+0x7fe>

		User_Pass = (pass1*1000+pass2*100+pass3*10+pass4);
		if((User_Pass!=Password)&&(Try_Again<3))
		{
			LCD_voidCLR();
    444e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Wrong Password");
    4452:	87 e7       	ldi	r24, 0x77	; 119
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    445a:	fe 01       	movw	r30, r28
    445c:	ed 54       	subi	r30, 0x4D	; 77
    445e:	ff 4f       	sbci	r31, 0xFF	; 255
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	aa e7       	ldi	r26, 0x7A	; 122
    4466:	b4 e4       	ldi	r27, 0x44	; 68
    4468:	80 83       	st	Z, r24
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	a2 83       	std	Z+2, r26	; 0x02
    446e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4470:	8e 01       	movw	r16, r28
    4472:	01 55       	subi	r16, 0x51	; 81
    4474:	1f 4f       	sbci	r17, 0xFF	; 255
    4476:	fe 01       	movw	r30, r28
    4478:	ed 54       	subi	r30, 0x4D	; 77
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	4a ef       	ldi	r20, 0xFA	; 250
    448a:	54 e4       	ldi	r21, 0x44	; 68
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	f8 01       	movw	r30, r16
    4496:	80 83       	st	Z, r24
    4498:	91 83       	std	Z+1, r25	; 0x01
    449a:	a2 83       	std	Z+2, r26	; 0x02
    449c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    449e:	fe 01       	movw	r30, r28
    44a0:	e1 55       	subi	r30, 0x51	; 81
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	40 e8       	ldi	r20, 0x80	; 128
    44b2:	5f e3       	ldi	r21, 0x3F	; 63
    44b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44b8:	88 23       	and	r24, r24
    44ba:	44 f4       	brge	.+16     	; 0x44cc <main+0x594>
		__ticks = 1;
    44bc:	fe 01       	movw	r30, r28
    44be:	e3 55       	subi	r30, 0x53	; 83
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	91 83       	std	Z+1, r25	; 0x01
    44c8:	80 83       	st	Z, r24
    44ca:	64 c0       	rjmp	.+200    	; 0x4594 <main+0x65c>
	else if (__tmp > 65535)
    44cc:	fe 01       	movw	r30, r28
    44ce:	e1 55       	subi	r30, 0x51	; 81
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	60 81       	ld	r22, Z
    44d4:	71 81       	ldd	r23, Z+1	; 0x01
    44d6:	82 81       	ldd	r24, Z+2	; 0x02
    44d8:	93 81       	ldd	r25, Z+3	; 0x03
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	3f ef       	ldi	r19, 0xFF	; 255
    44de:	4f e7       	ldi	r20, 0x7F	; 127
    44e0:	57 e4       	ldi	r21, 0x47	; 71
    44e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44e6:	18 16       	cp	r1, r24
    44e8:	0c f0       	brlt	.+2      	; 0x44ec <main+0x5b4>
    44ea:	43 c0       	rjmp	.+134    	; 0x4572 <main+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ec:	fe 01       	movw	r30, r28
    44ee:	ed 54       	subi	r30, 0x4D	; 77
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	60 81       	ld	r22, Z
    44f4:	71 81       	ldd	r23, Z+1	; 0x01
    44f6:	82 81       	ldd	r24, Z+2	; 0x02
    44f8:	93 81       	ldd	r25, Z+3	; 0x03
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	40 e2       	ldi	r20, 0x20	; 32
    4500:	51 e4       	ldi	r21, 0x41	; 65
    4502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	8e 01       	movw	r16, r28
    450c:	03 55       	subi	r16, 0x53	; 83
    450e:	1f 4f       	sbci	r17, 0xFF	; 255
    4510:	bc 01       	movw	r22, r24
    4512:	cd 01       	movw	r24, r26
    4514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	f8 01       	movw	r30, r16
    451e:	91 83       	std	Z+1, r25	; 0x01
    4520:	80 83       	st	Z, r24
    4522:	1f c0       	rjmp	.+62     	; 0x4562 <main+0x62a>
    4524:	fe 01       	movw	r30, r28
    4526:	e5 55       	subi	r30, 0x55	; 85
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	88 ec       	ldi	r24, 0xC8	; 200
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	91 83       	std	Z+1, r25	; 0x01
    4530:	80 83       	st	Z, r24
    4532:	fe 01       	movw	r30, r28
    4534:	e5 55       	subi	r30, 0x55	; 85
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 81       	ld	r24, Z
    453a:	91 81       	ldd	r25, Z+1	; 0x01
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <main+0x604>
    4540:	fe 01       	movw	r30, r28
    4542:	e5 55       	subi	r30, 0x55	; 85
    4544:	ff 4f       	sbci	r31, 0xFF	; 255
    4546:	91 83       	std	Z+1, r25	; 0x01
    4548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    454a:	de 01       	movw	r26, r28
    454c:	a3 55       	subi	r26, 0x53	; 83
    454e:	bf 4f       	sbci	r27, 0xFF	; 255
    4550:	fe 01       	movw	r30, r28
    4552:	e3 55       	subi	r30, 0x53	; 83
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	80 81       	ld	r24, Z
    4558:	91 81       	ldd	r25, Z+1	; 0x01
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	11 96       	adiw	r26, 0x01	; 1
    455e:	9c 93       	st	X, r25
    4560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4562:	fe 01       	movw	r30, r28
    4564:	e3 55       	subi	r30, 0x53	; 83
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	91 81       	ldd	r25, Z+1	; 0x01
    456c:	00 97       	sbiw	r24, 0x00	; 0
    456e:	d1 f6       	brne	.-76     	; 0x4524 <main+0x5ec>
    4570:	27 c0       	rjmp	.+78     	; 0x45c0 <main+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4572:	8e 01       	movw	r16, r28
    4574:	03 55       	subi	r16, 0x53	; 83
    4576:	1f 4f       	sbci	r17, 0xFF	; 255
    4578:	fe 01       	movw	r30, r28
    457a:	e1 55       	subi	r30, 0x51	; 81
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	82 81       	ldd	r24, Z+2	; 0x02
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	f8 01       	movw	r30, r16
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	80 83       	st	Z, r24
    4594:	de 01       	movw	r26, r28
    4596:	a7 55       	subi	r26, 0x57	; 87
    4598:	bf 4f       	sbci	r27, 0xFF	; 255
    459a:	fe 01       	movw	r30, r28
    459c:	e3 55       	subi	r30, 0x53	; 83
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	80 81       	ld	r24, Z
    45a2:	91 81       	ldd	r25, Z+1	; 0x01
    45a4:	8d 93       	st	X+, r24
    45a6:	9c 93       	st	X, r25
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 55       	subi	r30, 0x57	; 87
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 81       	ld	r24, Z
    45b0:	91 81       	ldd	r25, Z+1	; 0x01
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	f1 f7       	brne	.-4      	; 0x45b2 <main+0x67a>
    45b6:	fe 01       	movw	r30, r28
    45b8:	e7 55       	subi	r30, 0x57	; 87
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_voidCLR();
    45c0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Try again");
    45c4:	86 e8       	ldi	r24, 0x86	; 134
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    45cc:	fe 01       	movw	r30, r28
    45ce:	eb 55       	subi	r30, 0x5B	; 91
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	aa e7       	ldi	r26, 0x7A	; 122
    45d8:	b4 e4       	ldi	r27, 0x44	; 68
    45da:	80 83       	st	Z, r24
    45dc:	91 83       	std	Z+1, r25	; 0x01
    45de:	a2 83       	std	Z+2, r26	; 0x02
    45e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e2:	8e 01       	movw	r16, r28
    45e4:	0f 55       	subi	r16, 0x5F	; 95
    45e6:	1f 4f       	sbci	r17, 0xFF	; 255
    45e8:	fe 01       	movw	r30, r28
    45ea:	eb 55       	subi	r30, 0x5B	; 91
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	60 81       	ld	r22, Z
    45f0:	71 81       	ldd	r23, Z+1	; 0x01
    45f2:	82 81       	ldd	r24, Z+2	; 0x02
    45f4:	93 81       	ldd	r25, Z+3	; 0x03
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	4a ef       	ldi	r20, 0xFA	; 250
    45fc:	54 e4       	ldi	r21, 0x44	; 68
    45fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4602:	dc 01       	movw	r26, r24
    4604:	cb 01       	movw	r24, r22
    4606:	f8 01       	movw	r30, r16
    4608:	80 83       	st	Z, r24
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	a2 83       	std	Z+2, r26	; 0x02
    460e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4610:	fe 01       	movw	r30, r28
    4612:	ef 55       	subi	r30, 0x5F	; 95
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	60 81       	ld	r22, Z
    4618:	71 81       	ldd	r23, Z+1	; 0x01
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	40 e8       	ldi	r20, 0x80	; 128
    4624:	5f e3       	ldi	r21, 0x3F	; 63
    4626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    462a:	88 23       	and	r24, r24
    462c:	44 f4       	brge	.+16     	; 0x463e <main+0x706>
		__ticks = 1;
    462e:	fe 01       	movw	r30, r28
    4630:	e1 56       	subi	r30, 0x61	; 97
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	80 83       	st	Z, r24
    463c:	64 c0       	rjmp	.+200    	; 0x4706 <main+0x7ce>
	else if (__tmp > 65535)
    463e:	fe 01       	movw	r30, r28
    4640:	ef 55       	subi	r30, 0x5F	; 95
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	60 81       	ld	r22, Z
    4646:	71 81       	ldd	r23, Z+1	; 0x01
    4648:	82 81       	ldd	r24, Z+2	; 0x02
    464a:	93 81       	ldd	r25, Z+3	; 0x03
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	3f ef       	ldi	r19, 0xFF	; 255
    4650:	4f e7       	ldi	r20, 0x7F	; 127
    4652:	57 e4       	ldi	r21, 0x47	; 71
    4654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4658:	18 16       	cp	r1, r24
    465a:	0c f0       	brlt	.+2      	; 0x465e <main+0x726>
    465c:	43 c0       	rjmp	.+134    	; 0x46e4 <main+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    465e:	fe 01       	movw	r30, r28
    4660:	eb 55       	subi	r30, 0x5B	; 91
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	60 81       	ld	r22, Z
    4666:	71 81       	ldd	r23, Z+1	; 0x01
    4668:	82 81       	ldd	r24, Z+2	; 0x02
    466a:	93 81       	ldd	r25, Z+3	; 0x03
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	40 e2       	ldi	r20, 0x20	; 32
    4672:	51 e4       	ldi	r21, 0x41	; 65
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	8e 01       	movw	r16, r28
    467e:	01 56       	subi	r16, 0x61	; 97
    4680:	1f 4f       	sbci	r17, 0xFF	; 255
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	f8 01       	movw	r30, r16
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	80 83       	st	Z, r24
    4694:	1f c0       	rjmp	.+62     	; 0x46d4 <main+0x79c>
    4696:	fe 01       	movw	r30, r28
    4698:	e3 56       	subi	r30, 0x63	; 99
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	88 ec       	ldi	r24, 0xC8	; 200
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	91 83       	std	Z+1, r25	; 0x01
    46a2:	80 83       	st	Z, r24
    46a4:	fe 01       	movw	r30, r28
    46a6:	e3 56       	subi	r30, 0x63	; 99
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	80 81       	ld	r24, Z
    46ac:	91 81       	ldd	r25, Z+1	; 0x01
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <main+0x776>
    46b2:	fe 01       	movw	r30, r28
    46b4:	e3 56       	subi	r30, 0x63	; 99
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	91 83       	std	Z+1, r25	; 0x01
    46ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46bc:	de 01       	movw	r26, r28
    46be:	a1 56       	subi	r26, 0x61	; 97
    46c0:	bf 4f       	sbci	r27, 0xFF	; 255
    46c2:	fe 01       	movw	r30, r28
    46c4:	e1 56       	subi	r30, 0x61	; 97
    46c6:	ff 4f       	sbci	r31, 0xFF	; 255
    46c8:	80 81       	ld	r24, Z
    46ca:	91 81       	ldd	r25, Z+1	; 0x01
    46cc:	01 97       	sbiw	r24, 0x01	; 1
    46ce:	11 96       	adiw	r26, 0x01	; 1
    46d0:	9c 93       	st	X, r25
    46d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d4:	fe 01       	movw	r30, r28
    46d6:	e1 56       	subi	r30, 0x61	; 97
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 81       	ld	r24, Z
    46dc:	91 81       	ldd	r25, Z+1	; 0x01
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	d1 f6       	brne	.-76     	; 0x4696 <main+0x75e>
    46e2:	7e cc       	rjmp	.-1796   	; 0x3fe0 <main+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e4:	8e 01       	movw	r16, r28
    46e6:	01 56       	subi	r16, 0x61	; 97
    46e8:	1f 4f       	sbci	r17, 0xFF	; 255
    46ea:	fe 01       	movw	r30, r28
    46ec:	ef 55       	subi	r30, 0x5F	; 95
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	60 81       	ld	r22, Z
    46f2:	71 81       	ldd	r23, Z+1	; 0x01
    46f4:	82 81       	ldd	r24, Z+2	; 0x02
    46f6:	93 81       	ldd	r25, Z+3	; 0x03
    46f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	f8 01       	movw	r30, r16
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
    4706:	de 01       	movw	r26, r28
    4708:	a5 56       	subi	r26, 0x65	; 101
    470a:	bf 4f       	sbci	r27, 0xFF	; 255
    470c:	fe 01       	movw	r30, r28
    470e:	e1 56       	subi	r30, 0x61	; 97
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	80 81       	ld	r24, Z
    4714:	91 81       	ldd	r25, Z+1	; 0x01
    4716:	11 96       	adiw	r26, 0x01	; 1
    4718:	9c 93       	st	X, r25
    471a:	8e 93       	st	-X, r24
    471c:	fe 01       	movw	r30, r28
    471e:	e5 56       	subi	r30, 0x65	; 101
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	80 81       	ld	r24, Z
    4724:	91 81       	ldd	r25, Z+1	; 0x01
    4726:	01 97       	sbiw	r24, 0x01	; 1
    4728:	f1 f7       	brne	.-4      	; 0x4726 <main+0x7ee>
    472a:	fe 01       	movw	r30, r28
    472c:	e5 56       	subi	r30, 0x65	; 101
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	55 cc       	rjmp	.-1878   	; 0x3fe0 <main+0xa8>
			_delay_ms(1000);
			goto jump ;
		}
		else if((User_Pass!=Password)&&(Try_Again=3))
    4736:	fe 01       	movw	r30, r28
    4738:	ef 51       	subi	r30, 0x1F	; 31
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	de 01       	movw	r26, r28
    473e:	ad 51       	subi	r26, 0x1D	; 29
    4740:	bf 4f       	sbci	r27, 0xFF	; 255
    4742:	20 81       	ld	r18, Z
    4744:	31 81       	ldd	r19, Z+1	; 0x01
    4746:	8d 91       	ld	r24, X+
    4748:	9c 91       	ld	r25, X
    474a:	11 97       	sbiw	r26, 0x01	; 1
    474c:	28 17       	cp	r18, r24
    474e:	39 07       	cpc	r19, r25
    4750:	09 f4       	brne	.+2      	; 0x4754 <main+0x81c>
    4752:	90 c1       	rjmp	.+800    	; 0x4a74 <main+0xb3c>
    4754:	fe 01       	movw	r30, r28
    4756:	e1 52       	subi	r30, 0x21	; 33
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	83 e0       	ldi	r24, 0x03	; 3
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	80 83       	st	Z, r24
		{
			UART_voidSendData('d');
    4762:	84 e6       	ldi	r24, 0x64	; 100
    4764:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_voidSendData>
			LCD_voidCLR();
    4768:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("NoMoreTries");
    476c:	80 e9       	ldi	r24, 0x90	; 144
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4774:	fe 01       	movw	r30, r28
    4776:	e9 56       	subi	r30, 0x69	; 105
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	aa e7       	ldi	r26, 0x7A	; 122
    4780:	b4 e4       	ldi	r27, 0x44	; 68
    4782:	80 83       	st	Z, r24
    4784:	91 83       	std	Z+1, r25	; 0x01
    4786:	a2 83       	std	Z+2, r26	; 0x02
    4788:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478a:	8e 01       	movw	r16, r28
    478c:	0d 56       	subi	r16, 0x6D	; 109
    478e:	1f 4f       	sbci	r17, 0xFF	; 255
    4790:	fe 01       	movw	r30, r28
    4792:	e9 56       	subi	r30, 0x69	; 105
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	60 81       	ld	r22, Z
    4798:	71 81       	ldd	r23, Z+1	; 0x01
    479a:	82 81       	ldd	r24, Z+2	; 0x02
    479c:	93 81       	ldd	r25, Z+3	; 0x03
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	4a ef       	ldi	r20, 0xFA	; 250
    47a4:	54 e4       	ldi	r21, 0x44	; 68
    47a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	f8 01       	movw	r30, r16
    47b0:	80 83       	st	Z, r24
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	a2 83       	std	Z+2, r26	; 0x02
    47b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47b8:	fe 01       	movw	r30, r28
    47ba:	ed 56       	subi	r30, 0x6D	; 109
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	60 81       	ld	r22, Z
    47c0:	71 81       	ldd	r23, Z+1	; 0x01
    47c2:	82 81       	ldd	r24, Z+2	; 0x02
    47c4:	93 81       	ldd	r25, Z+3	; 0x03
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	40 e8       	ldi	r20, 0x80	; 128
    47cc:	5f e3       	ldi	r21, 0x3F	; 63
    47ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47d2:	88 23       	and	r24, r24
    47d4:	44 f4       	brge	.+16     	; 0x47e6 <main+0x8ae>
		__ticks = 1;
    47d6:	fe 01       	movw	r30, r28
    47d8:	ef 56       	subi	r30, 0x6F	; 111
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
    47e4:	64 c0       	rjmp	.+200    	; 0x48ae <main+0x976>
	else if (__tmp > 65535)
    47e6:	fe 01       	movw	r30, r28
    47e8:	ed 56       	subi	r30, 0x6D	; 109
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	3f ef       	ldi	r19, 0xFF	; 255
    47f8:	4f e7       	ldi	r20, 0x7F	; 127
    47fa:	57 e4       	ldi	r21, 0x47	; 71
    47fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4800:	18 16       	cp	r1, r24
    4802:	0c f0       	brlt	.+2      	; 0x4806 <main+0x8ce>
    4804:	43 c0       	rjmp	.+134    	; 0x488c <main+0x954>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4806:	fe 01       	movw	r30, r28
    4808:	e9 56       	subi	r30, 0x69	; 105
    480a:	ff 4f       	sbci	r31, 0xFF	; 255
    480c:	60 81       	ld	r22, Z
    480e:	71 81       	ldd	r23, Z+1	; 0x01
    4810:	82 81       	ldd	r24, Z+2	; 0x02
    4812:	93 81       	ldd	r25, Z+3	; 0x03
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	40 e2       	ldi	r20, 0x20	; 32
    481a:	51 e4       	ldi	r21, 0x41	; 65
    481c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	8e 01       	movw	r16, r28
    4826:	0f 56       	subi	r16, 0x6F	; 111
    4828:	1f 4f       	sbci	r17, 0xFF	; 255
    482a:	bc 01       	movw	r22, r24
    482c:	cd 01       	movw	r24, r26
    482e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	f8 01       	movw	r30, r16
    4838:	91 83       	std	Z+1, r25	; 0x01
    483a:	80 83       	st	Z, r24
    483c:	1f c0       	rjmp	.+62     	; 0x487c <main+0x944>
    483e:	fe 01       	movw	r30, r28
    4840:	e1 57       	subi	r30, 0x71	; 113
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	88 ec       	ldi	r24, 0xC8	; 200
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	80 83       	st	Z, r24
    484c:	fe 01       	movw	r30, r28
    484e:	e1 57       	subi	r30, 0x71	; 113
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	80 81       	ld	r24, Z
    4854:	91 81       	ldd	r25, Z+1	; 0x01
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	f1 f7       	brne	.-4      	; 0x4856 <main+0x91e>
    485a:	fe 01       	movw	r30, r28
    485c:	e1 57       	subi	r30, 0x71	; 113
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4864:	de 01       	movw	r26, r28
    4866:	af 56       	subi	r26, 0x6F	; 111
    4868:	bf 4f       	sbci	r27, 0xFF	; 255
    486a:	fe 01       	movw	r30, r28
    486c:	ef 56       	subi	r30, 0x6F	; 111
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 81       	ld	r24, Z
    4872:	91 81       	ldd	r25, Z+1	; 0x01
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	11 96       	adiw	r26, 0x01	; 1
    4878:	9c 93       	st	X, r25
    487a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487c:	fe 01       	movw	r30, r28
    487e:	ef 56       	subi	r30, 0x6F	; 111
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	80 81       	ld	r24, Z
    4884:	91 81       	ldd	r25, Z+1	; 0x01
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	d1 f6       	brne	.-76     	; 0x483e <main+0x906>
    488a:	27 c0       	rjmp	.+78     	; 0x48da <main+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488c:	8e 01       	movw	r16, r28
    488e:	0f 56       	subi	r16, 0x6F	; 111
    4890:	1f 4f       	sbci	r17, 0xFF	; 255
    4892:	fe 01       	movw	r30, r28
    4894:	ed 56       	subi	r30, 0x6D	; 109
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	60 81       	ld	r22, Z
    489a:	71 81       	ldd	r23, Z+1	; 0x01
    489c:	82 81       	ldd	r24, Z+2	; 0x02
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a4:	dc 01       	movw	r26, r24
    48a6:	cb 01       	movw	r24, r22
    48a8:	f8 01       	movw	r30, r16
    48aa:	91 83       	std	Z+1, r25	; 0x01
    48ac:	80 83       	st	Z, r24
    48ae:	de 01       	movw	r26, r28
    48b0:	a3 57       	subi	r26, 0x73	; 115
    48b2:	bf 4f       	sbci	r27, 0xFF	; 255
    48b4:	fe 01       	movw	r30, r28
    48b6:	ef 56       	subi	r30, 0x6F	; 111
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	80 81       	ld	r24, Z
    48bc:	91 81       	ldd	r25, Z+1	; 0x01
    48be:	8d 93       	st	X+, r24
    48c0:	9c 93       	st	X, r25
    48c2:	fe 01       	movw	r30, r28
    48c4:	e3 57       	subi	r30, 0x73	; 115
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	80 81       	ld	r24, Z
    48ca:	91 81       	ldd	r25, Z+1	; 0x01
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	f1 f7       	brne	.-4      	; 0x48cc <main+0x994>
    48d0:	fe 01       	movw	r30, r28
    48d2:	e3 57       	subi	r30, 0x73	; 115
    48d4:	ff 4f       	sbci	r31, 0xFF	; 255
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_voidCLR();
    48da:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Alerts On");
    48de:	8c e9       	ldi	r24, 0x9C	; 156
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
			DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
    48e6:	83 e0       	ldi	r24, 0x03	; 3
    48e8:	63 e0       	ldi	r22, 0x03	; 3
    48ea:	41 e0       	ldi	r20, 0x01	; 1
    48ec:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    48f0:	fe 01       	movw	r30, r28
    48f2:	e7 57       	subi	r30, 0x77	; 119
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	80 e0       	ldi	r24, 0x00	; 0
    48f8:	90 e4       	ldi	r25, 0x40	; 64
    48fa:	ac e1       	ldi	r26, 0x1C	; 28
    48fc:	b6 e4       	ldi	r27, 0x46	; 70
    48fe:	80 83       	st	Z, r24
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	a2 83       	std	Z+2, r26	; 0x02
    4904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4906:	8e 01       	movw	r16, r28
    4908:	0b 57       	subi	r16, 0x7B	; 123
    490a:	1f 4f       	sbci	r17, 0xFF	; 255
    490c:	fe 01       	movw	r30, r28
    490e:	e7 57       	subi	r30, 0x77	; 119
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	60 81       	ld	r22, Z
    4914:	71 81       	ldd	r23, Z+1	; 0x01
    4916:	82 81       	ldd	r24, Z+2	; 0x02
    4918:	93 81       	ldd	r25, Z+3	; 0x03
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	4a ef       	ldi	r20, 0xFA	; 250
    4920:	54 e4       	ldi	r21, 0x44	; 68
    4922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	f8 01       	movw	r30, r16
    492c:	80 83       	st	Z, r24
    492e:	91 83       	std	Z+1, r25	; 0x01
    4930:	a2 83       	std	Z+2, r26	; 0x02
    4932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4934:	fe 01       	movw	r30, r28
    4936:	eb 57       	subi	r30, 0x7B	; 123
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e8       	ldi	r20, 0x80	; 128
    4948:	5f e3       	ldi	r21, 0x3F	; 63
    494a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    494e:	88 23       	and	r24, r24
    4950:	44 f4       	brge	.+16     	; 0x4962 <main+0xa2a>
		__ticks = 1;
    4952:	fe 01       	movw	r30, r28
    4954:	ed 57       	subi	r30, 0x7D	; 125
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	91 83       	std	Z+1, r25	; 0x01
    495e:	80 83       	st	Z, r24
    4960:	64 c0       	rjmp	.+200    	; 0x4a2a <main+0xaf2>
	else if (__tmp > 65535)
    4962:	fe 01       	movw	r30, r28
    4964:	eb 57       	subi	r30, 0x7B	; 123
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	3f ef       	ldi	r19, 0xFF	; 255
    4974:	4f e7       	ldi	r20, 0x7F	; 127
    4976:	57 e4       	ldi	r21, 0x47	; 71
    4978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    497c:	18 16       	cp	r1, r24
    497e:	0c f0       	brlt	.+2      	; 0x4982 <main+0xa4a>
    4980:	43 c0       	rjmp	.+134    	; 0x4a08 <main+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4982:	fe 01       	movw	r30, r28
    4984:	e7 57       	subi	r30, 0x77	; 119
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	60 81       	ld	r22, Z
    498a:	71 81       	ldd	r23, Z+1	; 0x01
    498c:	82 81       	ldd	r24, Z+2	; 0x02
    498e:	93 81       	ldd	r25, Z+3	; 0x03
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	40 e2       	ldi	r20, 0x20	; 32
    4996:	51 e4       	ldi	r21, 0x41	; 65
    4998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	8e 01       	movw	r16, r28
    49a2:	0d 57       	subi	r16, 0x7D	; 125
    49a4:	1f 4f       	sbci	r17, 0xFF	; 255
    49a6:	bc 01       	movw	r22, r24
    49a8:	cd 01       	movw	r24, r26
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	f8 01       	movw	r30, r16
    49b4:	91 83       	std	Z+1, r25	; 0x01
    49b6:	80 83       	st	Z, r24
    49b8:	1f c0       	rjmp	.+62     	; 0x49f8 <main+0xac0>
    49ba:	fe 01       	movw	r30, r28
    49bc:	ef 57       	subi	r30, 0x7F	; 127
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	88 ec       	ldi	r24, 0xC8	; 200
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	80 83       	st	Z, r24
    49c8:	fe 01       	movw	r30, r28
    49ca:	ef 57       	subi	r30, 0x7F	; 127
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	80 81       	ld	r24, Z
    49d0:	91 81       	ldd	r25, Z+1	; 0x01
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	f1 f7       	brne	.-4      	; 0x49d2 <main+0xa9a>
    49d6:	fe 01       	movw	r30, r28
    49d8:	ef 57       	subi	r30, 0x7F	; 127
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	91 83       	std	Z+1, r25	; 0x01
    49de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e0:	de 01       	movw	r26, r28
    49e2:	ad 57       	subi	r26, 0x7D	; 125
    49e4:	bf 4f       	sbci	r27, 0xFF	; 255
    49e6:	fe 01       	movw	r30, r28
    49e8:	ed 57       	subi	r30, 0x7D	; 125
    49ea:	ff 4f       	sbci	r31, 0xFF	; 255
    49ec:	80 81       	ld	r24, Z
    49ee:	91 81       	ldd	r25, Z+1	; 0x01
    49f0:	01 97       	sbiw	r24, 0x01	; 1
    49f2:	11 96       	adiw	r26, 0x01	; 1
    49f4:	9c 93       	st	X, r25
    49f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f8:	fe 01       	movw	r30, r28
    49fa:	ed 57       	subi	r30, 0x7D	; 125
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	91 81       	ldd	r25, Z+1	; 0x01
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	d1 f6       	brne	.-76     	; 0x49ba <main+0xa82>
    4a06:	28 c0       	rjmp	.+80     	; 0x4a58 <main+0xb20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a08:	8e 01       	movw	r16, r28
    4a0a:	0d 57       	subi	r16, 0x7D	; 125
    4a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0e:	fe 01       	movw	r30, r28
    4a10:	eb 57       	subi	r30, 0x7B	; 123
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	f8 01       	movw	r30, r16
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
    4a2a:	de 01       	movw	r26, r28
    4a2c:	a1 58       	subi	r26, 0x81	; 129
    4a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a30:	fe 01       	movw	r30, r28
    4a32:	ed 57       	subi	r30, 0x7D	; 125
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	80 81       	ld	r24, Z
    4a38:	91 81       	ldd	r25, Z+1	; 0x01
    4a3a:	11 96       	adiw	r26, 0x01	; 1
    4a3c:	9c 93       	st	X, r25
    4a3e:	8e 93       	st	-X, r24
    4a40:	fe 01       	movw	r30, r28
    4a42:	e1 58       	subi	r30, 0x81	; 129
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	01 97       	sbiw	r24, 0x01	; 1
    4a4c:	f1 f7       	brne	.-4      	; 0x4a4a <main+0xb12>
    4a4e:	fe 01       	movw	r30, r28
    4a50:	e1 58       	subi	r30, 0x81	; 129
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	91 83       	std	Z+1, r25	; 0x01
    4a56:	80 83       	st	Z, r24



	}

	return 0 ;
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
}
    4a5c:	c7 51       	subi	r28, 0x17	; 23
    4a5e:	df 4f       	sbci	r29, 0xFF	; 255
    4a60:	0f b6       	in	r0, 0x3f	; 63
    4a62:	f8 94       	cli
    4a64:	de bf       	out	0x3e, r29	; 62
    4a66:	0f be       	out	0x3f, r0	; 63
    4a68:	cd bf       	out	0x3d, r28	; 61
    4a6a:	cf 91       	pop	r28
    4a6c:	df 91       	pop	r29
    4a6e:	1f 91       	pop	r17
    4a70:	0f 91       	pop	r16
    4a72:	08 95       	ret
			DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
			_delay_ms(10000);
			break ;
		}

		else if(User_Pass==Password)
    4a74:	fe 01       	movw	r30, r28
    4a76:	ef 51       	subi	r30, 0x1F	; 31
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	de 01       	movw	r26, r28
    4a7c:	ad 51       	subi	r26, 0x1D	; 29
    4a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a80:	20 81       	ld	r18, Z
    4a82:	31 81       	ldd	r19, Z+1	; 0x01
    4a84:	8d 91       	ld	r24, X+
    4a86:	9c 91       	ld	r25, X
    4a88:	11 97       	sbiw	r26, 0x01	; 1
    4a8a:	28 17       	cp	r18, r24
    4a8c:	39 07       	cpc	r19, r25
    4a8e:	09 f0       	breq	.+2      	; 0x4a92 <main+0xb5a>
    4a90:	d3 ca       	rjmp	.-2650   	; 0x4038 <main+0x100>
		{

			LCD_voidCLR();
    4a92:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Hello user");
    4a96:	86 ea       	ldi	r24, 0xA6	; 166
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e5 58       	subi	r30, 0x85	; 133
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	90 e8       	ldi	r25, 0x80	; 128
    4aa8:	ab e3       	ldi	r26, 0x3B	; 59
    4aaa:	b5 e4       	ldi	r27, 0x45	; 69
    4aac:	80 83       	st	Z, r24
    4aae:	91 83       	std	Z+1, r25	; 0x01
    4ab0:	a2 83       	std	Z+2, r26	; 0x02
    4ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab4:	8e 01       	movw	r16, r28
    4ab6:	09 58       	subi	r16, 0x89	; 137
    4ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aba:	fe 01       	movw	r30, r28
    4abc:	e5 58       	subi	r30, 0x85	; 133
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	4a ef       	ldi	r20, 0xFA	; 250
    4ace:	54 e4       	ldi	r21, 0x44	; 68
    4ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	cb 01       	movw	r24, r22
    4ad8:	f8 01       	movw	r30, r16
    4ada:	80 83       	st	Z, r24
    4adc:	91 83       	std	Z+1, r25	; 0x01
    4ade:	a2 83       	std	Z+2, r26	; 0x02
    4ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ae2:	fe 01       	movw	r30, r28
    4ae4:	e9 58       	subi	r30, 0x89	; 137
    4ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae8:	60 81       	ld	r22, Z
    4aea:	71 81       	ldd	r23, Z+1	; 0x01
    4aec:	82 81       	ldd	r24, Z+2	; 0x02
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	40 e8       	ldi	r20, 0x80	; 128
    4af6:	5f e3       	ldi	r21, 0x3F	; 63
    4af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4afc:	88 23       	and	r24, r24
    4afe:	44 f4       	brge	.+16     	; 0x4b10 <main+0xbd8>
		__ticks = 1;
    4b00:	fe 01       	movw	r30, r28
    4b02:	eb 58       	subi	r30, 0x8B	; 139
    4b04:	ff 4f       	sbci	r31, 0xFF	; 255
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	80 83       	st	Z, r24
    4b0e:	64 c0       	rjmp	.+200    	; 0x4bd8 <main+0xca0>
	else if (__tmp > 65535)
    4b10:	fe 01       	movw	r30, r28
    4b12:	e9 58       	subi	r30, 0x89	; 137
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	60 81       	ld	r22, Z
    4b18:	71 81       	ldd	r23, Z+1	; 0x01
    4b1a:	82 81       	ldd	r24, Z+2	; 0x02
    4b1c:	93 81       	ldd	r25, Z+3	; 0x03
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	3f ef       	ldi	r19, 0xFF	; 255
    4b22:	4f e7       	ldi	r20, 0x7F	; 127
    4b24:	57 e4       	ldi	r21, 0x47	; 71
    4b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b2a:	18 16       	cp	r1, r24
    4b2c:	0c f0       	brlt	.+2      	; 0x4b30 <main+0xbf8>
    4b2e:	43 c0       	rjmp	.+134    	; 0x4bb6 <main+0xc7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b30:	fe 01       	movw	r30, r28
    4b32:	e5 58       	subi	r30, 0x85	; 133
    4b34:	ff 4f       	sbci	r31, 0xFF	; 255
    4b36:	60 81       	ld	r22, Z
    4b38:	71 81       	ldd	r23, Z+1	; 0x01
    4b3a:	82 81       	ldd	r24, Z+2	; 0x02
    4b3c:	93 81       	ldd	r25, Z+3	; 0x03
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	40 e2       	ldi	r20, 0x20	; 32
    4b44:	51 e4       	ldi	r21, 0x41	; 65
    4b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	8e 01       	movw	r16, r28
    4b50:	0b 58       	subi	r16, 0x8B	; 139
    4b52:	1f 4f       	sbci	r17, 0xFF	; 255
    4b54:	bc 01       	movw	r22, r24
    4b56:	cd 01       	movw	r24, r26
    4b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	f8 01       	movw	r30, r16
    4b62:	91 83       	std	Z+1, r25	; 0x01
    4b64:	80 83       	st	Z, r24
    4b66:	1f c0       	rjmp	.+62     	; 0x4ba6 <main+0xc6e>
    4b68:	fe 01       	movw	r30, r28
    4b6a:	ed 58       	subi	r30, 0x8D	; 141
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	88 ec       	ldi	r24, 0xC8	; 200
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	91 83       	std	Z+1, r25	; 0x01
    4b74:	80 83       	st	Z, r24
    4b76:	fe 01       	movw	r30, r28
    4b78:	ed 58       	subi	r30, 0x8D	; 141
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	80 81       	ld	r24, Z
    4b7e:	91 81       	ldd	r25, Z+1	; 0x01
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <main+0xc48>
    4b84:	fe 01       	movw	r30, r28
    4b86:	ed 58       	subi	r30, 0x8D	; 141
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b8e:	de 01       	movw	r26, r28
    4b90:	ab 58       	subi	r26, 0x8B	; 139
    4b92:	bf 4f       	sbci	r27, 0xFF	; 255
    4b94:	fe 01       	movw	r30, r28
    4b96:	eb 58       	subi	r30, 0x8B	; 139
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	80 81       	ld	r24, Z
    4b9c:	91 81       	ldd	r25, Z+1	; 0x01
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	11 96       	adiw	r26, 0x01	; 1
    4ba2:	9c 93       	st	X, r25
    4ba4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	eb 58       	subi	r30, 0x8B	; 139
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	80 81       	ld	r24, Z
    4bae:	91 81       	ldd	r25, Z+1	; 0x01
    4bb0:	00 97       	sbiw	r24, 0x00	; 0
    4bb2:	d1 f6       	brne	.-76     	; 0x4b68 <main+0xc30>
    4bb4:	27 c0       	rjmp	.+78     	; 0x4c04 <main+0xccc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb6:	8e 01       	movw	r16, r28
    4bb8:	0b 58       	subi	r16, 0x8B	; 139
    4bba:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e9 58       	subi	r30, 0x89	; 137
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	60 81       	ld	r22, Z
    4bc4:	71 81       	ldd	r23, Z+1	; 0x01
    4bc6:	82 81       	ldd	r24, Z+2	; 0x02
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	91 83       	std	Z+1, r25	; 0x01
    4bd6:	80 83       	st	Z, r24
    4bd8:	de 01       	movw	r26, r28
    4bda:	af 58       	subi	r26, 0x8F	; 143
    4bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    4bde:	fe 01       	movw	r30, r28
    4be0:	eb 58       	subi	r30, 0x8B	; 139
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	80 81       	ld	r24, Z
    4be6:	91 81       	ldd	r25, Z+1	; 0x01
    4be8:	8d 93       	st	X+, r24
    4bea:	9c 93       	st	X, r25
    4bec:	fe 01       	movw	r30, r28
    4bee:	ef 58       	subi	r30, 0x8F	; 143
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	f1 f7       	brne	.-4      	; 0x4bf6 <main+0xcbe>
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	ef 58       	subi	r30, 0x8F	; 143
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	91 83       	std	Z+1, r25	; 0x01
    4c02:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4c04:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			UART_voidSendData('s');
    4c08:	83 e7       	ldi	r24, 0x73	; 115
    4c0a:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_voidSendData>
			LCD_voidSendString("Door is opened");
    4c0e:	81 eb       	ldi	r24, 0xB1	; 177
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4c16:	fe 01       	movw	r30, r28
    4c18:	e3 59       	subi	r30, 0x93	; 147
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	90 e8       	ldi	r25, 0x80	; 128
    4c20:	ab e3       	ldi	r26, 0x3B	; 59
    4c22:	b5 e4       	ldi	r27, 0x45	; 69
    4c24:	80 83       	st	Z, r24
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	a2 83       	std	Z+2, r26	; 0x02
    4c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c2c:	8e 01       	movw	r16, r28
    4c2e:	07 59       	subi	r16, 0x97	; 151
    4c30:	1f 4f       	sbci	r17, 0xFF	; 255
    4c32:	fe 01       	movw	r30, r28
    4c34:	e3 59       	subi	r30, 0x93	; 147
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	60 81       	ld	r22, Z
    4c3a:	71 81       	ldd	r23, Z+1	; 0x01
    4c3c:	82 81       	ldd	r24, Z+2	; 0x02
    4c3e:	93 81       	ldd	r25, Z+3	; 0x03
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	4a ef       	ldi	r20, 0xFA	; 250
    4c46:	54 e4       	ldi	r21, 0x44	; 68
    4c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	f8 01       	movw	r30, r16
    4c52:	80 83       	st	Z, r24
    4c54:	91 83       	std	Z+1, r25	; 0x01
    4c56:	a2 83       	std	Z+2, r26	; 0x02
    4c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	e7 59       	subi	r30, 0x97	; 151
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	60 81       	ld	r22, Z
    4c62:	71 81       	ldd	r23, Z+1	; 0x01
    4c64:	82 81       	ldd	r24, Z+2	; 0x02
    4c66:	93 81       	ldd	r25, Z+3	; 0x03
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	40 e8       	ldi	r20, 0x80	; 128
    4c6e:	5f e3       	ldi	r21, 0x3F	; 63
    4c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c74:	88 23       	and	r24, r24
    4c76:	44 f4       	brge	.+16     	; 0x4c88 <main+0xd50>
		__ticks = 1;
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e9 59       	subi	r30, 0x99	; 153
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	80 83       	st	Z, r24
    4c86:	64 c0       	rjmp	.+200    	; 0x4d50 <main+0xe18>
	else if (__tmp > 65535)
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e7 59       	subi	r30, 0x97	; 151
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	60 81       	ld	r22, Z
    4c90:	71 81       	ldd	r23, Z+1	; 0x01
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	3f ef       	ldi	r19, 0xFF	; 255
    4c9a:	4f e7       	ldi	r20, 0x7F	; 127
    4c9c:	57 e4       	ldi	r21, 0x47	; 71
    4c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ca2:	18 16       	cp	r1, r24
    4ca4:	0c f0       	brlt	.+2      	; 0x4ca8 <main+0xd70>
    4ca6:	43 c0       	rjmp	.+134    	; 0x4d2e <main+0xdf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ca8:	fe 01       	movw	r30, r28
    4caa:	e3 59       	subi	r30, 0x93	; 147
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	60 81       	ld	r22, Z
    4cb0:	71 81       	ldd	r23, Z+1	; 0x01
    4cb2:	82 81       	ldd	r24, Z+2	; 0x02
    4cb4:	93 81       	ldd	r25, Z+3	; 0x03
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	40 e2       	ldi	r20, 0x20	; 32
    4cbc:	51 e4       	ldi	r21, 0x41	; 65
    4cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc2:	dc 01       	movw	r26, r24
    4cc4:	cb 01       	movw	r24, r22
    4cc6:	8e 01       	movw	r16, r28
    4cc8:	09 59       	subi	r16, 0x99	; 153
    4cca:	1f 4f       	sbci	r17, 0xFF	; 255
    4ccc:	bc 01       	movw	r22, r24
    4cce:	cd 01       	movw	r24, r26
    4cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	f8 01       	movw	r30, r16
    4cda:	91 83       	std	Z+1, r25	; 0x01
    4cdc:	80 83       	st	Z, r24
    4cde:	1f c0       	rjmp	.+62     	; 0x4d1e <main+0xde6>
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	eb 59       	subi	r30, 0x9B	; 155
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	88 ec       	ldi	r24, 0xC8	; 200
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	91 83       	std	Z+1, r25	; 0x01
    4cec:	80 83       	st	Z, r24
    4cee:	fe 01       	movw	r30, r28
    4cf0:	eb 59       	subi	r30, 0x9B	; 155
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	80 81       	ld	r24, Z
    4cf6:	91 81       	ldd	r25, Z+1	; 0x01
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <main+0xdc0>
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	eb 59       	subi	r30, 0x9B	; 155
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	91 83       	std	Z+1, r25	; 0x01
    4d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d06:	de 01       	movw	r26, r28
    4d08:	a9 59       	subi	r26, 0x99	; 153
    4d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	e9 59       	subi	r30, 0x99	; 153
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	01 97       	sbiw	r24, 0x01	; 1
    4d18:	11 96       	adiw	r26, 0x01	; 1
    4d1a:	9c 93       	st	X, r25
    4d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e9 59       	subi	r30, 0x99	; 153
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	80 81       	ld	r24, Z
    4d26:	91 81       	ldd	r25, Z+1	; 0x01
    4d28:	00 97       	sbiw	r24, 0x00	; 0
    4d2a:	d1 f6       	brne	.-76     	; 0x4ce0 <main+0xda8>
    4d2c:	27 c0       	rjmp	.+78     	; 0x4d7c <main+0xe44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d2e:	8e 01       	movw	r16, r28
    4d30:	09 59       	subi	r16, 0x99	; 153
    4d32:	1f 4f       	sbci	r17, 0xFF	; 255
    4d34:	fe 01       	movw	r30, r28
    4d36:	e7 59       	subi	r30, 0x97	; 151
    4d38:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3a:	60 81       	ld	r22, Z
    4d3c:	71 81       	ldd	r23, Z+1	; 0x01
    4d3e:	82 81       	ldd	r24, Z+2	; 0x02
    4d40:	93 81       	ldd	r25, Z+3	; 0x03
    4d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	91 83       	std	Z+1, r25	; 0x01
    4d4e:	80 83       	st	Z, r24
    4d50:	de 01       	movw	r26, r28
    4d52:	ad 59       	subi	r26, 0x9D	; 157
    4d54:	bf 4f       	sbci	r27, 0xFF	; 255
    4d56:	fe 01       	movw	r30, r28
    4d58:	e9 59       	subi	r30, 0x99	; 153
    4d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5c:	80 81       	ld	r24, Z
    4d5e:	91 81       	ldd	r25, Z+1	; 0x01
    4d60:	8d 93       	st	X+, r24
    4d62:	9c 93       	st	X, r25
    4d64:	fe 01       	movw	r30, r28
    4d66:	ed 59       	subi	r30, 0x9D	; 157
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	80 81       	ld	r24, Z
    4d6c:	91 81       	ldd	r25, Z+1	; 0x01
    4d6e:	01 97       	sbiw	r24, 0x01	; 1
    4d70:	f1 f7       	brne	.-4      	; 0x4d6e <main+0xe36>
    4d72:	fe 01       	movw	r30, r28
    4d74:	ed 59       	subi	r30, 0x9D	; 157
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	91 83       	std	Z+1, r25	; 0x01
    4d7a:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4d7c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Light Sys ON");
    4d80:	80 ec       	ldi	r24, 0xC0	; 192
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e1 5a       	subi	r30, 0xA1	; 161
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 e8       	ldi	r25, 0x80	; 128
    4d92:	ab e3       	ldi	r26, 0x3B	; 59
    4d94:	b5 e4       	ldi	r27, 0x45	; 69
    4d96:	80 83       	st	Z, r24
    4d98:	91 83       	std	Z+1, r25	; 0x01
    4d9a:	a2 83       	std	Z+2, r26	; 0x02
    4d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d9e:	8e 01       	movw	r16, r28
    4da0:	05 5a       	subi	r16, 0xA5	; 165
    4da2:	1f 4f       	sbci	r17, 0xFF	; 255
    4da4:	fe 01       	movw	r30, r28
    4da6:	e1 5a       	subi	r30, 0xA1	; 161
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	82 81       	ldd	r24, Z+2	; 0x02
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	4a ef       	ldi	r20, 0xFA	; 250
    4db8:	54 e4       	ldi	r21, 0x44	; 68
    4dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	f8 01       	movw	r30, r16
    4dc4:	80 83       	st	Z, r24
    4dc6:	91 83       	std	Z+1, r25	; 0x01
    4dc8:	a2 83       	std	Z+2, r26	; 0x02
    4dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e5 5a       	subi	r30, 0xA5	; 165
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	60 81       	ld	r22, Z
    4dd4:	71 81       	ldd	r23, Z+1	; 0x01
    4dd6:	82 81       	ldd	r24, Z+2	; 0x02
    4dd8:	93 81       	ldd	r25, Z+3	; 0x03
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	40 e8       	ldi	r20, 0x80	; 128
    4de0:	5f e3       	ldi	r21, 0x3F	; 63
    4de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4de6:	88 23       	and	r24, r24
    4de8:	44 f4       	brge	.+16     	; 0x4dfa <main+0xec2>
		__ticks = 1;
    4dea:	fe 01       	movw	r30, r28
    4dec:	e7 5a       	subi	r30, 0xA7	; 167
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
    4df8:	64 c0       	rjmp	.+200    	; 0x4ec2 <main+0xf8a>
	else if (__tmp > 65535)
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e5 5a       	subi	r30, 0xA5	; 165
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	60 81       	ld	r22, Z
    4e02:	71 81       	ldd	r23, Z+1	; 0x01
    4e04:	82 81       	ldd	r24, Z+2	; 0x02
    4e06:	93 81       	ldd	r25, Z+3	; 0x03
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	3f ef       	ldi	r19, 0xFF	; 255
    4e0c:	4f e7       	ldi	r20, 0x7F	; 127
    4e0e:	57 e4       	ldi	r21, 0x47	; 71
    4e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e14:	18 16       	cp	r1, r24
    4e16:	0c f0       	brlt	.+2      	; 0x4e1a <main+0xee2>
    4e18:	43 c0       	rjmp	.+134    	; 0x4ea0 <main+0xf68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e1 5a       	subi	r30, 0xA1	; 161
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	60 81       	ld	r22, Z
    4e22:	71 81       	ldd	r23, Z+1	; 0x01
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e2       	ldi	r20, 0x20	; 32
    4e2e:	51 e4       	ldi	r21, 0x41	; 65
    4e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e34:	dc 01       	movw	r26, r24
    4e36:	cb 01       	movw	r24, r22
    4e38:	8e 01       	movw	r16, r28
    4e3a:	07 5a       	subi	r16, 0xA7	; 167
    4e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3e:	bc 01       	movw	r22, r24
    4e40:	cd 01       	movw	r24, r26
    4e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
    4e50:	1f c0       	rjmp	.+62     	; 0x4e90 <main+0xf58>
    4e52:	fe 01       	movw	r30, r28
    4e54:	e9 5a       	subi	r30, 0xA9	; 169
    4e56:	ff 4f       	sbci	r31, 0xFF	; 255
    4e58:	88 ec       	ldi	r24, 0xC8	; 200
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	91 83       	std	Z+1, r25	; 0x01
    4e5e:	80 83       	st	Z, r24
    4e60:	fe 01       	movw	r30, r28
    4e62:	e9 5a       	subi	r30, 0xA9	; 169
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	80 81       	ld	r24, Z
    4e68:	91 81       	ldd	r25, Z+1	; 0x01
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	f1 f7       	brne	.-4      	; 0x4e6a <main+0xf32>
    4e6e:	fe 01       	movw	r30, r28
    4e70:	e9 5a       	subi	r30, 0xA9	; 169
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	91 83       	std	Z+1, r25	; 0x01
    4e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e78:	de 01       	movw	r26, r28
    4e7a:	a7 5a       	subi	r26, 0xA7	; 167
    4e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7e:	fe 01       	movw	r30, r28
    4e80:	e7 5a       	subi	r30, 0xA7	; 167
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	80 81       	ld	r24, Z
    4e86:	91 81       	ldd	r25, Z+1	; 0x01
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	11 96       	adiw	r26, 0x01	; 1
    4e8c:	9c 93       	st	X, r25
    4e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e90:	fe 01       	movw	r30, r28
    4e92:	e7 5a       	subi	r30, 0xA7	; 167
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	80 81       	ld	r24, Z
    4e98:	91 81       	ldd	r25, Z+1	; 0x01
    4e9a:	00 97       	sbiw	r24, 0x00	; 0
    4e9c:	d1 f6       	brne	.-76     	; 0x4e52 <main+0xf1a>
    4e9e:	27 c0       	rjmp	.+78     	; 0x4eee <main+0xfb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea0:	8e 01       	movw	r16, r28
    4ea2:	07 5a       	subi	r16, 0xA7	; 167
    4ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	e5 5a       	subi	r30, 0xA5	; 165
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	f8 01       	movw	r30, r16
    4ebe:	91 83       	std	Z+1, r25	; 0x01
    4ec0:	80 83       	st	Z, r24
    4ec2:	de 01       	movw	r26, r28
    4ec4:	ab 5a       	subi	r26, 0xAB	; 171
    4ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e7 5a       	subi	r30, 0xA7	; 167
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	80 81       	ld	r24, Z
    4ed0:	91 81       	ldd	r25, Z+1	; 0x01
    4ed2:	8d 93       	st	X+, r24
    4ed4:	9c 93       	st	X, r25
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	eb 5a       	subi	r30, 0xAB	; 171
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <main+0xfa8>
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	eb 5a       	subi	r30, 0xAB	; 171
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	91 83       	std	Z+1, r25	; 0x01
    4eec:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4eee:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Temp Sys ON");
    4ef2:	8d ec       	ldi	r24, 0xCD	; 205
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    4efa:	fe 01       	movw	r30, r28
    4efc:	ef 5a       	subi	r30, 0xAF	; 175
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e8       	ldi	r25, 0x80	; 128
    4f04:	ab e3       	ldi	r26, 0x3B	; 59
    4f06:	b5 e4       	ldi	r27, 0x45	; 69
    4f08:	80 83       	st	Z, r24
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	a2 83       	std	Z+2, r26	; 0x02
    4f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f10:	8e 01       	movw	r16, r28
    4f12:	03 5b       	subi	r16, 0xB3	; 179
    4f14:	1f 4f       	sbci	r17, 0xFF	; 255
    4f16:	fe 01       	movw	r30, r28
    4f18:	ef 5a       	subi	r30, 0xAF	; 175
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	60 81       	ld	r22, Z
    4f1e:	71 81       	ldd	r23, Z+1	; 0x01
    4f20:	82 81       	ldd	r24, Z+2	; 0x02
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	4a ef       	ldi	r20, 0xFA	; 250
    4f2a:	54 e4       	ldi	r21, 0x44	; 68
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	f8 01       	movw	r30, r16
    4f36:	80 83       	st	Z, r24
    4f38:	91 83       	std	Z+1, r25	; 0x01
    4f3a:	a2 83       	std	Z+2, r26	; 0x02
    4f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e3 5b       	subi	r30, 0xB3	; 179
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	60 81       	ld	r22, Z
    4f46:	71 81       	ldd	r23, Z+1	; 0x01
    4f48:	82 81       	ldd	r24, Z+2	; 0x02
    4f4a:	93 81       	ldd	r25, Z+3	; 0x03
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e8       	ldi	r20, 0x80	; 128
    4f52:	5f e3       	ldi	r21, 0x3F	; 63
    4f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	44 f4       	brge	.+16     	; 0x4f6c <main+0x1034>
		__ticks = 1;
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	e5 5b       	subi	r30, 0xB5	; 181
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	91 83       	std	Z+1, r25	; 0x01
    4f68:	80 83       	st	Z, r24
    4f6a:	64 c0       	rjmp	.+200    	; 0x5034 <main+0x10fc>
	else if (__tmp > 65535)
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	e3 5b       	subi	r30, 0xB3	; 179
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	60 81       	ld	r22, Z
    4f74:	71 81       	ldd	r23, Z+1	; 0x01
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	3f ef       	ldi	r19, 0xFF	; 255
    4f7e:	4f e7       	ldi	r20, 0x7F	; 127
    4f80:	57 e4       	ldi	r21, 0x47	; 71
    4f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f86:	18 16       	cp	r1, r24
    4f88:	0c f0       	brlt	.+2      	; 0x4f8c <main+0x1054>
    4f8a:	43 c0       	rjmp	.+134    	; 0x5012 <main+0x10da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f8c:	fe 01       	movw	r30, r28
    4f8e:	ef 5a       	subi	r30, 0xAF	; 175
    4f90:	ff 4f       	sbci	r31, 0xFF	; 255
    4f92:	60 81       	ld	r22, Z
    4f94:	71 81       	ldd	r23, Z+1	; 0x01
    4f96:	82 81       	ldd	r24, Z+2	; 0x02
    4f98:	93 81       	ldd	r25, Z+3	; 0x03
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	40 e2       	ldi	r20, 0x20	; 32
    4fa0:	51 e4       	ldi	r21, 0x41	; 65
    4fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	8e 01       	movw	r16, r28
    4fac:	05 5b       	subi	r16, 0xB5	; 181
    4fae:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	f8 01       	movw	r30, r16
    4fbe:	91 83       	std	Z+1, r25	; 0x01
    4fc0:	80 83       	st	Z, r24
    4fc2:	1f c0       	rjmp	.+62     	; 0x5002 <main+0x10ca>
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e7 5b       	subi	r30, 0xB7	; 183
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	88 ec       	ldi	r24, 0xC8	; 200
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	91 83       	std	Z+1, r25	; 0x01
    4fd0:	80 83       	st	Z, r24
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	e7 5b       	subi	r30, 0xB7	; 183
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	f1 f7       	brne	.-4      	; 0x4fdc <main+0x10a4>
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	e7 5b       	subi	r30, 0xB7	; 183
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	91 83       	std	Z+1, r25	; 0x01
    4fe8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fea:	de 01       	movw	r26, r28
    4fec:	a5 5b       	subi	r26, 0xB5	; 181
    4fee:	bf 4f       	sbci	r27, 0xFF	; 255
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e5 5b       	subi	r30, 0xB5	; 181
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	11 96       	adiw	r26, 0x01	; 1
    4ffe:	9c 93       	st	X, r25
    5000:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5002:	fe 01       	movw	r30, r28
    5004:	e5 5b       	subi	r30, 0xB5	; 181
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	d1 f6       	brne	.-76     	; 0x4fc4 <main+0x108c>
    5010:	27 c0       	rjmp	.+78     	; 0x5060 <main+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5012:	8e 01       	movw	r16, r28
    5014:	05 5b       	subi	r16, 0xB5	; 181
    5016:	1f 4f       	sbci	r17, 0xFF	; 255
    5018:	fe 01       	movw	r30, r28
    501a:	e3 5b       	subi	r30, 0xB3	; 179
    501c:	ff 4f       	sbci	r31, 0xFF	; 255
    501e:	60 81       	ld	r22, Z
    5020:	71 81       	ldd	r23, Z+1	; 0x01
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	93 81       	ldd	r25, Z+3	; 0x03
    5026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	f8 01       	movw	r30, r16
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	80 83       	st	Z, r24
    5034:	de 01       	movw	r26, r28
    5036:	a9 5b       	subi	r26, 0xB9	; 185
    5038:	bf 4f       	sbci	r27, 0xFF	; 255
    503a:	fe 01       	movw	r30, r28
    503c:	e5 5b       	subi	r30, 0xB5	; 181
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	80 81       	ld	r24, Z
    5042:	91 81       	ldd	r25, Z+1	; 0x01
    5044:	8d 93       	st	X+, r24
    5046:	9c 93       	st	X, r25
    5048:	fe 01       	movw	r30, r28
    504a:	e9 5b       	subi	r30, 0xB9	; 185
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	80 81       	ld	r24, Z
    5050:	91 81       	ldd	r25, Z+1	; 0x01
    5052:	01 97       	sbiw	r24, 0x01	; 1
    5054:	f1 f7       	brne	.-4      	; 0x5052 <main+0x111a>
    5056:	fe 01       	movw	r30, r28
    5058:	e9 5b       	subi	r30, 0xB9	; 185
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	91 83       	std	Z+1, r25	; 0x01
    505e:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    5060:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LCD_voidCLR>
			LCD_voidSendString("Have a nice day");
    5064:	89 ed       	ldi	r24, 0xD9	; 217
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	0e 94 cf 1c 	call	0x399e	; 0x399e <LCD_voidSendString>
    506c:	fe 01       	movw	r30, r28
    506e:	ed 5b       	subi	r30, 0xBD	; 189
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	aa e7       	ldi	r26, 0x7A	; 122
    5078:	b4 e4       	ldi	r27, 0x44	; 68
    507a:	80 83       	st	Z, r24
    507c:	91 83       	std	Z+1, r25	; 0x01
    507e:	a2 83       	std	Z+2, r26	; 0x02
    5080:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5082:	8e 01       	movw	r16, r28
    5084:	01 5c       	subi	r16, 0xC1	; 193
    5086:	1f 4f       	sbci	r17, 0xFF	; 255
    5088:	fe 01       	movw	r30, r28
    508a:	ed 5b       	subi	r30, 0xBD	; 189
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	60 81       	ld	r22, Z
    5090:	71 81       	ldd	r23, Z+1	; 0x01
    5092:	82 81       	ldd	r24, Z+2	; 0x02
    5094:	93 81       	ldd	r25, Z+3	; 0x03
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	4a ef       	ldi	r20, 0xFA	; 250
    509c:	54 e4       	ldi	r21, 0x44	; 68
    509e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	f8 01       	movw	r30, r16
    50a8:	80 83       	st	Z, r24
    50aa:	91 83       	std	Z+1, r25	; 0x01
    50ac:	a2 83       	std	Z+2, r26	; 0x02
    50ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50b0:	fe 01       	movw	r30, r28
    50b2:	ff 96       	adiw	r30, 0x3f	; 63
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e8       	ldi	r20, 0x80	; 128
    50c2:	5f e3       	ldi	r21, 0x3F	; 63
    50c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50c8:	88 23       	and	r24, r24
    50ca:	2c f4       	brge	.+10     	; 0x50d6 <main+0x119e>
		__ticks = 1;
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	9e af       	std	Y+62, r25	; 0x3e
    50d2:	8d af       	std	Y+61, r24	; 0x3d
    50d4:	46 c0       	rjmp	.+140    	; 0x5162 <main+0x122a>
	else if (__tmp > 65535)
    50d6:	fe 01       	movw	r30, r28
    50d8:	ff 96       	adiw	r30, 0x3f	; 63
    50da:	60 81       	ld	r22, Z
    50dc:	71 81       	ldd	r23, Z+1	; 0x01
    50de:	82 81       	ldd	r24, Z+2	; 0x02
    50e0:	93 81       	ldd	r25, Z+3	; 0x03
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	3f ef       	ldi	r19, 0xFF	; 255
    50e6:	4f e7       	ldi	r20, 0x7F	; 127
    50e8:	57 e4       	ldi	r21, 0x47	; 71
    50ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50ee:	18 16       	cp	r1, r24
    50f0:	64 f5       	brge	.+88     	; 0x514a <main+0x1212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f2:	fe 01       	movw	r30, r28
    50f4:	ed 5b       	subi	r30, 0xBD	; 189
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	60 81       	ld	r22, Z
    50fa:	71 81       	ldd	r23, Z+1	; 0x01
    50fc:	82 81       	ldd	r24, Z+2	; 0x02
    50fe:	93 81       	ldd	r25, Z+3	; 0x03
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	51 e4       	ldi	r21, 0x41	; 65
    5108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	bc 01       	movw	r22, r24
    5112:	cd 01       	movw	r24, r26
    5114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	9e af       	std	Y+62, r25	; 0x3e
    511e:	8d af       	std	Y+61, r24	; 0x3d
    5120:	0f c0       	rjmp	.+30     	; 0x5140 <main+0x1208>
    5122:	88 ec       	ldi	r24, 0xC8	; 200
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	9c af       	std	Y+60, r25	; 0x3c
    5128:	8b af       	std	Y+59, r24	; 0x3b
    512a:	8b ad       	ldd	r24, Y+59	; 0x3b
    512c:	9c ad       	ldd	r25, Y+60	; 0x3c
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <main+0x11f6>
    5132:	9c af       	std	Y+60, r25	; 0x3c
    5134:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5136:	8d ad       	ldd	r24, Y+61	; 0x3d
    5138:	9e ad       	ldd	r25, Y+62	; 0x3e
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	9e af       	std	Y+62, r25	; 0x3e
    513e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5140:	8d ad       	ldd	r24, Y+61	; 0x3d
    5142:	9e ad       	ldd	r25, Y+62	; 0x3e
    5144:	00 97       	sbiw	r24, 0x00	; 0
    5146:	69 f7       	brne	.-38     	; 0x5122 <main+0x11ea>
    5148:	16 c0       	rjmp	.+44     	; 0x5176 <main+0x123e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    514a:	fe 01       	movw	r30, r28
    514c:	ff 96       	adiw	r30, 0x3f	; 63
    514e:	60 81       	ld	r22, Z
    5150:	71 81       	ldd	r23, Z+1	; 0x01
    5152:	82 81       	ldd	r24, Z+2	; 0x02
    5154:	93 81       	ldd	r25, Z+3	; 0x03
    5156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	9e af       	std	Y+62, r25	; 0x3e
    5160:	8d af       	std	Y+61, r24	; 0x3d
    5162:	8d ad       	ldd	r24, Y+61	; 0x3d
    5164:	9e ad       	ldd	r25, Y+62	; 0x3e
    5166:	9a af       	std	Y+58, r25	; 0x3a
    5168:	89 af       	std	Y+57, r24	; 0x39
    516a:	89 ad       	ldd	r24, Y+57	; 0x39
    516c:	9a ad       	ldd	r25, Y+58	; 0x3a
    516e:	01 97       	sbiw	r24, 0x01	; 1
    5170:	f1 f7       	brne	.-4      	; 0x516e <main+0x1236>
    5172:	9a af       	std	Y+58, r25	; 0x3a
    5174:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			while(1)
			{


				Read1 = ADC_voidGetAnalogRead(ADC3);
    5176:	83 e0       	ldi	r24, 0x03	; 3
    5178:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <ADC_voidGetAnalogRead>
    517c:	dc 01       	movw	r26, r24
    517e:	cb 01       	movw	r24, r22
    5180:	fe 01       	movw	r30, r28
    5182:	eb 51       	subi	r30, 0x1B	; 27
    5184:	ff 4f       	sbci	r31, 0xFF	; 255
    5186:	80 83       	st	Z, r24
    5188:	91 83       	std	Z+1, r25	; 0x01
    518a:	a2 83       	std	Z+2, r26	; 0x02
    518c:	b3 83       	std	Z+3, r27	; 0x03
				if(Read1>=2753)
    518e:	fe 01       	movw	r30, r28
    5190:	eb 51       	subi	r30, 0x1B	; 27
    5192:	ff 4f       	sbci	r31, 0xFF	; 255
    5194:	80 81       	ld	r24, Z
    5196:	91 81       	ldd	r25, Z+1	; 0x01
    5198:	a2 81       	ldd	r26, Z+2	; 0x02
    519a:	b3 81       	ldd	r27, Z+3	; 0x03
    519c:	81 3c       	cpi	r24, 0xC1	; 193
    519e:	fa e0       	ldi	r31, 0x0A	; 10
    51a0:	9f 07       	cpc	r25, r31
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	af 07       	cpc	r26, r31
    51a6:	f0 e0       	ldi	r31, 0x00	; 0
    51a8:	bf 07       	cpc	r27, r31
    51aa:	08 f4       	brcc	.+2      	; 0x51ae <main+0x1276>
    51ac:	78 c0       	rjmp	.+240    	; 0x529e <main+0x1366>
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	aa e7       	ldi	r26, 0x7A	; 122
    51b4:	b4 e4       	ldi	r27, 0x44	; 68
    51b6:	8d ab       	std	Y+53, r24	; 0x35
    51b8:	9e ab       	std	Y+54, r25	; 0x36
    51ba:	af ab       	std	Y+55, r26	; 0x37
    51bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51be:	6d a9       	ldd	r22, Y+53	; 0x35
    51c0:	7e a9       	ldd	r23, Y+54	; 0x36
    51c2:	8f a9       	ldd	r24, Y+55	; 0x37
    51c4:	98 ad       	ldd	r25, Y+56	; 0x38
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	4a ef       	ldi	r20, 0xFA	; 250
    51cc:	54 e4       	ldi	r21, 0x44	; 68
    51ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	89 ab       	std	Y+49, r24	; 0x31
    51d8:	9a ab       	std	Y+50, r25	; 0x32
    51da:	ab ab       	std	Y+51, r26	; 0x33
    51dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51de:	69 a9       	ldd	r22, Y+49	; 0x31
    51e0:	7a a9       	ldd	r23, Y+50	; 0x32
    51e2:	8b a9       	ldd	r24, Y+51	; 0x33
    51e4:	9c a9       	ldd	r25, Y+52	; 0x34
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e8       	ldi	r20, 0x80	; 128
    51ec:	5f e3       	ldi	r21, 0x3F	; 63
    51ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51f2:	88 23       	and	r24, r24
    51f4:	2c f4       	brge	.+10     	; 0x5200 <main+0x12c8>
		__ticks = 1;
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	98 ab       	std	Y+48, r25	; 0x30
    51fc:	8f a7       	std	Y+47, r24	; 0x2f
    51fe:	3f c0       	rjmp	.+126    	; 0x527e <main+0x1346>
	else if (__tmp > 65535)
    5200:	69 a9       	ldd	r22, Y+49	; 0x31
    5202:	7a a9       	ldd	r23, Y+50	; 0x32
    5204:	8b a9       	ldd	r24, Y+51	; 0x33
    5206:	9c a9       	ldd	r25, Y+52	; 0x34
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	3f ef       	ldi	r19, 0xFF	; 255
    520c:	4f e7       	ldi	r20, 0x7F	; 127
    520e:	57 e4       	ldi	r21, 0x47	; 71
    5210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5214:	18 16       	cp	r1, r24
    5216:	4c f5       	brge	.+82     	; 0x526a <main+0x1332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5218:	6d a9       	ldd	r22, Y+53	; 0x35
    521a:	7e a9       	ldd	r23, Y+54	; 0x36
    521c:	8f a9       	ldd	r24, Y+55	; 0x37
    521e:	98 ad       	ldd	r25, Y+56	; 0x38
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e2       	ldi	r20, 0x20	; 32
    5226:	51 e4       	ldi	r21, 0x41	; 65
    5228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	bc 01       	movw	r22, r24
    5232:	cd 01       	movw	r24, r26
    5234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	98 ab       	std	Y+48, r25	; 0x30
    523e:	8f a7       	std	Y+47, r24	; 0x2f
    5240:	0f c0       	rjmp	.+30     	; 0x5260 <main+0x1328>
    5242:	88 ec       	ldi	r24, 0xC8	; 200
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	9e a7       	std	Y+46, r25	; 0x2e
    5248:	8d a7       	std	Y+45, r24	; 0x2d
    524a:	8d a5       	ldd	r24, Y+45	; 0x2d
    524c:	9e a5       	ldd	r25, Y+46	; 0x2e
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	f1 f7       	brne	.-4      	; 0x524e <main+0x1316>
    5252:	9e a7       	std	Y+46, r25	; 0x2e
    5254:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5256:	8f a5       	ldd	r24, Y+47	; 0x2f
    5258:	98 a9       	ldd	r25, Y+48	; 0x30
    525a:	01 97       	sbiw	r24, 0x01	; 1
    525c:	98 ab       	std	Y+48, r25	; 0x30
    525e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5260:	8f a5       	ldd	r24, Y+47	; 0x2f
    5262:	98 a9       	ldd	r25, Y+48	; 0x30
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	69 f7       	brne	.-38     	; 0x5242 <main+0x130a>
    5268:	14 c0       	rjmp	.+40     	; 0x5292 <main+0x135a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    526a:	69 a9       	ldd	r22, Y+49	; 0x31
    526c:	7a a9       	ldd	r23, Y+50	; 0x32
    526e:	8b a9       	ldd	r24, Y+51	; 0x33
    5270:	9c a9       	ldd	r25, Y+52	; 0x34
    5272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5276:	dc 01       	movw	r26, r24
    5278:	cb 01       	movw	r24, r22
    527a:	98 ab       	std	Y+48, r25	; 0x30
    527c:	8f a7       	std	Y+47, r24	; 0x2f
    527e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5280:	98 a9       	ldd	r25, Y+48	; 0x30
    5282:	9c a7       	std	Y+44, r25	; 0x2c
    5284:	8b a7       	std	Y+43, r24	; 0x2b
    5286:	8b a5       	ldd	r24, Y+43	; 0x2b
    5288:	9c a5       	ldd	r25, Y+44	; 0x2c
    528a:	01 97       	sbiw	r24, 0x01	; 1
    528c:	f1 f7       	brne	.-4      	; 0x528a <main+0x1352>
    528e:	9c a7       	std	Y+44, r25	; 0x2c
    5290:	8b a7       	std	Y+43, r24	; 0x2b
				{
					_delay_ms(1000);
					LED_voidLedOnOff(PORTA , PIN0 , ON);
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	60 e0       	ldi	r22, 0x00	; 0
    5296:	41 e0       	ldi	r20, 0x01	; 1
    5298:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LED_voidLedOnOff>
    529c:	7c c0       	rjmp	.+248    	; 0x5396 <main+0x145e>
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	aa e7       	ldi	r26, 0x7A	; 122
    52a4:	b4 e4       	ldi	r27, 0x44	; 68
    52a6:	8f a3       	std	Y+39, r24	; 0x27
    52a8:	98 a7       	std	Y+40, r25	; 0x28
    52aa:	a9 a7       	std	Y+41, r26	; 0x29
    52ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ae:	6f a1       	ldd	r22, Y+39	; 0x27
    52b0:	78 a5       	ldd	r23, Y+40	; 0x28
    52b2:	89 a5       	ldd	r24, Y+41	; 0x29
    52b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	4a ef       	ldi	r20, 0xFA	; 250
    52bc:	54 e4       	ldi	r21, 0x44	; 68
    52be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c2:	dc 01       	movw	r26, r24
    52c4:	cb 01       	movw	r24, r22
    52c6:	8b a3       	std	Y+35, r24	; 0x23
    52c8:	9c a3       	std	Y+36, r25	; 0x24
    52ca:	ad a3       	std	Y+37, r26	; 0x25
    52cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52ce:	6b a1       	ldd	r22, Y+35	; 0x23
    52d0:	7c a1       	ldd	r23, Y+36	; 0x24
    52d2:	8d a1       	ldd	r24, Y+37	; 0x25
    52d4:	9e a1       	ldd	r25, Y+38	; 0x26
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	40 e8       	ldi	r20, 0x80	; 128
    52dc:	5f e3       	ldi	r21, 0x3F	; 63
    52de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52e2:	88 23       	and	r24, r24
    52e4:	2c f4       	brge	.+10     	; 0x52f0 <main+0x13b8>
		__ticks = 1;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	9a a3       	std	Y+34, r25	; 0x22
    52ec:	89 a3       	std	Y+33, r24	; 0x21
    52ee:	3f c0       	rjmp	.+126    	; 0x536e <main+0x1436>
	else if (__tmp > 65535)
    52f0:	6b a1       	ldd	r22, Y+35	; 0x23
    52f2:	7c a1       	ldd	r23, Y+36	; 0x24
    52f4:	8d a1       	ldd	r24, Y+37	; 0x25
    52f6:	9e a1       	ldd	r25, Y+38	; 0x26
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	3f ef       	ldi	r19, 0xFF	; 255
    52fc:	4f e7       	ldi	r20, 0x7F	; 127
    52fe:	57 e4       	ldi	r21, 0x47	; 71
    5300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5304:	18 16       	cp	r1, r24
    5306:	4c f5       	brge	.+82     	; 0x535a <main+0x1422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5308:	6f a1       	ldd	r22, Y+39	; 0x27
    530a:	78 a5       	ldd	r23, Y+40	; 0x28
    530c:	89 a5       	ldd	r24, Y+41	; 0x29
    530e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e2       	ldi	r20, 0x20	; 32
    5316:	51 e4       	ldi	r21, 0x41	; 65
    5318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    531c:	dc 01       	movw	r26, r24
    531e:	cb 01       	movw	r24, r22
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	9a a3       	std	Y+34, r25	; 0x22
    532e:	89 a3       	std	Y+33, r24	; 0x21
    5330:	0f c0       	rjmp	.+30     	; 0x5350 <main+0x1418>
    5332:	88 ec       	ldi	r24, 0xC8	; 200
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	98 a3       	std	Y+32, r25	; 0x20
    5338:	8f 8f       	std	Y+31, r24	; 0x1f
    533a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    533c:	98 a1       	ldd	r25, Y+32	; 0x20
    533e:	01 97       	sbiw	r24, 0x01	; 1
    5340:	f1 f7       	brne	.-4      	; 0x533e <main+0x1406>
    5342:	98 a3       	std	Y+32, r25	; 0x20
    5344:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5346:	89 a1       	ldd	r24, Y+33	; 0x21
    5348:	9a a1       	ldd	r25, Y+34	; 0x22
    534a:	01 97       	sbiw	r24, 0x01	; 1
    534c:	9a a3       	std	Y+34, r25	; 0x22
    534e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5350:	89 a1       	ldd	r24, Y+33	; 0x21
    5352:	9a a1       	ldd	r25, Y+34	; 0x22
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	69 f7       	brne	.-38     	; 0x5332 <main+0x13fa>
    5358:	14 c0       	rjmp	.+40     	; 0x5382 <main+0x144a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535a:	6b a1       	ldd	r22, Y+35	; 0x23
    535c:	7c a1       	ldd	r23, Y+36	; 0x24
    535e:	8d a1       	ldd	r24, Y+37	; 0x25
    5360:	9e a1       	ldd	r25, Y+38	; 0x26
    5362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5366:	dc 01       	movw	r26, r24
    5368:	cb 01       	movw	r24, r22
    536a:	9a a3       	std	Y+34, r25	; 0x22
    536c:	89 a3       	std	Y+33, r24	; 0x21
    536e:	89 a1       	ldd	r24, Y+33	; 0x21
    5370:	9a a1       	ldd	r25, Y+34	; 0x22
    5372:	9e 8f       	std	Y+30, r25	; 0x1e
    5374:	8d 8f       	std	Y+29, r24	; 0x1d
    5376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <main+0x1442>
    537e:	9e 8f       	std	Y+30, r25	; 0x1e
    5380:	8d 8f       	std	Y+29, r24	; 0x1d
				}
				else
				{
					_delay_ms(1000);
					LED_voidLedOnOff(PORTA , PIN0 , OFF);
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	60 e0       	ldi	r22, 0x00	; 0
    5386:	40 e0       	ldi	r20, 0x00	; 0
    5388:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <LED_voidLedOnOff>
					STP_voidDirectionAngle(ClockWise , 120) ;
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	68 e7       	ldi	r22, 0x78	; 120
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	0e 94 28 10 	call	0x2050	; 0x2050 <STP_voidDirectionAngle>
				}

				Read2 = ADC_voidGetAnalogRead(ADC2);
    5396:	82 e0       	ldi	r24, 0x02	; 2
    5398:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <ADC_voidGetAnalogRead>
    539c:	dc 01       	movw	r26, r24
    539e:	cb 01       	movw	r24, r22
    53a0:	fe 01       	movw	r30, r28
    53a2:	e9 52       	subi	r30, 0x29	; 41
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 83       	st	Z, r24
    53a8:	91 83       	std	Z+1, r25	; 0x01
    53aa:	a2 83       	std	Z+2, r26	; 0x02
    53ac:	b3 83       	std	Z+3, r27	; 0x03
				Temp = Read2 / 10 ;
    53ae:	8e 01       	movw	r16, r28
    53b0:	0d 52       	subi	r16, 0x2D	; 45
    53b2:	1f 4f       	sbci	r17, 0xFF	; 255
    53b4:	fe 01       	movw	r30, r28
    53b6:	e9 52       	subi	r30, 0x29	; 41
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	80 81       	ld	r24, Z
    53bc:	91 81       	ldd	r25, Z+1	; 0x01
    53be:	a2 81       	ldd	r26, Z+2	; 0x02
    53c0:	b3 81       	ldd	r27, Z+3	; 0x03
    53c2:	2a e0       	ldi	r18, 0x0A	; 10
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	40 e0       	ldi	r20, 0x00	; 0
    53c8:	50 e0       	ldi	r21, 0x00	; 0
    53ca:	bc 01       	movw	r22, r24
    53cc:	cd 01       	movw	r24, r26
    53ce:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodsi4>
    53d2:	da 01       	movw	r26, r20
    53d4:	c9 01       	movw	r24, r18
    53d6:	f8 01       	movw	r30, r16
    53d8:	80 83       	st	Z, r24
    53da:	91 83       	std	Z+1, r25	; 0x01
    53dc:	a2 83       	std	Z+2, r26	; 0x02
    53de:	b3 83       	std	Z+3, r27	; 0x03
				if(Temp>=30)
    53e0:	fe 01       	movw	r30, r28
    53e2:	ed 52       	subi	r30, 0x2D	; 45
    53e4:	ff 4f       	sbci	r31, 0xFF	; 255
    53e6:	80 81       	ld	r24, Z
    53e8:	91 81       	ldd	r25, Z+1	; 0x01
    53ea:	a2 81       	ldd	r26, Z+2	; 0x02
    53ec:	b3 81       	ldd	r27, Z+3	; 0x03
    53ee:	8e 31       	cpi	r24, 0x1E	; 30
    53f0:	91 05       	cpc	r25, r1
    53f2:	a1 05       	cpc	r26, r1
    53f4:	b1 05       	cpc	r27, r1
    53f6:	08 f4       	brcc	.+2      	; 0x53fa <main+0x14c2>
    53f8:	78 c0       	rjmp	.+240    	; 0x54ea <main+0x15b2>
    53fa:	80 e0       	ldi	r24, 0x00	; 0
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	aa e7       	ldi	r26, 0x7A	; 122
    5400:	b4 e4       	ldi	r27, 0x44	; 68
    5402:	89 8f       	std	Y+25, r24	; 0x19
    5404:	9a 8f       	std	Y+26, r25	; 0x1a
    5406:	ab 8f       	std	Y+27, r26	; 0x1b
    5408:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    540a:	69 8d       	ldd	r22, Y+25	; 0x19
    540c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    540e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	4a ef       	ldi	r20, 0xFA	; 250
    5418:	54 e4       	ldi	r21, 0x44	; 68
    541a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	8d 8b       	std	Y+21, r24	; 0x15
    5424:	9e 8b       	std	Y+22, r25	; 0x16
    5426:	af 8b       	std	Y+23, r26	; 0x17
    5428:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    542a:	6d 89       	ldd	r22, Y+21	; 0x15
    542c:	7e 89       	ldd	r23, Y+22	; 0x16
    542e:	8f 89       	ldd	r24, Y+23	; 0x17
    5430:	98 8d       	ldd	r25, Y+24	; 0x18
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	40 e8       	ldi	r20, 0x80	; 128
    5438:	5f e3       	ldi	r21, 0x3F	; 63
    543a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    543e:	88 23       	and	r24, r24
    5440:	2c f4       	brge	.+10     	; 0x544c <main+0x1514>
		__ticks = 1;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	9c 8b       	std	Y+20, r25	; 0x14
    5448:	8b 8b       	std	Y+19, r24	; 0x13
    544a:	3f c0       	rjmp	.+126    	; 0x54ca <main+0x1592>
	else if (__tmp > 65535)
    544c:	6d 89       	ldd	r22, Y+21	; 0x15
    544e:	7e 89       	ldd	r23, Y+22	; 0x16
    5450:	8f 89       	ldd	r24, Y+23	; 0x17
    5452:	98 8d       	ldd	r25, Y+24	; 0x18
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	3f ef       	ldi	r19, 0xFF	; 255
    5458:	4f e7       	ldi	r20, 0x7F	; 127
    545a:	57 e4       	ldi	r21, 0x47	; 71
    545c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5460:	18 16       	cp	r1, r24
    5462:	4c f5       	brge	.+82     	; 0x54b6 <main+0x157e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5464:	69 8d       	ldd	r22, Y+25	; 0x19
    5466:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    546a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	40 e2       	ldi	r20, 0x20	; 32
    5472:	51 e4       	ldi	r21, 0x41	; 65
    5474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	bc 01       	movw	r22, r24
    547e:	cd 01       	movw	r24, r26
    5480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	9c 8b       	std	Y+20, r25	; 0x14
    548a:	8b 8b       	std	Y+19, r24	; 0x13
    548c:	0f c0       	rjmp	.+30     	; 0x54ac <main+0x1574>
    548e:	88 ec       	ldi	r24, 0xC8	; 200
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	9a 8b       	std	Y+18, r25	; 0x12
    5494:	89 8b       	std	Y+17, r24	; 0x11
    5496:	89 89       	ldd	r24, Y+17	; 0x11
    5498:	9a 89       	ldd	r25, Y+18	; 0x12
    549a:	01 97       	sbiw	r24, 0x01	; 1
    549c:	f1 f7       	brne	.-4      	; 0x549a <main+0x1562>
    549e:	9a 8b       	std	Y+18, r25	; 0x12
    54a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a2:	8b 89       	ldd	r24, Y+19	; 0x13
    54a4:	9c 89       	ldd	r25, Y+20	; 0x14
    54a6:	01 97       	sbiw	r24, 0x01	; 1
    54a8:	9c 8b       	std	Y+20, r25	; 0x14
    54aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ac:	8b 89       	ldd	r24, Y+19	; 0x13
    54ae:	9c 89       	ldd	r25, Y+20	; 0x14
    54b0:	00 97       	sbiw	r24, 0x00	; 0
    54b2:	69 f7       	brne	.-38     	; 0x548e <main+0x1556>
    54b4:	14 c0       	rjmp	.+40     	; 0x54de <main+0x15a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b6:	6d 89       	ldd	r22, Y+21	; 0x15
    54b8:	7e 89       	ldd	r23, Y+22	; 0x16
    54ba:	8f 89       	ldd	r24, Y+23	; 0x17
    54bc:	98 8d       	ldd	r25, Y+24	; 0x18
    54be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	9c 8b       	std	Y+20, r25	; 0x14
    54c8:	8b 8b       	std	Y+19, r24	; 0x13
    54ca:	8b 89       	ldd	r24, Y+19	; 0x13
    54cc:	9c 89       	ldd	r25, Y+20	; 0x14
    54ce:	98 8b       	std	Y+16, r25	; 0x10
    54d0:	8f 87       	std	Y+15, r24	; 0x0f
    54d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54d4:	98 89       	ldd	r25, Y+16	; 0x10
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	f1 f7       	brne	.-4      	; 0x54d6 <main+0x159e>
    54da:	98 8b       	std	Y+16, r25	; 0x10
    54dc:	8f 87       	std	Y+15, r24	; 0x0f
				{

					_delay_ms(1000);
					DIO_voidSetPinvalue(PORTA , PIN7 , HIGH);
    54de:	80 e0       	ldi	r24, 0x00	; 0
    54e0:	67 e0       	ldi	r22, 0x07	; 7
    54e2:	41 e0       	ldi	r20, 0x01	; 1
    54e4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    54e8:	46 ce       	rjmp	.-884    	; 0x5176 <main+0x123e>
				}
				else if (Temp<30)
    54ea:	fe 01       	movw	r30, r28
    54ec:	ed 52       	subi	r30, 0x2D	; 45
    54ee:	ff 4f       	sbci	r31, 0xFF	; 255
    54f0:	80 81       	ld	r24, Z
    54f2:	91 81       	ldd	r25, Z+1	; 0x01
    54f4:	a2 81       	ldd	r26, Z+2	; 0x02
    54f6:	b3 81       	ldd	r27, Z+3	; 0x03
    54f8:	8e 31       	cpi	r24, 0x1E	; 30
    54fa:	91 05       	cpc	r25, r1
    54fc:	a1 05       	cpc	r26, r1
    54fe:	b1 05       	cpc	r27, r1
    5500:	08 f0       	brcs	.+2      	; 0x5504 <main+0x15cc>
    5502:	39 ce       	rjmp	.-910    	; 0x5176 <main+0x123e>
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	aa e7       	ldi	r26, 0x7A	; 122
    550a:	b4 e4       	ldi	r27, 0x44	; 68
    550c:	8b 87       	std	Y+11, r24	; 0x0b
    550e:	9c 87       	std	Y+12, r25	; 0x0c
    5510:	ad 87       	std	Y+13, r26	; 0x0d
    5512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5514:	6b 85       	ldd	r22, Y+11	; 0x0b
    5516:	7c 85       	ldd	r23, Y+12	; 0x0c
    5518:	8d 85       	ldd	r24, Y+13	; 0x0d
    551a:	9e 85       	ldd	r25, Y+14	; 0x0e
    551c:	20 e0       	ldi	r18, 0x00	; 0
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	4a ef       	ldi	r20, 0xFA	; 250
    5522:	54 e4       	ldi	r21, 0x44	; 68
    5524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5528:	dc 01       	movw	r26, r24
    552a:	cb 01       	movw	r24, r22
    552c:	8f 83       	std	Y+7, r24	; 0x07
    552e:	98 87       	std	Y+8, r25	; 0x08
    5530:	a9 87       	std	Y+9, r26	; 0x09
    5532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5534:	6f 81       	ldd	r22, Y+7	; 0x07
    5536:	78 85       	ldd	r23, Y+8	; 0x08
    5538:	89 85       	ldd	r24, Y+9	; 0x09
    553a:	9a 85       	ldd	r25, Y+10	; 0x0a
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e8       	ldi	r20, 0x80	; 128
    5542:	5f e3       	ldi	r21, 0x3F	; 63
    5544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5548:	88 23       	and	r24, r24
    554a:	2c f4       	brge	.+10     	; 0x5556 <main+0x161e>
		__ticks = 1;
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	9e 83       	std	Y+6, r25	; 0x06
    5552:	8d 83       	std	Y+5, r24	; 0x05
    5554:	3f c0       	rjmp	.+126    	; 0x55d4 <main+0x169c>
	else if (__tmp > 65535)
    5556:	6f 81       	ldd	r22, Y+7	; 0x07
    5558:	78 85       	ldd	r23, Y+8	; 0x08
    555a:	89 85       	ldd	r24, Y+9	; 0x09
    555c:	9a 85       	ldd	r25, Y+10	; 0x0a
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	3f ef       	ldi	r19, 0xFF	; 255
    5562:	4f e7       	ldi	r20, 0x7F	; 127
    5564:	57 e4       	ldi	r21, 0x47	; 71
    5566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    556a:	18 16       	cp	r1, r24
    556c:	4c f5       	brge	.+82     	; 0x55c0 <main+0x1688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    556e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5570:	7c 85       	ldd	r23, Y+12	; 0x0c
    5572:	8d 85       	ldd	r24, Y+13	; 0x0d
    5574:	9e 85       	ldd	r25, Y+14	; 0x0e
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	40 e2       	ldi	r20, 0x20	; 32
    557c:	51 e4       	ldi	r21, 0x41	; 65
    557e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	bc 01       	movw	r22, r24
    5588:	cd 01       	movw	r24, r26
    558a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    558e:	dc 01       	movw	r26, r24
    5590:	cb 01       	movw	r24, r22
    5592:	9e 83       	std	Y+6, r25	; 0x06
    5594:	8d 83       	std	Y+5, r24	; 0x05
    5596:	0f c0       	rjmp	.+30     	; 0x55b6 <main+0x167e>
    5598:	88 ec       	ldi	r24, 0xC8	; 200
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	9c 83       	std	Y+4, r25	; 0x04
    559e:	8b 83       	std	Y+3, r24	; 0x03
    55a0:	8b 81       	ldd	r24, Y+3	; 0x03
    55a2:	9c 81       	ldd	r25, Y+4	; 0x04
    55a4:	01 97       	sbiw	r24, 0x01	; 1
    55a6:	f1 f7       	brne	.-4      	; 0x55a4 <main+0x166c>
    55a8:	9c 83       	std	Y+4, r25	; 0x04
    55aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ac:	8d 81       	ldd	r24, Y+5	; 0x05
    55ae:	9e 81       	ldd	r25, Y+6	; 0x06
    55b0:	01 97       	sbiw	r24, 0x01	; 1
    55b2:	9e 83       	std	Y+6, r25	; 0x06
    55b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b6:	8d 81       	ldd	r24, Y+5	; 0x05
    55b8:	9e 81       	ldd	r25, Y+6	; 0x06
    55ba:	00 97       	sbiw	r24, 0x00	; 0
    55bc:	69 f7       	brne	.-38     	; 0x5598 <main+0x1660>
    55be:	14 c0       	rjmp	.+40     	; 0x55e8 <main+0x16b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c0:	6f 81       	ldd	r22, Y+7	; 0x07
    55c2:	78 85       	ldd	r23, Y+8	; 0x08
    55c4:	89 85       	ldd	r24, Y+9	; 0x09
    55c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55cc:	dc 01       	movw	r26, r24
    55ce:	cb 01       	movw	r24, r22
    55d0:	9e 83       	std	Y+6, r25	; 0x06
    55d2:	8d 83       	std	Y+5, r24	; 0x05
    55d4:	8d 81       	ldd	r24, Y+5	; 0x05
    55d6:	9e 81       	ldd	r25, Y+6	; 0x06
    55d8:	9a 83       	std	Y+2, r25	; 0x02
    55da:	89 83       	std	Y+1, r24	; 0x01
    55dc:	89 81       	ldd	r24, Y+1	; 0x01
    55de:	9a 81       	ldd	r25, Y+2	; 0x02
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <main+0x16a8>
    55e4:	9a 83       	std	Y+2, r25	; 0x02
    55e6:	89 83       	std	Y+1, r24	; 0x01
				{

					_delay_ms(1000);
					DIO_voidSetPinvalue(PORTA , PIN7 , LOW);
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	67 e0       	ldi	r22, 0x07	; 7
    55ec:	40 e0       	ldi	r20, 0x00	; 0
    55ee:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    55f2:	c1 cd       	rjmp	.-1150   	; 0x5176 <main+0x123e>

000055f4 <Emergeny>:
	return 0 ;
}


void Emergeny(void)
{
    55f4:	df 93       	push	r29
    55f6:	cf 93       	push	r28
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	2e 97       	sbiw	r28, 0x0e	; 14
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	f8 94       	cli
    5602:	de bf       	out	0x3e, r29	; 62
    5604:	0f be       	out	0x3f, r0	; 63
    5606:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
    5608:	83 e0       	ldi	r24, 0x03	; 3
    560a:	63 e0       	ldi	r22, 0x03	; 3
    560c:	41 e0       	ldi	r20, 0x01	; 1
    560e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinvalue>
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	90 e4       	ldi	r25, 0x40	; 64
    5616:	ac e1       	ldi	r26, 0x1C	; 28
    5618:	b6 e4       	ldi	r27, 0x46	; 70
    561a:	8b 87       	std	Y+11, r24	; 0x0b
    561c:	9c 87       	std	Y+12, r25	; 0x0c
    561e:	ad 87       	std	Y+13, r26	; 0x0d
    5620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5622:	6b 85       	ldd	r22, Y+11	; 0x0b
    5624:	7c 85       	ldd	r23, Y+12	; 0x0c
    5626:	8d 85       	ldd	r24, Y+13	; 0x0d
    5628:	9e 85       	ldd	r25, Y+14	; 0x0e
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	4a ef       	ldi	r20, 0xFA	; 250
    5630:	54 e4       	ldi	r21, 0x44	; 68
    5632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	8f 83       	std	Y+7, r24	; 0x07
    563c:	98 87       	std	Y+8, r25	; 0x08
    563e:	a9 87       	std	Y+9, r26	; 0x09
    5640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5642:	6f 81       	ldd	r22, Y+7	; 0x07
    5644:	78 85       	ldd	r23, Y+8	; 0x08
    5646:	89 85       	ldd	r24, Y+9	; 0x09
    5648:	9a 85       	ldd	r25, Y+10	; 0x0a
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e8       	ldi	r20, 0x80	; 128
    5650:	5f e3       	ldi	r21, 0x3F	; 63
    5652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5656:	88 23       	and	r24, r24
    5658:	2c f4       	brge	.+10     	; 0x5664 <Emergeny+0x70>
		__ticks = 1;
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	9e 83       	std	Y+6, r25	; 0x06
    5660:	8d 83       	std	Y+5, r24	; 0x05
    5662:	3f c0       	rjmp	.+126    	; 0x56e2 <Emergeny+0xee>
	else if (__tmp > 65535)
    5664:	6f 81       	ldd	r22, Y+7	; 0x07
    5666:	78 85       	ldd	r23, Y+8	; 0x08
    5668:	89 85       	ldd	r24, Y+9	; 0x09
    566a:	9a 85       	ldd	r25, Y+10	; 0x0a
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	3f ef       	ldi	r19, 0xFF	; 255
    5670:	4f e7       	ldi	r20, 0x7F	; 127
    5672:	57 e4       	ldi	r21, 0x47	; 71
    5674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5678:	18 16       	cp	r1, r24
    567a:	4c f5       	brge	.+82     	; 0x56ce <Emergeny+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    567c:	6b 85       	ldd	r22, Y+11	; 0x0b
    567e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5680:	8d 85       	ldd	r24, Y+13	; 0x0d
    5682:	9e 85       	ldd	r25, Y+14	; 0x0e
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	40 e2       	ldi	r20, 0x20	; 32
    568a:	51 e4       	ldi	r21, 0x41	; 65
    568c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	bc 01       	movw	r22, r24
    5696:	cd 01       	movw	r24, r26
    5698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    569c:	dc 01       	movw	r26, r24
    569e:	cb 01       	movw	r24, r22
    56a0:	9e 83       	std	Y+6, r25	; 0x06
    56a2:	8d 83       	std	Y+5, r24	; 0x05
    56a4:	0f c0       	rjmp	.+30     	; 0x56c4 <Emergeny+0xd0>
    56a6:	88 ec       	ldi	r24, 0xC8	; 200
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	9c 83       	std	Y+4, r25	; 0x04
    56ac:	8b 83       	std	Y+3, r24	; 0x03
    56ae:	8b 81       	ldd	r24, Y+3	; 0x03
    56b0:	9c 81       	ldd	r25, Y+4	; 0x04
    56b2:	01 97       	sbiw	r24, 0x01	; 1
    56b4:	f1 f7       	brne	.-4      	; 0x56b2 <Emergeny+0xbe>
    56b6:	9c 83       	std	Y+4, r25	; 0x04
    56b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ba:	8d 81       	ldd	r24, Y+5	; 0x05
    56bc:	9e 81       	ldd	r25, Y+6	; 0x06
    56be:	01 97       	sbiw	r24, 0x01	; 1
    56c0:	9e 83       	std	Y+6, r25	; 0x06
    56c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c4:	8d 81       	ldd	r24, Y+5	; 0x05
    56c6:	9e 81       	ldd	r25, Y+6	; 0x06
    56c8:	00 97       	sbiw	r24, 0x00	; 0
    56ca:	69 f7       	brne	.-38     	; 0x56a6 <Emergeny+0xb2>
    56cc:	14 c0       	rjmp	.+40     	; 0x56f6 <Emergeny+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ce:	6f 81       	ldd	r22, Y+7	; 0x07
    56d0:	78 85       	ldd	r23, Y+8	; 0x08
    56d2:	89 85       	ldd	r24, Y+9	; 0x09
    56d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	9e 83       	std	Y+6, r25	; 0x06
    56e0:	8d 83       	std	Y+5, r24	; 0x05
    56e2:	8d 81       	ldd	r24, Y+5	; 0x05
    56e4:	9e 81       	ldd	r25, Y+6	; 0x06
    56e6:	9a 83       	std	Y+2, r25	; 0x02
    56e8:	89 83       	std	Y+1, r24	; 0x01
    56ea:	89 81       	ldd	r24, Y+1	; 0x01
    56ec:	9a 81       	ldd	r25, Y+2	; 0x02
    56ee:	01 97       	sbiw	r24, 0x01	; 1
    56f0:	f1 f7       	brne	.-4      	; 0x56ee <Emergeny+0xfa>
    56f2:	9a 83       	std	Y+2, r25	; 0x02
    56f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);

}
    56f6:	2e 96       	adiw	r28, 0x0e	; 14
    56f8:	0f b6       	in	r0, 0x3f	; 63
    56fa:	f8 94       	cli
    56fc:	de bf       	out	0x3e, r29	; 62
    56fe:	0f be       	out	0x3f, r0	; 63
    5700:	cd bf       	out	0x3d, r28	; 61
    5702:	cf 91       	pop	r28
    5704:	df 91       	pop	r29
    5706:	08 95       	ret

00005708 <__mulsi3>:
    5708:	62 9f       	mul	r22, r18
    570a:	d0 01       	movw	r26, r0
    570c:	73 9f       	mul	r23, r19
    570e:	f0 01       	movw	r30, r0
    5710:	82 9f       	mul	r24, r18
    5712:	e0 0d       	add	r30, r0
    5714:	f1 1d       	adc	r31, r1
    5716:	64 9f       	mul	r22, r20
    5718:	e0 0d       	add	r30, r0
    571a:	f1 1d       	adc	r31, r1
    571c:	92 9f       	mul	r25, r18
    571e:	f0 0d       	add	r31, r0
    5720:	83 9f       	mul	r24, r19
    5722:	f0 0d       	add	r31, r0
    5724:	74 9f       	mul	r23, r20
    5726:	f0 0d       	add	r31, r0
    5728:	65 9f       	mul	r22, r21
    572a:	f0 0d       	add	r31, r0
    572c:	99 27       	eor	r25, r25
    572e:	72 9f       	mul	r23, r18
    5730:	b0 0d       	add	r27, r0
    5732:	e1 1d       	adc	r30, r1
    5734:	f9 1f       	adc	r31, r25
    5736:	63 9f       	mul	r22, r19
    5738:	b0 0d       	add	r27, r0
    573a:	e1 1d       	adc	r30, r1
    573c:	f9 1f       	adc	r31, r25
    573e:	bd 01       	movw	r22, r26
    5740:	cf 01       	movw	r24, r30
    5742:	11 24       	eor	r1, r1
    5744:	08 95       	ret

00005746 <__udivmodhi4>:
    5746:	aa 1b       	sub	r26, r26
    5748:	bb 1b       	sub	r27, r27
    574a:	51 e1       	ldi	r21, 0x11	; 17
    574c:	07 c0       	rjmp	.+14     	; 0x575c <__udivmodhi4_ep>

0000574e <__udivmodhi4_loop>:
    574e:	aa 1f       	adc	r26, r26
    5750:	bb 1f       	adc	r27, r27
    5752:	a6 17       	cp	r26, r22
    5754:	b7 07       	cpc	r27, r23
    5756:	10 f0       	brcs	.+4      	; 0x575c <__udivmodhi4_ep>
    5758:	a6 1b       	sub	r26, r22
    575a:	b7 0b       	sbc	r27, r23

0000575c <__udivmodhi4_ep>:
    575c:	88 1f       	adc	r24, r24
    575e:	99 1f       	adc	r25, r25
    5760:	5a 95       	dec	r21
    5762:	a9 f7       	brne	.-22     	; 0x574e <__udivmodhi4_loop>
    5764:	80 95       	com	r24
    5766:	90 95       	com	r25
    5768:	bc 01       	movw	r22, r24
    576a:	cd 01       	movw	r24, r26
    576c:	08 95       	ret

0000576e <__udivmodsi4>:
    576e:	a1 e2       	ldi	r26, 0x21	; 33
    5770:	1a 2e       	mov	r1, r26
    5772:	aa 1b       	sub	r26, r26
    5774:	bb 1b       	sub	r27, r27
    5776:	fd 01       	movw	r30, r26
    5778:	0d c0       	rjmp	.+26     	; 0x5794 <__udivmodsi4_ep>

0000577a <__udivmodsi4_loop>:
    577a:	aa 1f       	adc	r26, r26
    577c:	bb 1f       	adc	r27, r27
    577e:	ee 1f       	adc	r30, r30
    5780:	ff 1f       	adc	r31, r31
    5782:	a2 17       	cp	r26, r18
    5784:	b3 07       	cpc	r27, r19
    5786:	e4 07       	cpc	r30, r20
    5788:	f5 07       	cpc	r31, r21
    578a:	20 f0       	brcs	.+8      	; 0x5794 <__udivmodsi4_ep>
    578c:	a2 1b       	sub	r26, r18
    578e:	b3 0b       	sbc	r27, r19
    5790:	e4 0b       	sbc	r30, r20
    5792:	f5 0b       	sbc	r31, r21

00005794 <__udivmodsi4_ep>:
    5794:	66 1f       	adc	r22, r22
    5796:	77 1f       	adc	r23, r23
    5798:	88 1f       	adc	r24, r24
    579a:	99 1f       	adc	r25, r25
    579c:	1a 94       	dec	r1
    579e:	69 f7       	brne	.-38     	; 0x577a <__udivmodsi4_loop>
    57a0:	60 95       	com	r22
    57a2:	70 95       	com	r23
    57a4:	80 95       	com	r24
    57a6:	90 95       	com	r25
    57a8:	9b 01       	movw	r18, r22
    57aa:	ac 01       	movw	r20, r24
    57ac:	bd 01       	movw	r22, r26
    57ae:	cf 01       	movw	r24, r30
    57b0:	08 95       	ret

000057b2 <__prologue_saves__>:
    57b2:	2f 92       	push	r2
    57b4:	3f 92       	push	r3
    57b6:	4f 92       	push	r4
    57b8:	5f 92       	push	r5
    57ba:	6f 92       	push	r6
    57bc:	7f 92       	push	r7
    57be:	8f 92       	push	r8
    57c0:	9f 92       	push	r9
    57c2:	af 92       	push	r10
    57c4:	bf 92       	push	r11
    57c6:	cf 92       	push	r12
    57c8:	df 92       	push	r13
    57ca:	ef 92       	push	r14
    57cc:	ff 92       	push	r15
    57ce:	0f 93       	push	r16
    57d0:	1f 93       	push	r17
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	cd b7       	in	r28, 0x3d	; 61
    57d8:	de b7       	in	r29, 0x3e	; 62
    57da:	ca 1b       	sub	r28, r26
    57dc:	db 0b       	sbc	r29, r27
    57de:	0f b6       	in	r0, 0x3f	; 63
    57e0:	f8 94       	cli
    57e2:	de bf       	out	0x3e, r29	; 62
    57e4:	0f be       	out	0x3f, r0	; 63
    57e6:	cd bf       	out	0x3d, r28	; 61
    57e8:	09 94       	ijmp

000057ea <__epilogue_restores__>:
    57ea:	2a 88       	ldd	r2, Y+18	; 0x12
    57ec:	39 88       	ldd	r3, Y+17	; 0x11
    57ee:	48 88       	ldd	r4, Y+16	; 0x10
    57f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    57f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    57f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    57f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    57f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    57fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    57fc:	b9 84       	ldd	r11, Y+9	; 0x09
    57fe:	c8 84       	ldd	r12, Y+8	; 0x08
    5800:	df 80       	ldd	r13, Y+7	; 0x07
    5802:	ee 80       	ldd	r14, Y+6	; 0x06
    5804:	fd 80       	ldd	r15, Y+5	; 0x05
    5806:	0c 81       	ldd	r16, Y+4	; 0x04
    5808:	1b 81       	ldd	r17, Y+3	; 0x03
    580a:	aa 81       	ldd	r26, Y+2	; 0x02
    580c:	b9 81       	ldd	r27, Y+1	; 0x01
    580e:	ce 0f       	add	r28, r30
    5810:	d1 1d       	adc	r29, r1
    5812:	0f b6       	in	r0, 0x3f	; 63
    5814:	f8 94       	cli
    5816:	de bf       	out	0x3e, r29	; 62
    5818:	0f be       	out	0x3f, r0	; 63
    581a:	cd bf       	out	0x3d, r28	; 61
    581c:	ed 01       	movw	r28, r26
    581e:	08 95       	ret

00005820 <_exit>:
    5820:	f8 94       	cli

00005822 <__stop_program>:
    5822:	ff cf       	rjmp	.-2      	; 0x5822 <__stop_program>
