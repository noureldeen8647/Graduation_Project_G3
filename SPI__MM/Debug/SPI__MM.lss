
SPI__MM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00005822  000058b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080011c  0080011c  00005972  2**0
                  ALLOC
  3 .stab         00004eb4  00000000  00000000  00005974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001690  00000000  00000000  0000a828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ec9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fa4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fe39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_1>
       8:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_2>
       c:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_10>
      2c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <main>
      8a:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 2b 	jmp	0x57b0	; 0x57b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ef       	ldi	r26, 0xF9	; 249
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 2b 	jmp	0x57b0	; 0x57b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Select UCSRA
	SET_BIT(UART_UCSRC_REG , 7) ;
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24

	//selsect Asynch(baud rate)
	CLR_BIT(UART_UCSRC_REG , 6) ;
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24

	//parity disable(error)
	CLR_BIT(UART_UCSRC_REG , 4);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRC_REG , 5);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	//Stop bit 1 Or 2 bits
	CLR_BIT(UART_UCSRC_REG , 3);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24

	//Charctar Size 8 bits
	SET_BIT(UART_UCSRC_REG , 2);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRC_REG , 1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRB_REG , 2); //B
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24

	//select Baud rate reg
	CLR_BIT(UART_UCSRC_REG , 7) ;
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
	//Select Baud Rate
	UART_UBRRH_REG = (u8)(BAUD_RATE>>8);
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
	UART_UBRRL_REG = (u8)(BAUD_RATE);
     bd2:	e9 e2       	ldi	r30, 0x29	; 41
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	83 e3       	ldi	r24, 0x33	; 51
     bd8:	80 83       	st	Z, r24

	//Enable RX & TX
	SET_BIT(UART_UCSRB_REG , 3); //B
     bda:	aa e2       	ldi	r26, 0x2A	; 42
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e2       	ldi	r30, 0x2A	; 42
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG , 4); //B
     be8:	aa e2       	ldi	r26, 0x2A	; 42
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e2       	ldi	r30, 0x2A	; 42
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24

}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 5)==0);
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	86 95       	lsr	r24
     c12:	87 70       	andi	r24, 0x07	; 7
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	a1 f3       	breq	.-24     	; 0xc08 <UART_voidSendData+0xc>

	//when flag = 1
	UART_UDR_REG = Copy_u8Data ;
     c20:	ec e2       	ldi	r30, 0x2C	; 44
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24

	//clear flag
	SET_BIT(UART_UCSRA_REG , 6) ;
     c28:	ab e2       	ldi	r26, 0x2B	; 43
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	eb e2       	ldi	r30, 0x2B	; 43
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	80 64       	ori	r24, 0x40	; 64
     c34:	8c 93       	st	X, r24
}
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <UART_u8RecieveData>:

void UART_u8RecieveData(u8 *Copy_pu8Data)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <UART_u8RecieveData+0x6>
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 7)==0);
     c4c:	eb e2       	ldi	r30, 0x2B	; 43
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	dc f7       	brge	.-10     	; 0xc4c <UART_u8RecieveData+0xe>

	//when flag = 1
	*Copy_pu8Data = UART_UDR_REG ;
     c56:	ec e2       	ldi	r30, 0x2C	; 44
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	80 83       	st	Z, r24

}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <TIMER0_voidInit>:
void(*TIMER_GPF0)(void) = NULL ;
void(*TIMER_GPF1)(void) = NULL ;


void TIMER0_voidInit()
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	//normal mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
	CLR_BIT(TIMER0_TCCR0_REG , 3 );
	#elif(TIMER_MODE==TIMER_CTC_MODE)
	//compare mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7b       	andi	r24, 0xBF	; 191
     c80:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 3 );
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 4 );
	SET_BIT(TIMER0_TCCR0_REG , 5 );
	#endif

	//prescaller division factor = 8
	CLR_BIT(TIMER0_TCCR0_REG , 2 );
     c90:	a3 e5       	ldi	r26, 0x53	; 83
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e3 e5       	ldi	r30, 0x53	; 83
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8b 7f       	andi	r24, 0xFB	; 251
     c9c:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 0 );
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8e 7f       	andi	r24, 0xFE	; 254
     caa:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 1 );
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	SET_BIT(TIMER0_TIMSK_REG , 0) ;
     cba:	a9 e5       	ldi	r26, 0x59	; 89
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e9 e5       	ldi	r30, 0x59	; 89
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	8c 93       	st	X, r24

}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <TIMER0_voidSetCallBackT0Ovf>:

void TIMER0_voidSetCallBackT0Ovf(void(*LPF0)(void))
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <TIMER0_voidSetCallBackT0Ovf+0x6>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF0 = LPF0 ;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	90 93 1d 01 	sts	0x011D, r25
     ce4:	80 93 1c 01 	sts	0x011C, r24
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue(u8 Copy_PreloadValue)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = Copy_PreloadValue ;
     cfe:	e2 e5       	ldi	r30, 0x52	; 82
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 83       	st	Z, r24
}
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <TIMER0_voidSetCallBackT0CTC>:

void TIMER0_voidSetCallBackT0CTC(void(*LPF1)(void))
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <TIMER0_voidSetCallBackT0CTC+0x6>
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	9a 83       	std	Y+2, r25	; 0x02
     d1a:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF1 = LPF1 ;
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	90 93 1f 01 	sts	0x011F, r25
     d24:	80 93 1e 01 	sts	0x011E, r24
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_CompareMatchValue)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = Copy_CompareMatchValue ;
     d3e:	ec e5       	ldi	r30, 0x5C	; 92
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	80 83       	st	Z, r24
}
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <__vector_10>:


//ISR for T0CTC
void __vector_10(void)    __attribute__((signal));
void __vector_10(void)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
     d78:	80 91 20 01 	lds	r24, 0x0120
     d7c:	90 91 21 01 	lds	r25, 0x0121
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	90 93 21 01 	sts	0x0121, r25
     d86:	80 93 20 01 	sts	0x0120, r24
	//compare =200 ,, time = 1sec
	if(counter == 5000)
     d8a:	80 91 20 01 	lds	r24, 0x0120
     d8e:	90 91 21 01 	lds	r25, 0x0121
     d92:	23 e1       	ldi	r18, 0x13	; 19
     d94:	88 38       	cpi	r24, 0x88	; 136
     d96:	92 07       	cpc	r25, r18
     d98:	49 f4       	brne	.+18     	; 0xdac <__vector_10+0x5e>
	{
		TIMER_GPF1();
     d9a:	e0 91 1e 01 	lds	r30, 0x011E
     d9e:	f0 91 1f 01 	lds	r31, 0x011F
     da2:	09 95       	icall
		counter = 0 ;
     da4:	10 92 21 01 	sts	0x0121, r1
     da8:	10 92 20 01 	sts	0x0120, r1
	}

}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_11>:
void __vector_11(void)    __attribute__((signal));
void __vector_11(void)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
     dfc:	80 91 22 01 	lds	r24, 0x0122
     e00:	90 91 23 01 	lds	r25, 0x0123
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	90 93 23 01 	sts	0x0123, r25
     e0a:	80 93 22 01 	sts	0x0122, r24
	//overflow 1
	if(counter == 3907)
     e0e:	80 91 22 01 	lds	r24, 0x0122
     e12:	90 91 23 01 	lds	r25, 0x0123
     e16:	2f e0       	ldi	r18, 0x0F	; 15
     e18:	83 34       	cpi	r24, 0x43	; 67
     e1a:	92 07       	cpc	r25, r18
     e1c:	61 f4       	brne	.+24     	; 0xe36 <__vector_11+0x64>
	{
		TIMER_GPF0();
     e1e:	e0 91 1c 01 	lds	r30, 0x011C
     e22:	f0 91 1d 01 	lds	r31, 0x011D
     e26:	09 95       	icall
		counter = 0 ;
     e28:	10 92 23 01 	sts	0x0123, r1
     e2c:	10 92 22 01 	sts	0x0122, r1
		TIMER0_voidSetPreloadValue(192);
     e30:	80 ec       	ldi	r24, 0xC0	; 192
     e32:	0e 94 79 06 	call	0xcf2	; 0xcf2 <TIMER0_voidSetPreloadValue>
	}

}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <TIMER1_voidInit>:
void TIMER1_voidInit(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62

	//fast PWM
	CLR_BIT(TIMER1_TCCR1A_REG , 0 );
     e64:	af e4       	ldi	r26, 0x4F	; 79
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ef e4       	ldi	r30, 0x4F	; 79
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 1);
     e72:	af e4       	ldi	r26, 0x4F	; 79
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ef e4       	ldi	r30, 0x4F	; 79
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 3 );
     e80:	ae e4       	ldi	r26, 0x4E	; 78
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ee e4       	ldi	r30, 0x4E	; 78
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 4);
     e8e:	ae e4       	ldi	r26, 0x4E	; 78
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ee e4       	ldi	r30, 0x4E	; 78
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	8c 93       	st	X, r24

	//set on top clear on compare
	CLR_BIT(TIMER1_TCCR1A_REG , 6 );
     e9c:	af e4       	ldi	r26, 0x4F	; 79
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ef e4       	ldi	r30, 0x4F	; 79
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7b       	andi	r24, 0xBF	; 191
     ea8:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 7 );
     eaa:	af e4       	ldi	r26, 0x4F	; 79
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ef e4       	ldi	r30, 0x4F	; 79
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	8c 93       	st	X, r24


	//prescaller division factor = 8
	CLR_BIT(TIMER1_TCCR1B_REG , 0 );
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 1 );
     ec6:	ae e4       	ldi	r26, 0x4E	; 78
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ee e4       	ldi	r30, 0x4E	; 78
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B_REG , 2 );
     ed4:	ae e4       	ldi	r26, 0x4E	; 78
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ee e4       	ldi	r30, 0x4E	; 78
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8b 7f       	andi	r24, 0xFB	; 251
     ee0:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	//SET_BIT(TIMER1 , 0) ;

	//intilize value over flow value
	TIMER1_ICR1_REG = 19999 ;
     ee2:	e6 e4       	ldi	r30, 0x46	; 70
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8f e1       	ldi	r24, 0x1F	; 31
     ee8:	9e e4       	ldi	r25, 0x4E	; 78
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24

	//intilize counter
	TIMER1_TCNT1_REG = 0 ;
     eee:	ec e4       	ldi	r30, 0x4C	; 76
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	11 82       	std	Z+1, r1	; 0x01
     ef4:	10 82       	st	Z, r1

}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <TIMER1_voidSetPinACompareMatch>:




void TIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <TIMER1_voidSetPinACompareMatch+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1A_REG = Copy_u16Value ;
     f0a:	ea e4       	ldi	r30, 0x4A	; 74
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TIMERS_voidT1SetBusyWait>:

void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	2c 97       	sbiw	r28, 0x0c	; 12
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	69 87       	std	Y+9, r22	; 0x09
     f36:	7a 87       	std	Y+10, r23	; 0x0a
     f38:	8b 87       	std	Y+11, r24	; 0x0b
     f3a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u64SWCounter = 0 ;
     f3c:	1d 82       	std	Y+5, r1	; 0x05
     f3e:	1e 82       	std	Y+6, r1	; 0x06
     f40:	1f 82       	std	Y+7, r1	; 0x07
     f42:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u64Iterator = 0 ;
     f44:	19 82       	std	Y+1, r1	; 0x01
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	1b 82       	std	Y+3, r1	; 0x03
     f4a:	1c 82       	std	Y+4, r1	; 0x04
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	ab 85       	ldd	r26, Y+11	; 0x0b
     f52:	bc 85       	ldd	r27, Y+12	; 0x0c
     f54:	28 ee       	ldi	r18, 0xE8	; 232
     f56:	33 e0       	ldi	r19, 0x03	; 3
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 83 2b 	call	0x5706	; 0x5706 <__mulsi3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	2a ef       	ldi	r18, 0xFA	; 250
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
     f78:	da 01       	movw	r26, r20
     f7a:	c9 01       	movw	r24, r18
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	af 83       	std	Y+7, r26	; 0x07
     f82:	b8 87       	std	Y+8, r27	; 0x08
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	1b 82       	std	Y+3, r1	; 0x03
     f8a:	1c 82       	std	Y+4, r1	; 0x04
     f8c:	1c c0       	rjmp	.+56     	; 0xfc6 <TIMERS_voidT1SetBusyWait+0xa6>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
     f8e:	e8 e5       	ldi	r30, 0x58	; 88
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	86 95       	lsr	r24
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	81 70       	andi	r24, 0x01	; 1
     f9c:	90 70       	andi	r25, 0x00	; 0
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	b1 f3       	breq	.-20     	; 0xf8e <TIMERS_voidT1SetBusyWait+0x6e>
		SET_BIT(TIMER1_TIFR_REG , 1);
     fa2:	a8 e5       	ldi	r26, 0x58	; 88
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e5       	ldi	r30, 0x58	; 88
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	82 60       	ori	r24, 0x02	; 2
     fae:	8c 93       	st	X, r24
void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
	u32 Local_u64SWCounter = 0 ;
	u32 Local_u64Iterator = 0 ;
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	ab 81       	ldd	r26, Y+3	; 0x03
     fb6:	bc 81       	ldd	r27, Y+4	; 0x04
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	ab 83       	std	Y+3, r26	; 0x03
     fc4:	bc 83       	std	Y+4, r27	; 0x04
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	4b 81       	ldd	r20, Y+3	; 0x03
     fcc:	5c 81       	ldd	r21, Y+4	; 0x04
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	af 81       	ldd	r26, Y+7	; 0x07
     fd4:	b8 85       	ldd	r27, Y+8	; 0x08
     fd6:	28 17       	cp	r18, r24
     fd8:	39 07       	cpc	r19, r25
     fda:	4a 07       	cpc	r20, r26
     fdc:	5b 07       	cpc	r21, r27
     fde:	b8 f2       	brcs	.-82     	; 0xf8e <TIMERS_voidT1SetBusyWait+0x6e>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
		SET_BIT(TIMER1_TIFR_REG , 1);
	}
}
     fe0:	2c 96       	adiw	r28, 0x0c	; 12
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <GIE_voidEnable>:
#include"GIE_config.h"
#include"GIE_private.h"
#include"GIE_interface.h"

void GIE_voidEnable(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
     ffa:	af e5       	ldi	r26, 0x5F	; 95
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ef e5       	ldi	r30, 0x5F	; 95
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	8c 93       	st	X, r24

}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG , 7);
    1016:	af e5       	ldi	r26, 0x5F	; 95
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ef e5       	ldi	r30, 0x5F	; 95
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	8c 93       	st	X, r24

}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <EXTI_voidInit>:
void(*GpF1)(void) = NULL ;
void(*GpF2)(void) = NULL ;
void(*GpF3)(void) = NULL ;

void EXTI_voidInit(void)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
 	#if INT_ENABLE == INT0
		SET_BIT(GICR_REG,6);
    1032:	ab e5       	ldi	r26, 0x5B	; 91
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e5       	ldi	r30, 0x5B	; 91
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 64       	ori	r24, 0x40	; 64
    103e:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,5);
	#endif

	#if INT_ENABLE == INT0
		/*DIo*/
		DIO_voidSetPinDirection(PORTD , PIN2 ,INPUT);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
		#if INT_SENSE_CONTROL == FALLING_EDGE
			DIO_voidSetPinvalue(PORTD,PIN2,HIGH);
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			/*falling edge*/
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1054:	a5 e5       	ldi	r26, 0x55	; 85
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e5 e5       	ldi	r30, 0x55	; 85
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1062:	a5 e5       	ldi	r26, 0x55	; 85
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e5       	ldi	r30, 0x55	; 85
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	8c 93       	st	X, r24
		#elif INT_SENSE_CONTROL == RISING_EDGE
			/*RISING edge*/
			CLR_BIT(MCUCR_REG,6);
		#endif
	#endif
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <EXTI_voidEnable>:

void EXTI_voidEnable(u8 Copy_u8IntNo , u8 Copy_u8Sensecontrol)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	2a 97       	sbiw	r28, 0x0a	; 10
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntNo)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3a 87       	std	Y+10, r19	; 0x0a
    1096:	29 87       	std	Y+9, r18	; 0x09
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <EXTI_voidEnable+0x2e>
    10a2:	6d c0       	rjmp	.+218    	; 0x117e <EXTI_voidEnable+0x108>
    10a4:	29 85       	ldd	r18, Y+9	; 0x09
    10a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <EXTI_voidEnable+0x3a>
    10ae:	c9 c0       	rjmp	.+402    	; 0x1242 <EXTI_voidEnable+0x1cc>
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	09 f0       	breq	.+2      	; 0x10ba <EXTI_voidEnable+0x44>
    10b8:	e9 c0       	rjmp	.+466    	; 0x128c <EXTI_voidEnable+0x216>
	{
		case INT0:
			SET_BIT(GICR_REG,6);
    10ba:	ab e5       	ldi	r26, 0x5B	; 91
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	eb e5       	ldi	r30, 0x5B	; 91
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	38 87       	std	Y+8, r19	; 0x08
    10d0:	2f 83       	std	Y+7, r18	; 0x07
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	98 85       	ldd	r25, Y+8	; 0x08
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	21 f1       	breq	.+72     	; 0x1124 <EXTI_voidEnable+0xae>
    10dc:	2f 81       	ldd	r18, Y+7	; 0x07
    10de:	38 85       	ldd	r19, Y+8	; 0x08
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <EXTI_voidEnable+0x7a>
    10e6:	8f 81       	ldd	r24, Y+7	; 0x07
    10e8:	98 85       	ldd	r25, Y+8	; 0x08
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <EXTI_voidEnable+0x90>
    10ee:	ce c0       	rjmp	.+412    	; 0x128c <EXTI_voidEnable+0x216>
    10f0:	2f 81       	ldd	r18, Y+7	; 0x07
    10f2:	38 85       	ldd	r19, Y+8	; 0x08
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	21 f1       	breq	.+72     	; 0x1142 <EXTI_voidEnable+0xcc>
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	71 f1       	breq	.+92     	; 0x1160 <EXTI_voidEnable+0xea>
    1104:	c3 c0       	rjmp	.+390    	; 0x128c <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,1);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	8c 93       	st	X, r24
    1122:	b4 c0       	rjmp	.+360    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,1);
    1124:	a5 e5       	ldi	r26, 0x55	; 85
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e5       	ldi	r30, 0x55	; 85
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c 93       	st	X, r24
    1140:	a5 c0       	rjmp	.+330    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,1);
    1142:	a5 e5       	ldi	r26, 0x55	; 85
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e5       	ldi	r30, 0x55	; 85
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    1150:	a5 e5       	ldi	r26, 0x55	; 85
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e5       	ldi	r30, 0x55	; 85
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8e 7f       	andi	r24, 0xFE	; 254
    115c:	8c 93       	st	X, r24
    115e:	96 c0       	rjmp	.+300    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,1);
    1160:	a5 e5       	ldi	r26, 0x55	; 85
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e5       	ldi	r30, 0x55	; 85
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8d 7f       	andi	r24, 0xFD	; 253
    116c:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	81 60       	ori	r24, 0x01	; 1
    117a:	8c 93       	st	X, r24
    117c:	87 c0       	rjmp	.+270    	; 0x128c <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT1:
			SET_BIT(GICR_REG,7);
    117e:	ab e5       	ldi	r26, 0x5B	; 91
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	eb e5       	ldi	r30, 0x5B	; 91
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 68       	ori	r24, 0x80	; 128
    118a:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3e 83       	std	Y+6, r19	; 0x06
    1194:	2d 83       	std	Y+5, r18	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	21 f1       	breq	.+72     	; 0x11e8 <EXTI_voidEnable+0x172>
    11a0:	2d 81       	ldd	r18, Y+5	; 0x05
    11a2:	3e 81       	ldd	r19, Y+6	; 0x06
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <EXTI_voidEnable+0x13e>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <EXTI_voidEnable+0x154>
    11b2:	6c c0       	rjmp	.+216    	; 0x128c <EXTI_voidEnable+0x216>
    11b4:	2d 81       	ldd	r18, Y+5	; 0x05
    11b6:	3e 81       	ldd	r19, Y+6	; 0x06
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	21 f1       	breq	.+72     	; 0x1206 <EXTI_voidEnable+0x190>
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	71 f1       	breq	.+92     	; 0x1224 <EXTI_voidEnable+0x1ae>
    11c8:	61 c0       	rjmp	.+194    	; 0x128c <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,3);
    11ca:	a5 e5       	ldi	r26, 0x55	; 85
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e5       	ldi	r30, 0x55	; 85
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 60       	ori	r24, 0x08	; 8
    11d6:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8b 7f       	andi	r24, 0xFB	; 251
    11e4:	8c 93       	st	X, r24
    11e6:	52 c0       	rjmp	.+164    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,3);
    11e8:	a5 e5       	ldi	r26, 0x55	; 85
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e5       	ldi	r30, 0x55	; 85
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 60       	ori	r24, 0x08	; 8
    11f4:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	84 60       	ori	r24, 0x04	; 4
    1202:	8c 93       	st	X, r24
    1204:	43 c0       	rjmp	.+134    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,3);
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8b 7f       	andi	r24, 0xFB	; 251
    1220:	8c 93       	st	X, r24
    1222:	34 c0       	rjmp	.+104    	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,3);
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	87 7f       	andi	r24, 0xF7	; 247
    1230:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	8c 93       	st	X, r24
    1240:	25 c0       	rjmp	.+74     	; 0x128c <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT2:
			SET_BIT(GICR_REG,5);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 62       	ori	r24, 0x20	; 32
    124e:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3c 83       	std	Y+4, r19	; 0x04
    1258:	2b 83       	std	Y+3, r18	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	31 f0       	breq	.+12     	; 0x126e <EXTI_voidEnable+0x1f8>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	31 05       	cpc	r19, r1
    126a:	49 f0       	breq	.+18     	; 0x127e <EXTI_voidEnable+0x208>
    126c:	0f c0       	rjmp	.+30     	; 0x128c <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					CLR_BIT(MCUCSR_REG,6);
    126e:	a4 e5       	ldi	r26, 0x54	; 84
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e5       	ldi	r30, 0x54	; 84
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	8c 93       	st	X, r24
    127c:	07 c0       	rjmp	.+14     	; 0x128c <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCSR_REG,6);
    127e:	a4 e5       	ldi	r26, 0x54	; 84
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e4 e5       	ldi	r30, 0x54	; 84
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 64       	ori	r24, 0x40	; 64
    128a:	8c 93       	st	X, r24
			break ;
		default:
			break ;
	}

}
    128c:	2a 96       	adiw	r28, 0x0a	; 10
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8IntNo)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <EXTI_voidDisable+0x6>
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNo)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3b 83       	std	Y+3, r19	; 0x03
    12b4:	2a 83       	std	Y+2, r18	; 0x02
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	89 f0       	breq	.+34     	; 0x12e2 <EXTI_voidDisable+0x44>
    12c0:	2a 81       	ldd	r18, Y+2	; 0x02
    12c2:	3b 81       	ldd	r19, Y+3	; 0x03
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	a1 f0       	breq	.+40     	; 0x12f2 <EXTI_voidDisable+0x54>
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	b9 f4       	brne	.+46     	; 0x1300 <EXTI_voidDisable+0x62>
	{
		case INT0 :
			CLR_BIT(GICR_REG,6);
    12d2:	ab e5       	ldi	r26, 0x5B	; 91
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e5       	ldi	r30, 0x5B	; 91
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7b       	andi	r24, 0xBF	; 191
    12de:	8c 93       	st	X, r24
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <EXTI_voidDisable+0x62>
			break;
		case INT1 :
			CLR_BIT(GICR_REG,7);
    12e2:	ab e5       	ldi	r26, 0x5B	; 91
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e5       	ldi	r30, 0x5B	; 91
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8f 77       	andi	r24, 0x7F	; 127
    12ee:	8c 93       	st	X, r24
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <EXTI_voidDisable+0x62>
			break;
		case INT2 :
			CLR_BIT(GICR_REG,5);
    12f2:	ab e5       	ldi	r26, 0x5B	; 91
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e5       	ldi	r30, 0x5B	; 91
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 7d       	andi	r24, 0xDF	; 223
    12fe:	8c 93       	st	X, r24

	}



}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <EXTI_voidSetCallBack_INT0>:

void EXTI_voidSetCallBack_INT0(void(*LPF1)(void))
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <EXTI_voidSetCallBack_INT0+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	GpF1 = LPF1 ;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	90 93 25 01 	sts	0x0125, r25
    1322:	80 93 24 01 	sts	0x0124, r24
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <EXTI_voidSetCallBack_INT1>:

void EXTI_voidSetCallBack_INT1(void(*LPF2)(void))
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <EXTI_voidSetCallBack_INT1+0x6>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
	GpF2 = LPF2 ;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	90 93 27 01 	sts	0x0127, r25
    1346:	80 93 26 01 	sts	0x0126, r24
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <EXTI_voidSetCallBack_INT2>:

void EXTI_voidSetCallBack_INT2(void(*LPF3)(void))
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <EXTI_voidSetCallBack_INT2+0x6>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	GpF3 = LPF3 ;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	90 93 29 01 	sts	0x0129, r25
    136a:	80 93 28 01 	sts	0x0128, r24
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <__vector_1>:




void __vector_1(void)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if(GpF1!=NULL)
    13a2:	80 91 24 01 	lds	r24, 0x0124
    13a6:	90 91 25 01 	lds	r25, 0x0125
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_1+0x40>
	{
		GpF1();
    13ae:	e0 91 24 01 	lds	r30, 0x0124
    13b2:	f0 91 25 01 	lds	r31, 0x0125
    13b6:	09 95       	icall
	}
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_2>:

void __vector_2(void)
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	if(GpF2!=NULL)
    1408:	80 91 26 01 	lds	r24, 0x0126
    140c:	90 91 27 01 	lds	r25, 0x0127
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	29 f0       	breq	.+10     	; 0x141e <__vector_2+0x40>
	{
		GpF2();
    1414:	e0 91 26 01 	lds	r30, 0x0126
    1418:	f0 91 27 01 	lds	r31, 0x0127
    141c:	09 95       	icall
	}
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <__vector_3>:

void __vector_3(void)
{
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	if(GpF3!=NULL)
    146e:	80 91 28 01 	lds	r24, 0x0128
    1472:	90 91 29 01 	lds	r25, 0x0129
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	29 f0       	breq	.+10     	; 0x1484 <__vector_3+0x40>
	{
		GpF3();
    147a:	e0 91 28 01 	lds	r30, 0x0128
    147e:	f0 91 29 01 	lds	r31, 0x0129
    1482:	09 95       	icall
	}
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <DIO_voidSetPinvalue>:




void DIO_voidSetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	29 97       	sbiw	r28, 0x09	; 9
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	6a 83       	std	Y+2, r22	; 0x02
    14c2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_voidSetPinvalue+0x22>
    14ca:	f6 c0       	rjmp	.+492    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <DIO_voidSetPinvalue+0x2a>
    14d2:	f2 c0       	rjmp	.+484    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8Direction)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	39 87       	std	Y+9, r19	; 0x09
    14dc:	28 87       	std	Y+8, r18	; 0x08
    14de:	88 85       	ldd	r24, Y+8	; 0x08
    14e0:	99 85       	ldd	r25, Y+9	; 0x09
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <DIO_voidSetPinvalue+0x4a>
    14e6:	28 85       	ldd	r18, Y+8	; 0x08
    14e8:	39 85       	ldd	r19, Y+9	; 0x09
    14ea:	21 30       	cpi	r18, 0x01	; 1
    14ec:	31 05       	cpc	r19, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <DIO_voidSetPinvalue+0x48>
    14f0:	75 c0       	rjmp	.+234    	; 0x15dc <DIO_voidSetPinvalue+0x132>
    14f2:	e2 c0       	rjmp	.+452    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
		{
			case LOW  : switch(Copy_u8PortId)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3f 83       	std	Y+7, r19	; 0x07
    14fc:	2e 83       	std	Y+6, r18	; 0x06
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	9f 81       	ldd	r25, Y+7	; 0x07
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	59 f1       	breq	.+86     	; 0x155e <DIO_voidSetPinvalue+0xb4>
    1508:	2e 81       	ldd	r18, Y+6	; 0x06
    150a:	3f 81       	ldd	r19, Y+7	; 0x07
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	2c f4       	brge	.+10     	; 0x151c <DIO_voidSetPinvalue+0x72>
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	9f 81       	ldd	r25, Y+7	; 0x07
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f0       	breq	.+26     	; 0x1534 <DIO_voidSetPinvalue+0x8a>
    151a:	ce c0       	rjmp	.+412    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
    151c:	2e 81       	ldd	r18, Y+6	; 0x06
    151e:	3f 81       	ldd	r19, Y+7	; 0x07
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	89 f1       	breq	.+98     	; 0x1588 <DIO_voidSetPinvalue+0xde>
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_voidSetPinvalue+0x88>
    1530:	40 c0       	rjmp	.+128    	; 0x15b2 <DIO_voidSetPinvalue+0x108>
    1532:	c2 c0       	rjmp	.+388    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										CLR_BIT(PORTA_REG,Copy_u8PinId);
    1534:	ab e3       	ldi	r26, 0x3B	; 59
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e3       	ldi	r30, 0x3B	; 59
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_voidSetPinvalue+0xa8>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_voidSetPinvalue+0xa4>
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	ad c0       	rjmp	.+346    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										CLR_BIT(PORTB_REG,Copy_u8PinId);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_voidSetPinvalue+0xd2>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_voidSetPinvalue+0xce>
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	98 c0       	rjmp	.+304    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										CLR_BIT(PORTC_REG,Copy_u8PinId);
    1588:	a5 e3       	ldi	r26, 0x35	; 53
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e5 e3       	ldi	r30, 0x35	; 53
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_voidSetPinvalue+0xfc>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_voidSetPinvalue+0xf8>
    15aa:	80 95       	com	r24
    15ac:	84 23       	and	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	83 c0       	rjmp	.+262    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										CLR_BIT(PORTD_REG,Copy_u8PinId);
    15b2:	a2 e3       	ldi	r26, 0x32	; 50
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e2 e3       	ldi	r30, 0x32	; 50
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_voidSetPinvalue+0x126>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_voidSetPinvalue+0x122>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	6e c0       	rjmp	.+220    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							default :
										break ;
						}
						break ;
			case HIGH  : switch(Copy_u8PortId)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3d 83       	std	Y+5, r19	; 0x05
    15e4:	2c 83       	std	Y+4, r18	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	49 f1       	breq	.+82     	; 0x1642 <DIO_voidSetPinvalue+0x198>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_voidSetPinvalue+0x15a>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_voidSetPinvalue+0x170>
    1602:	5a c0       	rjmp	.+180    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	71 f1       	breq	.+92     	; 0x166a <DIO_voidSetPinvalue+0x1c0>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	e9 f1       	breq	.+122    	; 0x1692 <DIO_voidSetPinvalue+0x1e8>
    1618:	4f c0       	rjmp	.+158    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										SET_BIT(PORTA_REG,Copy_u8PinId);
    161a:	ab e3       	ldi	r26, 0x3B	; 59
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e3       	ldi	r30, 0x3B	; 59
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_voidSetPinvalue+0x18e>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_voidSetPinvalue+0x18a>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	3b c0       	rjmp	.+118    	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										SET_BIT(PORTB_REG,Copy_u8PinId);
    1642:	a8 e3       	ldi	r26, 0x38	; 56
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e8 e3       	ldi	r30, 0x38	; 56
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_voidSetPinvalue+0x1b6>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_voidSetPinvalue+0x1b2>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	27 c0       	rjmp	.+78     	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										SET_BIT(PORTC_REG,Copy_u8PinId);
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_voidSetPinvalue+0x1de>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_voidSetPinvalue+0x1da>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	13 c0       	rjmp	.+38     	; 0x16b8 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										SET_BIT(PORTD_REG,Copy_u8PinId);
    1692:	a2 e3       	ldi	r26, 0x32	; 50
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e3       	ldi	r30, 0x32	; 50
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_voidSetPinvalue+0x206>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_voidSetPinvalue+0x202>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24

			default :
				break ;
		}
	}
}
    16b8:	29 96       	adiw	r28, 0x09	; 9
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	29 97       	sbiw	r28, 0x09	; 9
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	6a 83       	std	Y+2, r22	; 0x02
    16e2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_voidSetPinDirection+0x22>
    16ea:	f6 c0       	rjmp	.+492    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <DIO_voidSetPinDirection+0x2a>
    16f2:	f2 c0       	rjmp	.+484    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
		{
			//do nothing
		}
		else
		{
			switch(Copy_u8Direction)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	39 87       	std	Y+9, r19	; 0x09
    16fc:	28 87       	std	Y+8, r18	; 0x08
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	99 85       	ldd	r25, Y+9	; 0x09
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	39 f0       	breq	.+14     	; 0x1714 <DIO_voidSetPinDirection+0x4a>
    1706:	28 85       	ldd	r18, Y+8	; 0x08
    1708:	39 85       	ldd	r19, Y+9	; 0x09
    170a:	21 30       	cpi	r18, 0x01	; 1
    170c:	31 05       	cpc	r19, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <DIO_voidSetPinDirection+0x48>
    1710:	75 c0       	rjmp	.+234    	; 0x17fc <DIO_voidSetPinDirection+0x132>
    1712:	e2 c0       	rjmp	.+452    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
			{
				case INPUT  : switch(Copy_u8PortId)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3f 83       	std	Y+7, r19	; 0x07
    171c:	2e 83       	std	Y+6, r18	; 0x06
    171e:	8e 81       	ldd	r24, Y+6	; 0x06
    1720:	9f 81       	ldd	r25, Y+7	; 0x07
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	59 f1       	breq	.+86     	; 0x177e <DIO_voidSetPinDirection+0xb4>
    1728:	2e 81       	ldd	r18, Y+6	; 0x06
    172a:	3f 81       	ldd	r19, Y+7	; 0x07
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	2c f4       	brge	.+10     	; 0x173c <DIO_voidSetPinDirection+0x72>
    1732:	8e 81       	ldd	r24, Y+6	; 0x06
    1734:	9f 81       	ldd	r25, Y+7	; 0x07
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f0       	breq	.+26     	; 0x1754 <DIO_voidSetPinDirection+0x8a>
    173a:	ce c0       	rjmp	.+412    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
    173c:	2e 81       	ldd	r18, Y+6	; 0x06
    173e:	3f 81       	ldd	r19, Y+7	; 0x07
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	89 f1       	breq	.+98     	; 0x17a8 <DIO_voidSetPinDirection+0xde>
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	9f 81       	ldd	r25, Y+7	; 0x07
    174a:	83 30       	cpi	r24, 0x03	; 3
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <DIO_voidSetPinDirection+0x88>
    1750:	40 c0       	rjmp	.+128    	; 0x17d2 <DIO_voidSetPinDirection+0x108>
    1752:	c2 c0       	rjmp	.+388    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											CLR_BIT(DDRA_REG,Copy_u8PinId);
    1754:	aa e3       	ldi	r26, 0x3A	; 58
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ea e3       	ldi	r30, 0x3A	; 58
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_voidSetPinDirection+0xa8>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_voidSetPinDirection+0xa4>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	ad c0       	rjmp	.+346    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											CLR_BIT(DDRB_REG,Copy_u8PinId);
    177e:	a7 e3       	ldi	r26, 0x37	; 55
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e7 e3       	ldi	r30, 0x37	; 55
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_voidSetPinDirection+0xd2>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_voidSetPinDirection+0xce>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	98 c0       	rjmp	.+304    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											CLR_BIT(DDRC_REG,Copy_u8PinId);
    17a8:	a4 e3       	ldi	r26, 0x34	; 52
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e4 e3       	ldi	r30, 0x34	; 52
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_voidSetPinDirection+0xfc>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_voidSetPinDirection+0xf8>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	83 c0       	rjmp	.+262    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											CLR_BIT(DDRD_REG,Copy_u8PinId);
    17d2:	a1 e3       	ldi	r26, 0x31	; 49
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e1 e3       	ldi	r30, 0x31	; 49
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_voidSetPinDirection+0x126>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_voidSetPinDirection+0x122>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	6e c0       	rjmp	.+220    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								default :
											break ;
							}
							break ;
				case OUTPUT  : switch(Copy_u8PortId)
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	3d 83       	std	Y+5, r19	; 0x05
    1804:	2c 83       	std	Y+4, r18	; 0x04
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	49 f1       	breq	.+82     	; 0x1862 <DIO_voidSetPinDirection+0x198>
    1810:	2c 81       	ldd	r18, Y+4	; 0x04
    1812:	3d 81       	ldd	r19, Y+5	; 0x05
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	2c f4       	brge	.+10     	; 0x1824 <DIO_voidSetPinDirection+0x15a>
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 f0       	breq	.+24     	; 0x183a <DIO_voidSetPinDirection+0x170>
    1822:	5a c0       	rjmp	.+180    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	71 f1       	breq	.+92     	; 0x188a <DIO_voidSetPinDirection+0x1c0>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	e9 f1       	breq	.+122    	; 0x18b2 <DIO_voidSetPinDirection+0x1e8>
    1838:	4f c0       	rjmp	.+158    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											SET_BIT(DDRA_REG,Copy_u8PinId);
    183a:	aa e3       	ldi	r26, 0x3A	; 58
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ea e3       	ldi	r30, 0x3A	; 58
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_voidSetPinDirection+0x18e>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_voidSetPinDirection+0x18a>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	3b c0       	rjmp	.+118    	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											SET_BIT(DDRB_REG,Copy_u8PinId);
    1862:	a7 e3       	ldi	r26, 0x37	; 55
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidSetPinDirection+0x1b6>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidSetPinDirection+0x1b2>
    1884:	84 2b       	or	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											SET_BIT(DDRC_REG,Copy_u8PinId);
    188a:	a4 e3       	ldi	r26, 0x34	; 52
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e4 e3       	ldi	r30, 0x34	; 52
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_voidSetPinDirection+0x1de>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_voidSetPinDirection+0x1da>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	13 c0       	rjmp	.+38     	; 0x18d8 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											SET_BIT(DDRD_REG,Copy_u8PinId);
    18b2:	a1 e3       	ldi	r26, 0x31	; 49
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e1 e3       	ldi	r30, 0x31	; 49
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_voidSetPinDirection+0x206>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_voidSetPinDirection+0x202>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24

					default :
							break ;
			}
		}
}
    18d8:	29 96       	adiw	r28, 0x09	; 9
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <DIO_u8GetPinvalue>:


u8 DIO_u8GetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <DIO_u8GetPinvalue+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <DIO_u8GetPinvalue+0x8>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3d 83       	std	Y+5, r19	; 0x05
    1904:	2c 83       	std	Y+4, r18	; 0x04
    1906:	4c 81       	ldd	r20, Y+4	; 0x04
    1908:	5d 81       	ldd	r21, Y+5	; 0x05
    190a:	41 30       	cpi	r20, 0x01	; 1
    190c:	51 05       	cpc	r21, r1
    190e:	41 f1       	breq	.+80     	; 0x1960 <DIO_u8GetPinvalue+0x76>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	91 05       	cpc	r25, r1
    1918:	34 f4       	brge	.+12     	; 0x1926 <DIO_u8GetPinvalue+0x3c>
    191a:	2c 81       	ldd	r18, Y+4	; 0x04
    191c:	3d 81       	ldd	r19, Y+5	; 0x05
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	61 f0       	breq	.+24     	; 0x193c <DIO_u8GetPinvalue+0x52>
    1924:	52 c0       	rjmp	.+164    	; 0x19ca <DIO_u8GetPinvalue+0xe0>
    1926:	4c 81       	ldd	r20, Y+4	; 0x04
    1928:	5d 81       	ldd	r21, Y+5	; 0x05
    192a:	42 30       	cpi	r20, 0x02	; 2
    192c:	51 05       	cpc	r21, r1
    192e:	51 f1       	breq	.+84     	; 0x1984 <DIO_u8GetPinvalue+0x9a>
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	b9 f1       	breq	.+110    	; 0x19a8 <DIO_u8GetPinvalue+0xbe>
    193a:	47 c0       	rjmp	.+142    	; 0x19ca <DIO_u8GetPinvalue+0xe0>
	{
		case PORTA : Local_u8Variable=GET_BIT(PINA_REG , Copy_u8PinId) ;
    193c:	e9 e3       	ldi	r30, 0x39	; 57
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a9 01       	movw	r20, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_u8GetPinvalue+0x6a>
    1950:	55 95       	asr	r21
    1952:	47 95       	ror	r20
    1954:	8a 95       	dec	r24
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_u8GetPinvalue+0x66>
    1958:	ca 01       	movw	r24, r20
    195a:	81 70       	andi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	35 c0       	rjmp	.+106    	; 0x19ca <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTB : Local_u8Variable=GET_BIT(PINB_REG , Copy_u8PinId) ;
    1960:	e6 e3       	ldi	r30, 0x36	; 54
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a9 01       	movw	r20, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_u8GetPinvalue+0x8e>
    1974:	55 95       	asr	r21
    1976:	47 95       	ror	r20
    1978:	8a 95       	dec	r24
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_u8GetPinvalue+0x8a>
    197c:	ca 01       	movw	r24, r20
    197e:	81 70       	andi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	23 c0       	rjmp	.+70     	; 0x19ca <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTC : Local_u8Variable=GET_BIT(PINC_REG , Copy_u8PinId) ;
    1984:	e3 e3       	ldi	r30, 0x33	; 51
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_u8GetPinvalue+0xb2>
    1998:	55 95       	asr	r21
    199a:	47 95       	ror	r20
    199c:	8a 95       	dec	r24
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_u8GetPinvalue+0xae>
    19a0:	ca 01       	movw	r24, r20
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	11 c0       	rjmp	.+34     	; 0x19ca <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTD : Local_u8Variable=GET_BIT(PIND_REG , Copy_u8PinId) ;
    19a8:	e0 e3       	ldi	r30, 0x30	; 48
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a9 01       	movw	r20, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_u8GetPinvalue+0xd6>
    19bc:	55 95       	asr	r21
    19be:	47 95       	ror	r20
    19c0:	8a 95       	dec	r24
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_u8GetPinvalue+0xd2>
    19c4:	ca 01       	movw	r24, r20
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DIO_voidSetPortvalue>:

void DIO_voidSetPortvalue(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DIO_voidSetPortvalue+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <DIO_voidSetPortvalue+0x8>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	90 f5       	brcc	.+100    	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3c 83       	std	Y+4, r19	; 0x04
    19fa:	2b 83       	std	Y+3, r18	; 0x03
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	d1 f0       	breq	.+52     	; 0x1a3a <DIO_voidSetPortvalue+0x5e>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <DIO_voidSetPortvalue+0x3e>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <DIO_voidSetPortvalue+0x54>
    1a18:	1e c0       	rjmp	.+60     	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
    1a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	81 f0       	breq	.+32     	; 0x1a44 <DIO_voidSetPortvalue+0x68>
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <DIO_voidSetPortvalue+0x72>
    1a2e:	13 c0       	rjmp	.+38     	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
		{
			case PORTA :PORTA_REG = Copy_u8Direction ;
    1a30:	eb e3       	ldi	r30, 0x3B	; 59
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	0e c0       	rjmp	.+28     	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTB :
						PORTB_REG = Copy_u8Direction ;
    1a3a:	e8 e3       	ldi	r30, 0x38	; 56
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTC :
						PORTC_REG = Copy_u8Direction ;
    1a44:	e5 e3       	ldi	r30, 0x35	; 53
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTD :
						PORTD_REG = Copy_u8Direction ;
    1a4e:	e2 e3       	ldi	r30, 0x32	; 50
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	80 83       	st	Z, r24
						break ;

		}
	}

}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <DIO_voidSetPortDirection+0x6>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <DIO_voidSetPortDirection+0x8>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	90 f5       	brcc	.+100    	; 0x1ade <DIO_voidSetPortDirection+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3c 83       	std	Y+4, r19	; 0x04
    1a82:	2b 83       	std	Y+3, r18	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	d1 f0       	breq	.+52     	; 0x1ac2 <DIO_voidSetPortDirection+0x5e>
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <DIO_voidSetPortDirection+0x3e>
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	61 f0       	breq	.+24     	; 0x1ab8 <DIO_voidSetPortDirection+0x54>
    1aa0:	1e c0       	rjmp	.+60     	; 0x1ade <DIO_voidSetPortDirection+0x7a>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <DIO_voidSetPortDirection+0x68>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <DIO_voidSetPortDirection+0x72>
    1ab6:	13 c0       	rjmp	.+38     	; 0x1ade <DIO_voidSetPortDirection+0x7a>
		{
			case PORTA :DDRA_REG = Copy_u8Direction ;
    1ab8:	ea e3       	ldi	r30, 0x3A	; 58
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	80 83       	st	Z, r24
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTB :
						DDRB_REG = Copy_u8Direction ;
    1ac2:	e7 e3       	ldi	r30, 0x37	; 55
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTC :
						DDRC_REG = Copy_u8Direction ;
    1acc:	e4 e3       	ldi	r30, 0x34	; 52
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTD :
						DDRD_REG = Copy_u8Direction ;
    1ad6:	e1 e3       	ldi	r30, 0x31	; 49
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
						break ;

		}
	}

}u8 DIO_u8GetPortvalue(u8 Copy_u8PortId)
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <DIO_u8GetPortvalue>:
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DIO_u8GetPortvalue+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <DIO_u8GetPortvalue+0x8>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	3c 83       	std	Y+4, r19	; 0x04
    1b02:	2b 83       	std	Y+3, r18	; 0x03
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	d1 f0       	breq	.+52     	; 0x1b42 <DIO_u8GetPortvalue+0x56>
    1b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b10:	3c 81       	ldd	r19, Y+4	; 0x04
    1b12:	22 30       	cpi	r18, 0x02	; 2
    1b14:	31 05       	cpc	r19, r1
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <DIO_u8GetPortvalue+0x36>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	61 f0       	breq	.+24     	; 0x1b38 <DIO_u8GetPortvalue+0x4c>
    1b20:	1e c0       	rjmp	.+60     	; 0x1b5e <DIO_u8GetPortvalue+0x72>
    1b22:	2b 81       	ldd	r18, Y+3	; 0x03
    1b24:	3c 81       	ldd	r19, Y+4	; 0x04
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	81 f0       	breq	.+32     	; 0x1b4c <DIO_u8GetPortvalue+0x60>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	83 30       	cpi	r24, 0x03	; 3
    1b32:	91 05       	cpc	r25, r1
    1b34:	81 f0       	breq	.+32     	; 0x1b56 <DIO_u8GetPortvalue+0x6a>
    1b36:	13 c0       	rjmp	.+38     	; 0x1b5e <DIO_u8GetPortvalue+0x72>
	{
		case PORTA : Local_u8Variable=PINA_REG ;
    1b38:	e9 e3       	ldi	r30, 0x39	; 57
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	0e c0       	rjmp	.+28     	; 0x1b5e <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTB : Local_u8Variable=PINB_REG ;
    1b42:	e6 e3       	ldi	r30, 0x36	; 54
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTC : Local_u8Variable=PINC_REG ;
    1b4c:	e3 e3       	ldi	r30, 0x33	; 51
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTD : Local_u8Variable=PIND_REG ;
    1b56:	e0 e3       	ldi	r30, 0x30	; 48
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <ADC_voidInit>:
u32 ADC_u32ADCDigitalValue ;
u32 ADC_u32ADCAnalogValue ;
u8 ADC_Flag = 0 ;

void ADC_voidInit(void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
	//select ref voltage = AVCC
	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    1b76:	a7 e2       	ldi	r26, 0x27	; 39
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e7 e2       	ldi	r30, 0x27	; 39
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 64       	ori	r24, 0x40	; 64
    1b82:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    1b84:	a7 e2       	ldi	r26, 0x27	; 39
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e7 e2       	ldi	r30, 0x27	; 39
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 77       	andi	r24, 0x7F	; 127
    1b90:	8c 93       	st	X, r24
	//right adjust
	CLR_BIT(ADMUX_REG , ADMUX_ADLAR);
    1b92:	a7 e2       	ldi	r26, 0x27	; 39
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e7 e2       	ldi	r30, 0x27	; 39
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7d       	andi	r24, 0xDF	; 223
    1b9e:	8c 93       	st	X, r24
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    1ba0:	a6 e2       	ldi	r26, 0x26	; 38
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e2       	ldi	r30, 0x26	; 38
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 68       	ori	r24, 0x80	; 128
    1bac:	8c 93       	st	X, r24
	//Disable Auto Trigger
	CLR_BIT(ADCSRA_REG , ADCSRA_ADATE);
    1bae:	a6 e2       	ldi	r26, 0x26	; 38
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e6 e2       	ldi	r30, 0x26	; 38
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 7d       	andi	r24, 0xDF	; 223
    1bba:	8c 93       	st	X, r24
	//Disable PIE for ADC
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIF);
    1bbc:	a6 e2       	ldi	r26, 0x26	; 38
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e6 e2       	ldi	r30, 0x26	; 38
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7e       	andi	r24, 0xEF	; 239
    1bc8:	8c 93       	st	X, r24
	//prescaler 64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    1bca:	a6 e2       	ldi	r26, 0x26	; 38
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e6 e2       	ldi	r30, 0x26	; 38
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	84 60       	ori	r24, 0x04	; 4
    1bd6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    1bd8:	a6 e2       	ldi	r26, 0x26	; 38
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e6 e2       	ldi	r30, 0x26	; 38
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	82 60       	ori	r24, 0x02	; 2
    1be4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    1be6:	a6 e2       	ldi	r26, 0x26	; 38
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e6 e2       	ldi	r30, 0x26	; 38
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8e 7f       	andi	r24, 0xFE	; 254
    1bf2:	8c 93       	st	X, r24
	//ADCSRA_REG &= 0b11111000
	//ADCSRA_REG |= ADC_PRESCALLER

}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <ADC_voidGetAnalogRead>:

u32 ADC_voidGetAnalogRead(u8 Copy_Channel)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	29 97       	sbiw	r28, 0x09	; 9
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_u32ADCDigitalValue ;
	u32 Local_u32ADCAnalogValue ;

	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= 0b11100000 ;
    1c10:	a7 e2       	ldi	r26, 0x27	; 39
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e7 e2       	ldi	r30, 0x27	; 39
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 7e       	andi	r24, 0xE0	; 224
    1c1c:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    1c1e:	a7 e2       	ldi	r26, 0x27	; 39
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e7 e2       	ldi	r30, 0x27	; 39
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	90 81       	ld	r25, Z
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	89 2b       	or	r24, r25
    1c2c:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1c2e:	a6 e2       	ldi	r26, 0x26	; 38
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e6 e2       	ldi	r30, 0x26	; 38
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
	//polling flag
	while(GET_BIT(ADCSRA_REG , ADCSRA_ADIF)==0);
    1c3c:	e6 e2       	ldi	r30, 0x26	; 38
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	82 95       	swap	r24
    1c44:	8f 70       	andi	r24, 0x0F	; 15
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	81 70       	andi	r24, 0x01	; 1
    1c4c:	90 70       	andi	r25, 0x00	; 0
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	a9 f3       	breq	.-22     	; 0x1c3c <ADC_voidGetAnalogRead+0x42>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    1c52:	a6 e2       	ldi	r26, 0x26	; 38
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e6 e2       	ldi	r30, 0x26	; 38
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 61       	ori	r24, 0x10	; 16
    1c5e:	8c 93       	st	X, r24
	//get reading right adjust
	Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1c60:	e4 e2       	ldi	r30, 0x24	; 36
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	e5 e2       	ldi	r30, 0x25	; 37
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	98 2f       	mov	r25, r24
    1c76:	88 27       	eor	r24, r24
    1c78:	82 0f       	add	r24, r18
    1c7a:	93 1f       	adc	r25, r19
    1c7c:	aa 27       	eor	r26, r26
    1c7e:	97 fd       	sbrc	r25, 7
    1c80:	a0 95       	com	r26
    1c82:	ba 2f       	mov	r27, r26
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	af 83       	std	Y+7, r26	; 0x07
    1c8a:	b8 87       	std	Y+8, r27	; 0x08

	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 5000) / 1024 ;
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	af 81       	ldd	r26, Y+7	; 0x07
    1c92:	b8 85       	ldd	r27, Y+8	; 0x08
    1c94:	28 e8       	ldi	r18, 0x88	; 136
    1c96:	33 e1       	ldi	r19, 0x13	; 19
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 83 2b 	call	0x5706	; 0x5706 <__mulsi3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	07 2e       	mov	r0, r23
    1caa:	7a e0       	ldi	r23, 0x0A	; 10
    1cac:	b6 95       	lsr	r27
    1cae:	a7 95       	ror	r26
    1cb0:	97 95       	ror	r25
    1cb2:	87 95       	ror	r24
    1cb4:	7a 95       	dec	r23
    1cb6:	d1 f7       	brne	.-12     	; 0x1cac <ADC_voidGetAnalogRead+0xb2>
    1cb8:	70 2d       	mov	r23, r0
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	ab 83       	std	Y+3, r26	; 0x03
    1cc0:	bc 83       	std	Y+4, r27	; 0x04


	return Local_u32ADCAnalogValue ;
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1cc8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	29 96       	adiw	r28, 0x09	; 9
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <ADC_voidGetAnalogReadAsynch>:

u32 ADC_voidGetAnalogReadAsynch(u8 Copy_Channel , void(*Copy_pvCallBackFunc)(void))
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	27 97       	sbiw	r28, 0x07	; 7
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	7b 83       	std	Y+3, r23	; 0x03
    1cf8:	6a 83       	std	Y+2, r22	; 0x02
	if((ADC_Flag==1) ||(Copy_pvCallBackFunc==  NULL) )
    1cfa:	80 91 2c 01 	lds	r24, 0x012C
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <ADC_voidGetAnalogReadAsynch+0x2a>
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <ADC_voidGetAnalogReadAsynch+0x34>
	{
		return 0 ;
    1d0a:	1c 82       	std	Y+4, r1	; 0x04
    1d0c:	1d 82       	std	Y+5, r1	; 0x05
    1d0e:	1e 82       	std	Y+6, r1	; 0x06
    1d10:	1f 82       	std	Y+7, r1	; 0x07
    1d12:	32 c0       	rjmp	.+100    	; 0x1d78 <ADC_voidGetAnalogReadAsynch+0x98>
	}
	else
	{
		ADC_Flag = 1 ; //busy
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 2c 01 	sts	0x012C, r24
		//clear Mux from 0 to 4 (reg&0b11100000)
		ADMUX_REG &= 0b11100000 ;
    1d1a:	a7 e2       	ldi	r26, 0x27	; 39
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e7 e2       	ldi	r30, 0x27	; 39
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 7e       	andi	r24, 0xE0	; 224
    1d26:	8c 93       	st	X, r24
		//reg or with copy_channel
		ADMUX_REG |= Copy_Channel ;
    1d28:	a7 e2       	ldi	r26, 0x27	; 39
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e2       	ldi	r30, 0x27	; 39
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	90 81       	ld	r25, Z
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	89 2b       	or	r24, r25
    1d36:	8c 93       	st	X, r24
		//set call back func
		ADC_GPF = Copy_pvCallBackFunc ;
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	90 93 2b 01 	sts	0x012B, r25
    1d40:	80 93 2a 01 	sts	0x012A, r24
		//start conversion
		SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1d44:	a6 e2       	ldi	r26, 0x26	; 38
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e6 e2       	ldi	r30, 0x26	; 38
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 64       	ori	r24, 0x40	; 64
    1d50:	8c 93       	st	X, r24
		//Interrupt flag
		SET_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1d52:	a6 e2       	ldi	r26, 0x26	; 38
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e6 e2       	ldi	r30, 0x26	; 38
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 60       	ori	r24, 0x08	; 8
    1d5e:	8c 93       	st	X, r24

		return ADC_u32ADCAnalogValue ;
    1d60:	80 91 2d 01 	lds	r24, 0x012D
    1d64:	90 91 2e 01 	lds	r25, 0x012E
    1d68:	a0 91 2f 01 	lds	r26, 0x012F
    1d6c:	b0 91 30 01 	lds	r27, 0x0130
    1d70:	8c 83       	std	Y+4, r24	; 0x04
    1d72:	9d 83       	std	Y+5, r25	; 0x05
    1d74:	ae 83       	std	Y+6, r26	; 0x06
    1d76:	bf 83       	std	Y+7, r27	; 0x07
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	ae 81       	ldd	r26, Y+6	; 0x06
    1d7e:	bf 81       	ldd	r27, Y+7	; 0x07
	}
}
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	27 96       	adiw	r28, 0x07	; 7
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <__vector_16>:


void __vector_16(void)
{
    1d96:	1f 92       	push	r1
    1d98:	0f 92       	push	r0
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	0f 92       	push	r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	2f 93       	push	r18
    1da2:	3f 93       	push	r19
    1da4:	4f 93       	push	r20
    1da6:	5f 93       	push	r21
    1da8:	6f 93       	push	r22
    1daa:	7f 93       	push	r23
    1dac:	8f 93       	push	r24
    1dae:	9f 93       	push	r25
    1db0:	af 93       	push	r26
    1db2:	bf 93       	push	r27
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	//get reading right adjust
	ADC_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1dc0:	e4 e2       	ldi	r30, 0x24	; 36
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	e5 e2       	ldi	r30, 0x25	; 37
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	88 27       	eor	r24, r24
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	aa 27       	eor	r26, r26
    1dde:	97 fd       	sbrc	r25, 7
    1de0:	a0 95       	com	r26
    1de2:	ba 2f       	mov	r27, r26
    1de4:	80 93 31 01 	sts	0x0131, r24
    1de8:	90 93 32 01 	sts	0x0132, r25
    1dec:	a0 93 33 01 	sts	0x0133, r26
    1df0:	b0 93 34 01 	sts	0x0134, r27
	ADC_u32ADCAnalogValue = (ADC_u32ADCDigitalValue * 5000) / 1024 ;
    1df4:	80 91 31 01 	lds	r24, 0x0131
    1df8:	90 91 32 01 	lds	r25, 0x0132
    1dfc:	a0 91 33 01 	lds	r26, 0x0133
    1e00:	b0 91 34 01 	lds	r27, 0x0134
    1e04:	28 e8       	ldi	r18, 0x88	; 136
    1e06:	33 e1       	ldi	r19, 0x13	; 19
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 83 2b 	call	0x5706	; 0x5706 <__mulsi3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	07 2e       	mov	r0, r23
    1e1a:	7a e0       	ldi	r23, 0x0A	; 10
    1e1c:	b6 95       	lsr	r27
    1e1e:	a7 95       	ror	r26
    1e20:	97 95       	ror	r25
    1e22:	87 95       	ror	r24
    1e24:	7a 95       	dec	r23
    1e26:	d1 f7       	brne	.-12     	; 0x1e1c <__vector_16+0x86>
    1e28:	70 2d       	mov	r23, r0
    1e2a:	80 93 2d 01 	sts	0x012D, r24
    1e2e:	90 93 2e 01 	sts	0x012E, r25
    1e32:	a0 93 2f 01 	sts	0x012F, r26
    1e36:	b0 93 30 01 	sts	0x0130, r27

	ADC_Flag = 0 ; //not busy
    1e3a:	10 92 2c 01 	sts	0x012C, r1

	ADC_GPF() ; //call back function
    1e3e:	e0 91 2a 01 	lds	r30, 0x012A
    1e42:	f0 91 2b 01 	lds	r31, 0x012B
    1e46:	09 95       	icall

	//clear intuurrupt
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1e48:	a6 e2       	ldi	r26, 0x26	; 38
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e6 e2       	ldi	r30, 0x26	; 38
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	8c 93       	st	X, r24


}
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	ff 91       	pop	r31
    1e5c:	ef 91       	pop	r30
    1e5e:	bf 91       	pop	r27
    1e60:	af 91       	pop	r26
    1e62:	9f 91       	pop	r25
    1e64:	8f 91       	pop	r24
    1e66:	7f 91       	pop	r23
    1e68:	6f 91       	pop	r22
    1e6a:	5f 91       	pop	r21
    1e6c:	4f 91       	pop	r20
    1e6e:	3f 91       	pop	r19
    1e70:	2f 91       	pop	r18
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	18 95       	reti

00001e7c <STP_voidInit>:
#include"STP_private.h"
#include"STP_interface.h"


void STP_voidInit(void)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT , STP_C1 , OUTPUT) ;
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	64 e0       	ldi	r22, 0x04	; 4
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C2 , OUTPUT) ;
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	65 e0       	ldi	r22, 0x05	; 5
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C3 , OUTPUT) ;
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	66 e0       	ldi	r22, 0x06	; 6
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C4 , OUTPUT) ;
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	67 e0       	ldi	r22, 0x07	; 7
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>

	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	64 e0       	ldi	r22, 0x04	; 4
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	65 e0       	ldi	r22, 0x05	; 5
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	66 e0       	ldi	r22, 0x06	; 6
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	67 e0       	ldi	r22, 0x07	; 7
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <STP_voidDirectionAngle>:

void STP_voidDirectionAngle(u8 Copy_u8Direction , u16 Copy_u8Angle)
{
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	ce 57       	subi	r28, 0x7E	; 126
    1ee8:	d0 40       	sbci	r29, 0x00	; 0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e6 58       	subi	r30, 0x86	; 134
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 83       	st	Z, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	e5 58       	subi	r30, 0x85	; 133
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	71 83       	std	Z+1, r23	; 0x01
    1f04:	60 83       	st	Z, r22
	u32 Local_STPSteps ;
	Local_STPSteps = Copy_u8Angle * 512 /360 ;
    1f06:	fe 01       	movw	r30, r28
    1f08:	e5 58       	subi	r30, 0x85	; 133
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	98 2f       	mov	r25, r24
    1f12:	88 27       	eor	r24, r24
    1f14:	99 0f       	add	r25, r25
    1f16:	28 e6       	ldi	r18, 0x68	; 104
    1f18:	31 e0       	ldi	r19, 0x01	; 1
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__udivmodhi4>
    1f20:	cb 01       	movw	r24, r22
    1f22:	fe 01       	movw	r30, r28
    1f24:	ea 58       	subi	r30, 0x8A	; 138
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	cc 01       	movw	r24, r24
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	80 83       	st	Z, r24
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	a2 83       	std	Z+2, r26	; 0x02
    1f34:	b3 83       	std	Z+3, r27	; 0x03

	switch(Copy_u8Direction)
    1f36:	fe 01       	movw	r30, r28
    1f38:	e6 58       	subi	r30, 0x86	; 134
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	ef 96       	adiw	r28, 0x3f	; 63
    1f44:	3f af       	std	Y+63, r19	; 0x3f
    1f46:	2e af       	std	Y+62, r18	; 0x3e
    1f48:	ef 97       	sbiw	r28, 0x3f	; 63
    1f4a:	ef 96       	adiw	r28, 0x3f	; 63
    1f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f50:	ef 97       	sbiw	r28, 0x3f	; 63
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <STP_voidDirectionAngle+0x7e>
    1f56:	26 c3       	rjmp	.+1612   	; 0x25a4 <STP_voidDirectionAngle+0x6ca>
    1f58:	ef 96       	adiw	r28, 0x3f	; 63
    1f5a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f5c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f5e:	ef 97       	sbiw	r28, 0x3f	; 63
    1f60:	e1 30       	cpi	r30, 0x01	; 1
    1f62:	f1 05       	cpc	r31, r1
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <STP_voidDirectionAngle+0x8e>
    1f66:	59 c5       	rjmp	.+2738   	; 0x2a1a <STP_voidDirectionAngle+0xb40>
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ee 58       	subi	r30, 0x8E	; 142
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	10 82       	st	Z, r1
    1f70:	11 82       	std	Z+1, r1	; 0x01
    1f72:	12 82       	std	Z+2, r1	; 0x02
    1f74:	13 82       	std	Z+3, r1	; 0x03
    1f76:	00 c3       	rjmp	.+1536   	; 0x2578 <STP_voidDirectionAngle+0x69e>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	64 e0       	ldi	r22, 0x04	; 4
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	65 e0       	ldi	r22, 0x05	; 5
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	66 e0       	ldi	r22, 0x06	; 6
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	67 e0       	ldi	r22, 0x07	; 7
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e3 59       	subi	r30, 0x93	; 147
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 ea       	ldi	r26, 0xA0	; 160
    1fac:	b1 e4       	ldi	r27, 0x41	; 65
    1fae:	80 83       	st	Z, r24
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	a2 83       	std	Z+2, r26	; 0x02
    1fb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	07 59       	subi	r16, 0x97	; 151
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e3 59       	subi	r30, 0x93	; 147
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	f8 01       	movw	r30, r16
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e7 59       	subi	r30, 0x97	; 151
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	44 f4       	brge	.+16     	; 0x2012 <STP_voidDirectionAngle+0x138>
		__ticks = 1;
    2002:	fe 01       	movw	r30, r28
    2004:	e9 59       	subi	r30, 0x99	; 153
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	80 83       	st	Z, r24
    2010:	64 c0       	rjmp	.+200    	; 0x20da <STP_voidDirectionAngle+0x200>
	else if (__tmp > 65535)
    2012:	fe 01       	movw	r30, r28
    2014:	e7 59       	subi	r30, 0x97	; 151
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	0c f0       	brlt	.+2      	; 0x2032 <STP_voidDirectionAngle+0x158>
    2030:	43 c0       	rjmp	.+134    	; 0x20b8 <STP_voidDirectionAngle+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	fe 01       	movw	r30, r28
    2034:	e3 59       	subi	r30, 0x93	; 147
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8e 01       	movw	r16, r28
    2052:	09 59       	subi	r16, 0x99	; 153
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	1f c0       	rjmp	.+62     	; 0x20a8 <STP_voidDirectionAngle+0x1ce>
    206a:	fe 01       	movw	r30, r28
    206c:	eb 59       	subi	r30, 0x9B	; 155
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2078:	fe 01       	movw	r30, r28
    207a:	eb 59       	subi	r30, 0x9B	; 155
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <STP_voidDirectionAngle+0x1a8>
    2086:	fe 01       	movw	r30, r28
    2088:	eb 59       	subi	r30, 0x9B	; 155
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	de 01       	movw	r26, r28
    2092:	a9 59       	subi	r26, 0x99	; 153
    2094:	bf 4f       	sbci	r27, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	e9 59       	subi	r30, 0x99	; 153
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	11 96       	adiw	r26, 0x01	; 1
    20a4:	9c 93       	st	X, r25
    20a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	fe 01       	movw	r30, r28
    20aa:	e9 59       	subi	r30, 0x99	; 153
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	d1 f6       	brne	.-76     	; 0x206a <STP_voidDirectionAngle+0x190>
    20b6:	27 c0       	rjmp	.+78     	; 0x2106 <STP_voidDirectionAngle+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	8e 01       	movw	r16, r28
    20ba:	09 59       	subi	r16, 0x99	; 153
    20bc:	1f 4f       	sbci	r17, 0xFF	; 255
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 59       	subi	r30, 0x97	; 151
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	f8 01       	movw	r30, r16
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	de 01       	movw	r26, r28
    20dc:	ad 59       	subi	r26, 0x9D	; 157
    20de:	bf 4f       	sbci	r27, 0xFF	; 255
    20e0:	fe 01       	movw	r30, r28
    20e2:	e9 59       	subi	r30, 0x99	; 153
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	8d 93       	st	X+, r24
    20ec:	9c 93       	st	X, r25
    20ee:	fe 01       	movw	r30, r28
    20f0:	ed 59       	subi	r30, 0x9D	; 157
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <STP_voidDirectionAngle+0x21e>
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 59       	subi	r30, 0x9D	; 157
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	41 e0       	ldi	r20, 0x01	; 1
    210c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	65 e0       	ldi	r22, 0x05	; 5
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	66 e0       	ldi	r22, 0x06	; 6
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	67 e0       	ldi	r22, 0x07	; 7
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    212e:	fe 01       	movw	r30, r28
    2130:	e1 5a       	subi	r30, 0xA1	; 161
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 ea       	ldi	r26, 0xA0	; 160
    213a:	b1 e4       	ldi	r27, 0x41	; 65
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	a2 83       	std	Z+2, r26	; 0x02
    2142:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	8e 01       	movw	r16, r28
    2146:	05 5a       	subi	r16, 0xA5	; 165
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e1 5a       	subi	r30, 0xA1	; 161
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	f8 01       	movw	r30, r16
    216a:	80 83       	st	Z, r24
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	a2 83       	std	Z+2, r26	; 0x02
    2170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2172:	fe 01       	movw	r30, r28
    2174:	e5 5a       	subi	r30, 0xA5	; 165
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	44 f4       	brge	.+16     	; 0x21a0 <STP_voidDirectionAngle+0x2c6>
		__ticks = 1;
    2190:	fe 01       	movw	r30, r28
    2192:	e7 5a       	subi	r30, 0xA7	; 167
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	64 c0       	rjmp	.+200    	; 0x2268 <STP_voidDirectionAngle+0x38e>
	else if (__tmp > 65535)
    21a0:	fe 01       	movw	r30, r28
    21a2:	e5 5a       	subi	r30, 0xA5	; 165
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	0c f0       	brlt	.+2      	; 0x21c0 <STP_voidDirectionAngle+0x2e6>
    21be:	43 c0       	rjmp	.+134    	; 0x2246 <STP_voidDirectionAngle+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	fe 01       	movw	r30, r28
    21c2:	e1 5a       	subi	r30, 0xA1	; 161
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8e 01       	movw	r16, r28
    21e0:	07 5a       	subi	r16, 0xA7	; 167
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	1f c0       	rjmp	.+62     	; 0x2236 <STP_voidDirectionAngle+0x35c>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e9 5a       	subi	r30, 0xA9	; 169
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	fe 01       	movw	r30, r28
    2208:	e9 5a       	subi	r30, 0xA9	; 169
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <STP_voidDirectionAngle+0x336>
    2214:	fe 01       	movw	r30, r28
    2216:	e9 5a       	subi	r30, 0xA9	; 169
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221e:	de 01       	movw	r26, r28
    2220:	a7 5a       	subi	r26, 0xA7	; 167
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e7 5a       	subi	r30, 0xA7	; 167
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	9c 93       	st	X, r25
    2234:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	fe 01       	movw	r30, r28
    2238:	e7 5a       	subi	r30, 0xA7	; 167
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	d1 f6       	brne	.-76     	; 0x21f8 <STP_voidDirectionAngle+0x31e>
    2244:	27 c0       	rjmp	.+78     	; 0x2294 <STP_voidDirectionAngle+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	8e 01       	movw	r16, r28
    2248:	07 5a       	subi	r16, 0xA7	; 167
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e5 5a       	subi	r30, 0xA5	; 165
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	de 01       	movw	r26, r28
    226a:	ab 5a       	subi	r26, 0xAB	; 171
    226c:	bf 4f       	sbci	r27, 0xFF	; 255
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5a       	subi	r30, 0xA7	; 167
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	8d 93       	st	X+, r24
    227a:	9c 93       	st	X, r25
    227c:	fe 01       	movw	r30, r28
    227e:	eb 5a       	subi	r30, 0xAB	; 171
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <STP_voidDirectionAngle+0x3ac>
    228a:	fe 01       	movw	r30, r28
    228c:	eb 5a       	subi	r30, 0xAB	; 171
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	65 e0       	ldi	r22, 0x05	; 5
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	66 e0       	ldi	r22, 0x06	; 6
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	67 e0       	ldi	r22, 0x07	; 7
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 5a       	subi	r30, 0xAF	; 175
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 ea       	ldi	r26, 0xA0	; 160
    22c8:	b1 e4       	ldi	r27, 0x41	; 65
    22ca:	80 83       	st	Z, r24
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	a2 83       	std	Z+2, r26	; 0x02
    22d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	8e 01       	movw	r16, r28
    22d4:	03 5b       	subi	r16, 0xB3	; 179
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	ef 5a       	subi	r30, 0xAF	; 175
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2300:	fe 01       	movw	r30, r28
    2302:	e3 5b       	subi	r30, 0xB3	; 179
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	44 f4       	brge	.+16     	; 0x232e <STP_voidDirectionAngle+0x454>
		__ticks = 1;
    231e:	fe 01       	movw	r30, r28
    2320:	e5 5b       	subi	r30, 0xB5	; 181
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	64 c0       	rjmp	.+200    	; 0x23f6 <STP_voidDirectionAngle+0x51c>
	else if (__tmp > 65535)
    232e:	fe 01       	movw	r30, r28
    2330:	e3 5b       	subi	r30, 0xB3	; 179
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	0c f0       	brlt	.+2      	; 0x234e <STP_voidDirectionAngle+0x474>
    234c:	43 c0       	rjmp	.+134    	; 0x23d4 <STP_voidDirectionAngle+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	fe 01       	movw	r30, r28
    2350:	ef 5a       	subi	r30, 0xAF	; 175
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8e 01       	movw	r16, r28
    236e:	05 5b       	subi	r16, 0xB5	; 181
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
    2384:	1f c0       	rjmp	.+62     	; 0x23c4 <STP_voidDirectionAngle+0x4ea>
    2386:	fe 01       	movw	r30, r28
    2388:	e7 5b       	subi	r30, 0xB7	; 183
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	88 ec       	ldi	r24, 0xC8	; 200
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	fe 01       	movw	r30, r28
    2396:	e7 5b       	subi	r30, 0xB7	; 183
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <STP_voidDirectionAngle+0x4c4>
    23a2:	fe 01       	movw	r30, r28
    23a4:	e7 5b       	subi	r30, 0xB7	; 183
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	de 01       	movw	r26, r28
    23ae:	a5 5b       	subi	r26, 0xB5	; 181
    23b0:	bf 4f       	sbci	r27, 0xFF	; 255
    23b2:	fe 01       	movw	r30, r28
    23b4:	e5 5b       	subi	r30, 0xB5	; 181
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	11 96       	adiw	r26, 0x01	; 1
    23c0:	9c 93       	st	X, r25
    23c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	fe 01       	movw	r30, r28
    23c6:	e5 5b       	subi	r30, 0xB5	; 181
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	d1 f6       	brne	.-76     	; 0x2386 <STP_voidDirectionAngle+0x4ac>
    23d2:	27 c0       	rjmp	.+78     	; 0x2422 <STP_voidDirectionAngle+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	8e 01       	movw	r16, r28
    23d6:	05 5b       	subi	r16, 0xB5	; 181
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	fe 01       	movw	r30, r28
    23dc:	e3 5b       	subi	r30, 0xB3	; 179
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	de 01       	movw	r26, r28
    23f8:	a9 5b       	subi	r26, 0xB9	; 185
    23fa:	bf 4f       	sbci	r27, 0xFF	; 255
    23fc:	fe 01       	movw	r30, r28
    23fe:	e5 5b       	subi	r30, 0xB5	; 181
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	8d 93       	st	X+, r24
    2408:	9c 93       	st	X, r25
    240a:	fe 01       	movw	r30, r28
    240c:	e9 5b       	subi	r30, 0xB9	; 185
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <STP_voidDirectionAngle+0x53a>
    2418:	fe 01       	movw	r30, r28
    241a:	e9 5b       	subi	r30, 0xB9	; 185
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	64 e0       	ldi	r22, 0x04	; 4
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	65 e0       	ldi	r22, 0x05	; 5
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	66 e0       	ldi	r22, 0x06	; 6
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	67 e0       	ldi	r22, 0x07	; 7
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    244a:	fe 01       	movw	r30, r28
    244c:	ed 5b       	subi	r30, 0xBD	; 189
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a0 ea       	ldi	r26, 0xA0	; 160
    2456:	b1 e4       	ldi	r27, 0x41	; 65
    2458:	80 83       	st	Z, r24
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	a2 83       	std	Z+2, r26	; 0x02
    245e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	8e 01       	movw	r16, r28
    2462:	01 5c       	subi	r16, 0xC1	; 193
    2464:	1f 4f       	sbci	r17, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	ed 5b       	subi	r30, 0xBD	; 189
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a ef       	ldi	r20, 0xFA	; 250
    247a:	54 e4       	ldi	r21, 0x44	; 68
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	f8 01       	movw	r30, r16
    2486:	80 83       	st	Z, r24
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	a2 83       	std	Z+2, r26	; 0x02
    248c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    248e:	fe 01       	movw	r30, r28
    2490:	ff 96       	adiw	r30, 0x3f	; 63
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <STP_voidDirectionAngle+0x5da>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e af       	std	Y+62, r25	; 0x3e
    24b0:	8d af       	std	Y+61, r24	; 0x3d
    24b2:	46 c0       	rjmp	.+140    	; 0x2540 <STP_voidDirectionAngle+0x666>
	else if (__tmp > 65535)
    24b4:	fe 01       	movw	r30, r28
    24b6:	ff 96       	adiw	r30, 0x3f	; 63
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	64 f5       	brge	.+88     	; 0x2528 <STP_voidDirectionAngle+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 5b       	subi	r30, 0xBD	; 189
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e af       	std	Y+62, r25	; 0x3e
    24fc:	8d af       	std	Y+61, r24	; 0x3d
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <STP_voidDirectionAngle+0x644>
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9c af       	std	Y+60, r25	; 0x3c
    2506:	8b af       	std	Y+59, r24	; 0x3b
    2508:	8b ad       	ldd	r24, Y+59	; 0x3b
    250a:	9c ad       	ldd	r25, Y+60	; 0x3c
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <STP_voidDirectionAngle+0x632>
    2510:	9c af       	std	Y+60, r25	; 0x3c
    2512:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8d ad       	ldd	r24, Y+61	; 0x3d
    2516:	9e ad       	ldd	r25, Y+62	; 0x3e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9e af       	std	Y+62, r25	; 0x3e
    251c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2520:	9e ad       	ldd	r25, Y+62	; 0x3e
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <STP_voidDirectionAngle+0x626>
    2526:	16 c0       	rjmp	.+44     	; 0x2554 <STP_voidDirectionAngle+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	fe 01       	movw	r30, r28
    252a:	ff 96       	adiw	r30, 0x3f	; 63
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9e af       	std	Y+62, r25	; 0x3e
    253e:	8d af       	std	Y+61, r24	; 0x3d
    2540:	8d ad       	ldd	r24, Y+61	; 0x3d
    2542:	9e ad       	ldd	r25, Y+62	; 0x3e
    2544:	9a af       	std	Y+58, r25	; 0x3a
    2546:	89 af       	std	Y+57, r24	; 0x39
    2548:	89 ad       	ldd	r24, Y+57	; 0x39
    254a:	9a ad       	ldd	r25, Y+58	; 0x3a
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <STP_voidDirectionAngle+0x672>
    2550:	9a af       	std	Y+58, r25	; 0x3a
    2552:	89 af       	std	Y+57, r24	; 0x39
	Local_STPSteps = Copy_u8Angle * 512 /360 ;

	switch(Copy_u8Direction)
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    2554:	9e 01       	movw	r18, r28
    2556:	2e 58       	subi	r18, 0x8E	; 142
    2558:	3f 4f       	sbci	r19, 0xFF	; 255
    255a:	fe 01       	movw	r30, r28
    255c:	ee 58       	subi	r30, 0x8E	; 142
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	a2 81       	ldd	r26, Z+2	; 0x02
    2566:	b3 81       	ldd	r27, Z+3	; 0x03
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	a1 1d       	adc	r26, r1
    256c:	b1 1d       	adc	r27, r1
    256e:	f9 01       	movw	r30, r18
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
    2578:	fe 01       	movw	r30, r28
    257a:	ee 58       	subi	r30, 0x8E	; 142
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	de 01       	movw	r26, r28
    2580:	aa 58       	subi	r26, 0x8A	; 138
    2582:	bf 4f       	sbci	r27, 0xFF	; 255
    2584:	20 81       	ld	r18, Z
    2586:	31 81       	ldd	r19, Z+1	; 0x01
    2588:	42 81       	ldd	r20, Z+2	; 0x02
    258a:	53 81       	ldd	r21, Z+3	; 0x03
    258c:	8d 91       	ld	r24, X+
    258e:	9d 91       	ld	r25, X+
    2590:	0d 90       	ld	r0, X+
    2592:	bc 91       	ld	r27, X
    2594:	a0 2d       	mov	r26, r0
    2596:	28 17       	cp	r18, r24
    2598:	39 07       	cpc	r19, r25
    259a:	4a 07       	cpc	r20, r26
    259c:	5b 07       	cpc	r21, r27
    259e:	08 f4       	brcc	.+2      	; 0x25a2 <STP_voidDirectionAngle+0x6c8>
    25a0:	eb cc       	rjmp	.-1578   	; 0x1f78 <STP_voidDirectionAngle+0x9e>
    25a2:	3b c2       	rjmp	.+1142   	; 0x2a1a <STP_voidDirectionAngle+0xb40>
				_delay_ms(20);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    25a4:	fe 01       	movw	r30, r28
    25a6:	ef 58       	subi	r30, 0x8F	; 143
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	10 82       	st	Z, r1
    25ac:	21 c2       	rjmp	.+1090   	; 0x29f0 <STP_voidDirectionAngle+0xb16>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	65 e0       	ldi	r22, 0x05	; 5
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	67 e0       	ldi	r22, 0x07	; 7
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 ea       	ldi	r26, 0xA0	; 160
    25dc:	b1 e4       	ldi	r27, 0x41	; 65
    25de:	8d ab       	std	Y+53, r24	; 0x35
    25e0:	9e ab       	std	Y+54, r25	; 0x36
    25e2:	af ab       	std	Y+55, r26	; 0x37
    25e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6d a9       	ldd	r22, Y+53	; 0x35
    25e8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ea:	8f a9       	ldd	r24, Y+55	; 0x37
    25ec:	98 ad       	ldd	r25, Y+56	; 0x38
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 ab       	std	Y+49, r24	; 0x31
    2600:	9a ab       	std	Y+50, r25	; 0x32
    2602:	ab ab       	std	Y+51, r26	; 0x33
    2604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2606:	69 a9       	ldd	r22, Y+49	; 0x31
    2608:	7a a9       	ldd	r23, Y+50	; 0x32
    260a:	8b a9       	ldd	r24, Y+51	; 0x33
    260c:	9c a9       	ldd	r25, Y+52	; 0x34
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <STP_voidDirectionAngle+0x74e>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <STP_voidDirectionAngle+0x7cc>
	else if (__tmp > 65535)
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <STP_voidDirectionAngle+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6d a9       	ldd	r22, Y+53	; 0x35
    2642:	7e a9       	ldd	r23, Y+54	; 0x36
    2644:	8f a9       	ldd	r24, Y+55	; 0x37
    2646:	98 ad       	ldd	r25, Y+56	; 0x38
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <STP_voidDirectionAngle+0x7ae>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e a7       	std	Y+46, r25	; 0x2e
    2670:	8d a7       	std	Y+45, r24	; 0x2d
    2672:	8d a5       	ldd	r24, Y+45	; 0x2d
    2674:	9e a5       	ldd	r25, Y+46	; 0x2e
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <STP_voidDirectionAngle+0x79c>
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2680:	98 a9       	ldd	r25, Y+48	; 0x30
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	98 ab       	std	Y+48, r25	; 0x30
    2686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <STP_voidDirectionAngle+0x790>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <STP_voidDirectionAngle+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	69 a9       	ldd	r22, Y+49	; 0x31
    2694:	7a a9       	ldd	r23, Y+50	; 0x32
    2696:	8b a9       	ldd	r24, Y+51	; 0x33
    2698:	9c a9       	ldd	r25, Y+52	; 0x34
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	9c a7       	std	Y+44, r25	; 0x2c
    26ac:	8b a7       	std	Y+43, r24	; 0x2b
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <STP_voidDirectionAngle+0x7d8>
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	64 e0       	ldi	r22, 0x04	; 4
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	66 e0       	ldi	r22, 0x06	; 6
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	67 e0       	ldi	r22, 0x07	; 7
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 ea       	ldi	r26, 0xA0	; 160
    26e8:	b1 e4       	ldi	r27, 0x41	; 65
    26ea:	8f a3       	std	Y+39, r24	; 0x27
    26ec:	98 a7       	std	Y+40, r25	; 0x28
    26ee:	a9 a7       	std	Y+41, r26	; 0x29
    26f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6f a1       	ldd	r22, Y+39	; 0x27
    26f4:	78 a5       	ldd	r23, Y+40	; 0x28
    26f6:	89 a5       	ldd	r24, Y+41	; 0x29
    26f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8b a3       	std	Y+35, r24	; 0x23
    270c:	9c a3       	std	Y+36, r25	; 0x24
    270e:	ad a3       	std	Y+37, r26	; 0x25
    2710:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <STP_voidDirectionAngle+0x85a>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <STP_voidDirectionAngle+0x8d8>
	else if (__tmp > 65535)
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <STP_voidDirectionAngle+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6f a1       	ldd	r22, Y+39	; 0x27
    274e:	78 a5       	ldd	r23, Y+40	; 0x28
    2750:	89 a5       	ldd	r24, Y+41	; 0x29
    2752:	9a a5       	ldd	r25, Y+42	; 0x2a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <STP_voidDirectionAngle+0x8ba>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
    277e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2780:	98 a1       	ldd	r25, Y+32	; 0x20
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <STP_voidDirectionAngle+0x8a8>
    2786:	98 a3       	std	Y+32, r25	; 0x20
    2788:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	89 a1       	ldd	r24, Y+33	; 0x21
    278c:	9a a1       	ldd	r25, Y+34	; 0x22
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <STP_voidDirectionAngle+0x89c>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <STP_voidDirectionAngle+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6b a1       	ldd	r22, Y+35	; 0x23
    27a0:	7c a1       	ldd	r23, Y+36	; 0x24
    27a2:	8d a1       	ldd	r24, Y+37	; 0x25
    27a4:	9e a1       	ldd	r25, Y+38	; 0x26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <STP_voidDirectionAngle+0x8e4>
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	64 e0       	ldi	r22, 0x04	; 4
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	65 e0       	ldi	r22, 0x05	; 5
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	66 e0       	ldi	r22, 0x06	; 6
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    27e4:	83 e0       	ldi	r24, 0x03	; 3
    27e6:	67 e0       	ldi	r22, 0x07	; 7
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 ea       	ldi	r26, 0xA0	; 160
    27f4:	b1 e4       	ldi	r27, 0x41	; 65
    27f6:	89 8f       	std	Y+25, r24	; 0x19
    27f8:	9a 8f       	std	Y+26, r25	; 0x1a
    27fa:	ab 8f       	std	Y+27, r26	; 0x1b
    27fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8d 8b       	std	Y+21, r24	; 0x15
    2818:	9e 8b       	std	Y+22, r25	; 0x16
    281a:	af 8b       	std	Y+23, r26	; 0x17
    281c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281e:	6d 89       	ldd	r22, Y+21	; 0x15
    2820:	7e 89       	ldd	r23, Y+22	; 0x16
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <STP_voidDirectionAngle+0x966>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
    283e:	3f c0       	rjmp	.+126    	; 0x28be <STP_voidDirectionAngle+0x9e4>
	else if (__tmp > 65535)
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <STP_voidDirectionAngle+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	69 8d       	ldd	r22, Y+25	; 0x19
    285a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <STP_voidDirectionAngle+0x9c6>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	89 8b       	std	Y+17, r24	; 0x11
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	9a 89       	ldd	r25, Y+18	; 0x12
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <STP_voidDirectionAngle+0x9b4>
    2892:	9a 8b       	std	Y+18, r25	; 0x12
    2894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <STP_voidDirectionAngle+0x9a8>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <STP_voidDirectionAngle+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	98 8b       	std	Y+16, r25	; 0x10
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	98 89       	ldd	r25, Y+16	; 0x10
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <STP_voidDirectionAngle+0x9f0>
    28ce:	98 8b       	std	Y+16, r25	; 0x10
    28d0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	64 e0       	ldi	r22, 0x04	; 4
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	65 e0       	ldi	r22, 0x05	; 5
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	66 e0       	ldi	r22, 0x06	; 6
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	67 e0       	ldi	r22, 0x07	; 7
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	a0 ea       	ldi	r26, 0xA0	; 160
    2900:	b1 e4       	ldi	r27, 0x41	; 65
    2902:	8b 87       	std	Y+11, r24	; 0x0b
    2904:	9c 87       	std	Y+12, r25	; 0x0c
    2906:	ad 87       	std	Y+13, r26	; 0x0d
    2908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290a:	6b 85       	ldd	r22, Y+11	; 0x0b
    290c:	7c 85       	ldd	r23, Y+12	; 0x0c
    290e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2910:	9e 85       	ldd	r25, Y+14	; 0x0e
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8f 83       	std	Y+7, r24	; 0x07
    2924:	98 87       	std	Y+8, r25	; 0x08
    2926:	a9 87       	std	Y+9, r26	; 0x09
    2928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	2c f4       	brge	.+10     	; 0x294c <STP_voidDirectionAngle+0xa72>
		__ticks = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <STP_voidDirectionAngle+0xaf0>
	else if (__tmp > 65535)
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	4c f5       	brge	.+82     	; 0x29b6 <STP_voidDirectionAngle+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	6b 85       	ldd	r22, Y+11	; 0x0b
    2966:	7c 85       	ldd	r23, Y+12	; 0x0c
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <STP_voidDirectionAngle+0xad2>
    298e:	88 ec       	ldi	r24, 0xC8	; 200
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <STP_voidDirectionAngle+0xac0>
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f7       	brne	.-38     	; 0x298e <STP_voidDirectionAngle+0xab4>
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <STP_voidDirectionAngle+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	9a 81       	ldd	r25, Y+2	; 0x02
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <STP_voidDirectionAngle+0xafc>
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    29de:	de 01       	movw	r26, r28
    29e0:	af 58       	subi	r26, 0x8F	; 143
    29e2:	bf 4f       	sbci	r27, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	ef 58       	subi	r30, 0x8F	; 143
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	8f 5f       	subi	r24, 0xFF	; 255
    29ee:	8c 93       	st	X, r24
    29f0:	fe 01       	movw	r30, r28
    29f2:	ef 58       	subi	r30, 0x8F	; 143
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	fe 01       	movw	r30, r28
    2a02:	ea 58       	subi	r30, 0x8A	; 138
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a0e:	28 17       	cp	r18, r24
    2a10:	39 07       	cpc	r19, r25
    2a12:	4a 07       	cpc	r20, r26
    2a14:	5b 07       	cpc	r21, r27
    2a16:	08 f4       	brcc	.+2      	; 0x2a1a <STP_voidDirectionAngle+0xb40>
    2a18:	ca cd       	rjmp	.-1132   	; 0x25ae <STP_voidDirectionAngle+0x6d4>
			break;
		default :
			break ;
	}

}
    2a1a:	c2 58       	subi	r28, 0x82	; 130
    2a1c:	df 4f       	sbci	r29, 0xFF	; 255
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	08 95       	ret

00002a32 <STP_voidMove>:

void STP_voidMove(void)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	e8 97       	sbiw	r28, 0x38	; 56
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	64 e0       	ldi	r22, 0x04	; 4
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	65 e0       	ldi	r22, 0x05	; 5
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	66 e0       	ldi	r22, 0x06	; 6
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	67 e0       	ldi	r22, 0x07	; 7
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e2       	ldi	r26, 0x20	; 32
    2a74:	b1 e4       	ldi	r27, 0x41	; 65
    2a76:	8d ab       	std	Y+53, r24	; 0x35
    2a78:	9e ab       	std	Y+54, r25	; 0x36
    2a7a:	af ab       	std	Y+55, r26	; 0x37
    2a7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a80:	7e a9       	ldd	r23, Y+54	; 0x36
    2a82:	8f a9       	ldd	r24, Y+55	; 0x37
    2a84:	98 ad       	ldd	r25, Y+56	; 0x38
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	89 ab       	std	Y+49, r24	; 0x31
    2a98:	9a ab       	std	Y+50, r25	; 0x32
    2a9a:	ab ab       	std	Y+51, r26	; 0x33
    2a9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <STP_voidMove+0x8e>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <STP_voidMove+0x10c>
	else if (__tmp > 65535)
    2ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <STP_voidMove+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ada:	7e a9       	ldd	r23, Y+54	; 0x36
    2adc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ade:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	98 ab       	std	Y+48, r25	; 0x30
    2afe:	8f a7       	std	Y+47, r24	; 0x2f
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <STP_voidMove+0xee>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e a7       	std	Y+46, r25	; 0x2e
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
    2b0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <STP_voidMove+0xdc>
    2b12:	9e a7       	std	Y+46, r25	; 0x2e
    2b14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	98 ab       	std	Y+48, r25	; 0x30
    2b1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b22:	98 a9       	ldd	r25, Y+48	; 0x30
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <STP_voidMove+0xd0>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <STP_voidMove+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b30:	9c a9       	ldd	r25, Y+52	; 0x34
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	9c a7       	std	Y+44, r25	; 0x2c
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <STP_voidMove+0x118>
    2b4e:	9c a7       	std	Y+44, r25	; 0x2c
    2b50:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	64 e0       	ldi	r22, 0x04	; 4
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	65 e0       	ldi	r22, 0x05	; 5
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	66 e0       	ldi	r22, 0x06	; 6
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e2       	ldi	r26, 0x20	; 32
    2b80:	b1 e4       	ldi	r27, 0x41	; 65
    2b82:	8f a3       	std	Y+39, r24	; 0x27
    2b84:	98 a7       	std	Y+40, r25	; 0x28
    2b86:	a9 a7       	std	Y+41, r26	; 0x29
    2b88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8b a3       	std	Y+35, r24	; 0x23
    2ba4:	9c a3       	std	Y+36, r25	; 0x24
    2ba6:	ad a3       	std	Y+37, r26	; 0x25
    2ba8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <STP_voidMove+0x19a>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9a a3       	std	Y+34, r25	; 0x22
    2bc8:	89 a3       	std	Y+33, r24	; 0x21
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <STP_voidMove+0x218>
	else if (__tmp > 65535)
    2bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bce:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <STP_voidMove+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6f a1       	ldd	r22, Y+39	; 0x27
    2be6:	78 a5       	ldd	r23, Y+40	; 0x28
    2be8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9a a3       	std	Y+34, r25	; 0x22
    2c0a:	89 a3       	std	Y+33, r24	; 0x21
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <STP_voidMove+0x1fa>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	98 a3       	std	Y+32, r25	; 0x20
    2c14:	8f 8f       	std	Y+31, r24	; 0x1f
    2c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c18:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <STP_voidMove+0x1e8>
    2c1e:	98 a3       	std	Y+32, r25	; 0x20
    2c20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9a a3       	std	Y+34, r25	; 0x22
    2c2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <STP_voidMove+0x1dc>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <STP_voidMove+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6b a1       	ldd	r22, Y+35	; 0x23
    2c38:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9a a3       	std	Y+34, r25	; 0x22
    2c48:	89 a3       	std	Y+33, r24	; 0x21
    2c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c50:	8d 8f       	std	Y+29, r24	; 0x1d
    2c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <STP_voidMove+0x224>
    2c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c5c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2c5e:	83 e0       	ldi	r24, 0x03	; 3
    2c60:	64 e0       	ldi	r22, 0x04	; 4
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2c68:	83 e0       	ldi	r24, 0x03	; 3
    2c6a:	65 e0       	ldi	r22, 0x05	; 5
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2c72:	83 e0       	ldi	r24, 0x03	; 3
    2c74:	66 e0       	ldi	r22, 0x06	; 6
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2c7c:	83 e0       	ldi	r24, 0x03	; 3
    2c7e:	67 e0       	ldi	r22, 0x07	; 7
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e2       	ldi	r26, 0x20	; 32
    2c8c:	b1 e4       	ldi	r27, 0x41	; 65
    2c8e:	89 8f       	std	Y+25, r24	; 0x19
    2c90:	9a 8f       	std	Y+26, r25	; 0x1a
    2c92:	ab 8f       	std	Y+27, r26	; 0x1b
    2c94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c96:	69 8d       	ldd	r22, Y+25	; 0x19
    2c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a ef       	ldi	r20, 0xFA	; 250
    2ca4:	54 e4       	ldi	r21, 0x44	; 68
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	8d 8b       	std	Y+21, r24	; 0x15
    2cb0:	9e 8b       	std	Y+22, r25	; 0x16
    2cb2:	af 8b       	std	Y+23, r26	; 0x17
    2cb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e8       	ldi	r20, 0x80	; 128
    2cc4:	5f e3       	ldi	r21, 0x3F	; 63
    2cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cca:	88 23       	and	r24, r24
    2ccc:	2c f4       	brge	.+10     	; 0x2cd8 <STP_voidMove+0x2a6>
		__ticks = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 8b       	std	Y+20, r25	; 0x14
    2cd4:	8b 8b       	std	Y+19, r24	; 0x13
    2cd6:	3f c0       	rjmp	.+126    	; 0x2d56 <STP_voidMove+0x324>
	else if (__tmp > 65535)
    2cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cda:	7e 89       	ldd	r23, Y+22	; 0x16
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	3f ef       	ldi	r19, 0xFF	; 255
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	57 e4       	ldi	r21, 0x47	; 71
    2ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	4c f5       	brge	.+82     	; 0x2d42 <STP_voidMove+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9c 8b       	std	Y+20, r25	; 0x14
    2d16:	8b 8b       	std	Y+19, r24	; 0x13
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <STP_voidMove+0x306>
    2d1a:	88 ec       	ldi	r24, 0xC8	; 200
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9a 8b       	std	Y+18, r25	; 0x12
    2d20:	89 8b       	std	Y+17, r24	; 0x11
    2d22:	89 89       	ldd	r24, Y+17	; 0x11
    2d24:	9a 89       	ldd	r25, Y+18	; 0x12
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <STP_voidMove+0x2f4>
    2d2a:	9a 8b       	std	Y+18, r25	; 0x12
    2d2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	9c 8b       	std	Y+20, r25	; 0x14
    2d36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <STP_voidMove+0x2e8>
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <STP_voidMove+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	6d 89       	ldd	r22, Y+21	; 0x15
    2d44:	7e 89       	ldd	r23, Y+22	; 0x16
    2d46:	8f 89       	ldd	r24, Y+23	; 0x17
    2d48:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9c 8b       	std	Y+20, r25	; 0x14
    2d54:	8b 8b       	std	Y+19, r24	; 0x13
    2d56:	8b 89       	ldd	r24, Y+19	; 0x13
    2d58:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5a:	98 8b       	std	Y+16, r25	; 0x10
    2d5c:	8f 87       	std	Y+15, r24	; 0x0f
    2d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d60:	98 89       	ldd	r25, Y+16	; 0x10
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <STP_voidMove+0x330>
    2d66:	98 8b       	std	Y+16, r25	; 0x10
    2d68:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	64 e0       	ldi	r22, 0x04	; 4
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
    2d70:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	65 e0       	ldi	r22, 0x05	; 5
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2d7e:	83 e0       	ldi	r24, 0x03	; 3
    2d80:	66 e0       	ldi	r22, 0x06	; 6
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	67 e0       	ldi	r22, 0x07	; 7
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a0 e2       	ldi	r26, 0x20	; 32
    2d98:	b1 e4       	ldi	r27, 0x41	; 65
    2d9a:	8b 87       	std	Y+11, r24	; 0x0b
    2d9c:	9c 87       	std	Y+12, r25	; 0x0c
    2d9e:	ad 87       	std	Y+13, r26	; 0x0d
    2da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	98 87       	std	Y+8, r25	; 0x08
    2dbe:	a9 87       	std	Y+9, r26	; 0x09
    2dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <STP_voidMove+0x3b2>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <STP_voidMove+0x430>
	else if (__tmp > 65535)
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <STP_voidMove+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <STP_voidMove+0x412>
    2e26:	88 ec       	ldi	r24, 0xC8	; 200
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <STP_voidMove+0x400>
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <STP_voidMove+0x3f4>
    2e4c:	fc cd       	rjmp	.-1032   	; 0x2a46 <STP_voidMove+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e50:	78 85       	ldd	r23, Y+8	; 0x08
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <STP_voidMove+0x43c>
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	e7 cd       	rjmp	.-1074   	; 0x2a46 <STP_voidMove+0x14>

00002e78 <STP_voidStop>:
			_delay_ms(10);
	}
}

void STP_voidStop(void)
{
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	2e 97       	sbiw	r28, 0x0e	; 14
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	64 e0       	ldi	r22, 0x04	; 4
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	65 e0       	ldi	r22, 0x05	; 5
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2ea0:	83 e0       	ldi	r24, 0x03	; 3
    2ea2:	66 e0       	ldi	r22, 0x06	; 6
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2eaa:	83 e0       	ldi	r24, 0x03	; 3
    2eac:	67 e0       	ldi	r22, 0x07	; 7
    2eae:	41 e0       	ldi	r20, 0x01	; 1
    2eb0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a0 e2       	ldi	r26, 0x20	; 32
    2eba:	b1 e4       	ldi	r27, 0x41	; 65
    2ebc:	8b 87       	std	Y+11, r24	; 0x0b
    2ebe:	9c 87       	std	Y+12, r25	; 0x0c
    2ec0:	ad 87       	std	Y+13, r26	; 0x0d
    2ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a ef       	ldi	r20, 0xFA	; 250
    2ed2:	54 e4       	ldi	r21, 0x44	; 68
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8f 83       	std	Y+7, r24	; 0x07
    2ede:	98 87       	std	Y+8, r25	; 0x08
    2ee0:	a9 87       	std	Y+9, r26	; 0x09
    2ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee6:	78 85       	ldd	r23, Y+8	; 0x08
    2ee8:	89 85       	ldd	r24, Y+9	; 0x09
    2eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <STP_voidStop+0x8e>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <STP_voidStop+0x10c>
	else if (__tmp > 65535)
    2f06:	6f 81       	ldd	r22, Y+7	; 0x07
    2f08:	78 85       	ldd	r23, Y+8	; 0x08
    2f0a:	89 85       	ldd	r24, Y+9	; 0x09
    2f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <STP_voidStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <STP_voidStop+0xee>
    2f48:	88 ec       	ldi	r24, 0xC8	; 200
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	8b 83       	std	Y+3, r24	; 0x03
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <STP_voidStop+0xdc>
    2f58:	9c 83       	std	Y+4, r25	; 0x04
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <STP_voidStop+0xd0>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <STP_voidStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6f 81       	ldd	r22, Y+7	; 0x07
    2f72:	78 85       	ldd	r23, Y+8	; 0x08
    2f74:	89 85       	ldd	r24, Y+9	; 0x09
    2f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	9a 83       	std	Y+2, r25	; 0x02
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <STP_voidStop+0x118>
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2f98:	2e 96       	adiw	r28, 0x0e	; 14
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <SevenSeg_voidInit>:




void SevenSeg_voidInit(u8 Copy_u8PortId)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	0f 92       	push	r0
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	89 83       	std	Y+1, r24	; 0x01
	LED_voidInitLedString(Copy_u8PortId);
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	0e 94 0a 18 	call	0x3014	; 0x3014 <LED_voidInitLedString>
}
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <SevenSeg_voidDisplayNumber>:

void SevenSeg_voidDisplayNumber(u8 Copy_u8PortId,u8 Copy_u8DisblayNumber)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <SevenSeg_voidDisplayNumber+0x6>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	89 83       	std	Y+1, r24	; 0x01
    2fd0:	6a 83       	std	Y+2, r22	; 0x02
	if ( (Copy_u8DisblayNumber >= 0) || (Copy_u8DisblayNumber<10) )
	{
		LED_voidLedStringOnOff(Copy_u8PortId ,SevenSEG_u8SevenSegArray[Copy_u8DisblayNumber]);
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	88 2f       	mov	r24, r24
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	fc 01       	movw	r30, r24
    2fda:	ef 5f       	subi	r30, 0xFF	; 255
    2fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fde:	90 81       	ld	r25, Z
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	69 2f       	mov	r22, r25
    2fe4:	0e 94 43 18 	call	0x3086	; 0x3086 <LED_voidLedStringOnOff>
	}
	else
	{
		//Do nothing
	}
}
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <LED_voidInitOneLed>:
#include"LED_interface.h"



void LED_voidInitOneLed(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <LED_voidInitOneLed+0x6>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8PortId ,Copy_u8PinId , OUTPUT) ;
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	6a 81       	ldd	r22, Y+2	; 0x02
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <LED_voidInitLedString>:

void LED_voidInitLedString(u8 Copy_u8PortId)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	0f 92       	push	r0
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_u8PortId , DIO_u8PORT_OUTPUT);
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	6f ef       	ldi	r22, 0xFF	; 255
    3024:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <DIO_voidSetPortDirection>
}
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <LED_voidLedOnOff>:

void LED_voidLedOnOff(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8State)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <LED_voidLedOnOff+0x6>
    3036:	00 d0       	rcall	.+0      	; 0x3038 <LED_voidLedOnOff+0x8>
    3038:	0f 92       	push	r0
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	6a 83       	std	Y+2, r22	; 0x02
    3042:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8State)
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	3d 83       	std	Y+5, r19	; 0x05
    304c:	2c 83       	std	Y+4, r18	; 0x04
    304e:	8c 81       	ldd	r24, Y+4	; 0x04
    3050:	9d 81       	ldd	r25, Y+5	; 0x05
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	59 f0       	breq	.+22     	; 0x306c <LED_voidLedOnOff+0x3c>
    3056:	2c 81       	ldd	r18, Y+4	; 0x04
    3058:	3d 81       	ldd	r19, Y+5	; 0x05
    305a:	21 30       	cpi	r18, 0x01	; 1
    305c:	31 05       	cpc	r19, r1
    305e:	59 f4       	brne	.+22     	; 0x3076 <LED_voidLedOnOff+0x46>
	{
		case ON  :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , HIGH) ; break ;
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	6a 81       	ldd	r22, Y+2	; 0x02
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    306a:	05 c0       	rjmp	.+10     	; 0x3076 <LED_voidLedOnOff+0x46>
		case OFF :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , LOW ) ; break ;
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	6a 81       	ldd	r22, Y+2	; 0x02
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
		default  :
			break ;
	}
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <LED_voidLedStringOnOff>:
void LED_voidLedStringOnOff(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <LED_voidLedStringOnOff+0x6>
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	6a 83       	std	Y+2, r22	; 0x02

	DIO_voidSetPortvalue(Copy_u8PortId , Copy_u8Value) ;
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	6a 81       	ldd	r22, Y+2	; 0x02
    3098:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPortvalue>

}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <LCD_voidInit>:
#include"LCD_config.h"
#include"LCD_private.h"
#include"LCD_interface.h"

void LCD_voidInit(void)
{
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	c6 54       	subi	r28, 0x46	; 70
    30b4:	d0 40       	sbci	r29, 0x00	; 0
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
	/*config LCD control pins*/
	DIO_voidSetPinDirection(LCD_CR , RS_PIN , OUTPUT) ; //rs output
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	64 e0       	ldi	r22, 0x04	; 4
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , RW_PIN , OUTPUT) ; //rw output
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	65 e0       	ldi	r22, 0x05	; 5
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , E_PIN , OUTPUT) ; //E output
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	66 e0       	ldi	r22, 0x06	; 6
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>

	/*Direction of data pins*/
	DIO_voidSetPortDirection(LCD_DR , DIO_u8PORT_OUTPUT);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	6f ef       	ldi	r22, 0xFF	; 255
    30e2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <DIO_voidSetPortDirection>
    30e6:	fe 01       	movw	r30, r28
    30e8:	ed 5b       	subi	r30, 0xBD	; 189
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a8 e4       	ldi	r26, 0x48	; 72
    30f2:	b2 e4       	ldi	r27, 0x42	; 66
    30f4:	80 83       	st	Z, r24
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	a2 83       	std	Z+2, r26	; 0x02
    30fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	8e 01       	movw	r16, r28
    30fe:	01 5c       	subi	r16, 0xC1	; 193
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	ed 5b       	subi	r30, 0xBD	; 189
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	4a ef       	ldi	r20, 0xFA	; 250
    3116:	54 e4       	ldi	r21, 0x44	; 68
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	a2 83       	std	Z+2, r26	; 0x02
    3128:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    312a:	fe 01       	movw	r30, r28
    312c:	ff 96       	adiw	r30, 0x3f	; 63
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <LCD_voidInit+0xaa>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9e af       	std	Y+62, r25	; 0x3e
    314c:	8d af       	std	Y+61, r24	; 0x3d
    314e:	46 c0       	rjmp	.+140    	; 0x31dc <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    3150:	fe 01       	movw	r30, r28
    3152:	ff 96       	adiw	r30, 0x3f	; 63
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	3f ef       	ldi	r19, 0xFF	; 255
    3160:	4f e7       	ldi	r20, 0x7F	; 127
    3162:	57 e4       	ldi	r21, 0x47	; 71
    3164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3168:	18 16       	cp	r1, r24
    316a:	64 f5       	brge	.+88     	; 0x31c4 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316c:	fe 01       	movw	r30, r28
    316e:	ed 5b       	subi	r30, 0xBD	; 189
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e2       	ldi	r20, 0x20	; 32
    3180:	51 e4       	ldi	r21, 0x41	; 65
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9e af       	std	Y+62, r25	; 0x3e
    3198:	8d af       	std	Y+61, r24	; 0x3d
    319a:	0f c0       	rjmp	.+30     	; 0x31ba <LCD_voidInit+0x114>
    319c:	88 ec       	ldi	r24, 0xC8	; 200
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9c af       	std	Y+60, r25	; 0x3c
    31a2:	8b af       	std	Y+59, r24	; 0x3b
    31a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    31a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <LCD_voidInit+0x102>
    31ac:	9c af       	std	Y+60, r25	; 0x3c
    31ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	9e af       	std	Y+62, r25	; 0x3e
    31b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    31bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	69 f7       	brne	.-38     	; 0x319c <LCD_voidInit+0xf6>
    31c2:	16 c0       	rjmp	.+44     	; 0x31f0 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c4:	fe 01       	movw	r30, r28
    31c6:	ff 96       	adiw	r30, 0x3f	; 63
    31c8:	60 81       	ld	r22, Z
    31ca:	71 81       	ldd	r23, Z+1	; 0x01
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9e af       	std	Y+62, r25	; 0x3e
    31da:	8d af       	std	Y+61, r24	; 0x3d
    31dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31de:	9e ad       	ldd	r25, Y+62	; 0x3e
    31e0:	9a af       	std	Y+58, r25	; 0x3a
    31e2:	89 af       	std	Y+57, r24	; 0x39
    31e4:	89 ad       	ldd	r24, Y+57	; 0x39
    31e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <LCD_voidInit+0x142>
    31ec:	9a af       	std	Y+58, r25	; 0x3a
    31ee:	89 af       	std	Y+57, r24	; 0x39

	/*delay 50 ms*/
	_delay_ms(50);

	/*Send Function Set instruction*/
	LCD_voidSendCommand(0b00111000);
    31f0:	88 e3       	ldi	r24, 0x38	; 56
    31f2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e4       	ldi	r27, 0x40	; 64
    31fe:	8d ab       	std	Y+53, r24	; 0x35
    3200:	9e ab       	std	Y+54, r25	; 0x36
    3202:	af ab       	std	Y+55, r26	; 0x37
    3204:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3206:	6d a9       	ldd	r22, Y+53	; 0x35
    3208:	7e a9       	ldd	r23, Y+54	; 0x36
    320a:	8f a9       	ldd	r24, Y+55	; 0x37
    320c:	98 ad       	ldd	r25, Y+56	; 0x38
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a ef       	ldi	r20, 0xFA	; 250
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	89 ab       	std	Y+49, r24	; 0x31
    3220:	9a ab       	std	Y+50, r25	; 0x32
    3222:	ab ab       	std	Y+51, r26	; 0x33
    3224:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3226:	69 a9       	ldd	r22, Y+49	; 0x31
    3228:	7a a9       	ldd	r23, Y+50	; 0x32
    322a:	8b a9       	ldd	r24, Y+51	; 0x33
    322c:	9c a9       	ldd	r25, Y+52	; 0x34
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <LCD_voidInit+0x1a2>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	98 ab       	std	Y+48, r25	; 0x30
    3244:	8f a7       	std	Y+47, r24	; 0x2f
    3246:	3f c0       	rjmp	.+126    	; 0x32c6 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    3248:	69 a9       	ldd	r22, Y+49	; 0x31
    324a:	7a a9       	ldd	r23, Y+50	; 0x32
    324c:	8b a9       	ldd	r24, Y+51	; 0x33
    324e:	9c a9       	ldd	r25, Y+52	; 0x34
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	4c f5       	brge	.+82     	; 0x32b2 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3260:	6d a9       	ldd	r22, Y+53	; 0x35
    3262:	7e a9       	ldd	r23, Y+54	; 0x36
    3264:	8f a9       	ldd	r24, Y+55	; 0x37
    3266:	98 ad       	ldd	r25, Y+56	; 0x38
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	98 ab       	std	Y+48, r25	; 0x30
    3286:	8f a7       	std	Y+47, r24	; 0x2f
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <LCD_voidInit+0x202>
    328a:	88 ec       	ldi	r24, 0xC8	; 200
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9e a7       	std	Y+46, r25	; 0x2e
    3290:	8d a7       	std	Y+45, r24	; 0x2d
    3292:	8d a5       	ldd	r24, Y+45	; 0x2d
    3294:	9e a5       	ldd	r25, Y+46	; 0x2e
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_voidInit+0x1f0>
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329e:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a0:	98 a9       	ldd	r25, Y+48	; 0x30
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	98 ab       	std	Y+48, r25	; 0x30
    32a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32aa:	98 a9       	ldd	r25, Y+48	; 0x30
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	69 f7       	brne	.-38     	; 0x328a <LCD_voidInit+0x1e4>
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b2:	69 a9       	ldd	r22, Y+49	; 0x31
    32b4:	7a a9       	ldd	r23, Y+50	; 0x32
    32b6:	8b a9       	ldd	r24, Y+51	; 0x33
    32b8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	98 ab       	std	Y+48, r25	; 0x30
    32c4:	8f a7       	std	Y+47, r24	; 0x2f
    32c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c8:	98 a9       	ldd	r25, Y+48	; 0x30
    32ca:	9c a7       	std	Y+44, r25	; 0x2c
    32cc:	8b a7       	std	Y+43, r24	; 0x2b
    32ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCD_voidInit+0x22c>
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/*clear display inst*/
	LCD_voidSendCommand(0b00000001);
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	a0 e0       	ldi	r26, 0x00	; 0
    32e6:	b0 e4       	ldi	r27, 0x40	; 64
    32e8:	8f a3       	std	Y+39, r24	; 0x27
    32ea:	98 a7       	std	Y+40, r25	; 0x28
    32ec:	a9 a7       	std	Y+41, r26	; 0x29
    32ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6f a1       	ldd	r22, Y+39	; 0x27
    32f2:	78 a5       	ldd	r23, Y+40	; 0x28
    32f4:	89 a5       	ldd	r24, Y+41	; 0x29
    32f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a ef       	ldi	r20, 0xFA	; 250
    32fe:	54 e4       	ldi	r21, 0x44	; 68
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8b a3       	std	Y+35, r24	; 0x23
    330a:	9c a3       	std	Y+36, r25	; 0x24
    330c:	ad a3       	std	Y+37, r26	; 0x25
    330e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3310:	6b a1       	ldd	r22, Y+35	; 0x23
    3312:	7c a1       	ldd	r23, Y+36	; 0x24
    3314:	8d a1       	ldd	r24, Y+37	; 0x25
    3316:	9e a1       	ldd	r25, Y+38	; 0x26
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <LCD_voidInit+0x28c>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9a a3       	std	Y+34, r25	; 0x22
    332e:	89 a3       	std	Y+33, r24	; 0x21
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3332:	6b a1       	ldd	r22, Y+35	; 0x23
    3334:	7c a1       	ldd	r23, Y+36	; 0x24
    3336:	8d a1       	ldd	r24, Y+37	; 0x25
    3338:	9e a1       	ldd	r25, Y+38	; 0x26
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6f a1       	ldd	r22, Y+39	; 0x27
    334c:	78 a5       	ldd	r23, Y+40	; 0x28
    334e:	89 a5       	ldd	r24, Y+41	; 0x29
    3350:	9a a5       	ldd	r25, Y+42	; 0x2a
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9a a3       	std	Y+34, r25	; 0x22
    3370:	89 a3       	std	Y+33, r24	; 0x21
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <LCD_voidInit+0x2ec>
    3374:	88 ec       	ldi	r24, 0xC8	; 200
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	98 a3       	std	Y+32, r25	; 0x20
    337a:	8f 8f       	std	Y+31, r24	; 0x1f
    337c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    337e:	98 a1       	ldd	r25, Y+32	; 0x20
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_voidInit+0x2da>
    3384:	98 a3       	std	Y+32, r25	; 0x20
    3386:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	89 a1       	ldd	r24, Y+33	; 0x21
    338a:	9a a1       	ldd	r25, Y+34	; 0x22
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	9a a3       	std	Y+34, r25	; 0x22
    3390:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	89 a1       	ldd	r24, Y+33	; 0x21
    3394:	9a a1       	ldd	r25, Y+34	; 0x22
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <LCD_voidInit+0x2ce>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	6b a1       	ldd	r22, Y+35	; 0x23
    339e:	7c a1       	ldd	r23, Y+36	; 0x24
    33a0:	8d a1       	ldd	r24, Y+37	; 0x25
    33a2:	9e a1       	ldd	r25, Y+38	; 0x26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9a a3       	std	Y+34, r25	; 0x22
    33ae:	89 a3       	std	Y+33, r24	; 0x21
    33b0:	89 a1       	ldd	r24, Y+33	; 0x21
    33b2:	9a a1       	ldd	r25, Y+34	; 0x22
    33b4:	9e 8f       	std	Y+30, r25	; 0x1e
    33b6:	8d 8f       	std	Y+29, r24	; 0x1d
    33b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <LCD_voidInit+0x316>
    33c0:	9e 8f       	std	Y+30, r25	; 0x1e
    33c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*display*/
	LCD_voidSendCommand(0b00001100);
    33c4:	8c e0       	ldi	r24, 0x0C	; 12
    33c6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 e0       	ldi	r26, 0x00	; 0
    33d0:	b0 e4       	ldi	r27, 0x40	; 64
    33d2:	89 8f       	std	Y+25, r24	; 0x19
    33d4:	9a 8f       	std	Y+26, r25	; 0x1a
    33d6:	ab 8f       	std	Y+27, r26	; 0x1b
    33d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	69 8d       	ldd	r22, Y+25	; 0x19
    33dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a ef       	ldi	r20, 0xFA	; 250
    33e8:	54 e4       	ldi	r21, 0x44	; 68
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	8d 8b       	std	Y+21, r24	; 0x15
    33f4:	9e 8b       	std	Y+22, r25	; 0x16
    33f6:	af 8b       	std	Y+23, r26	; 0x17
    33f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33fa:	6d 89       	ldd	r22, Y+21	; 0x15
    33fc:	7e 89       	ldd	r23, Y+22	; 0x16
    33fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3400:	98 8d       	ldd	r25, Y+24	; 0x18
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <LCD_voidInit+0x376>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9c 8b       	std	Y+20, r25	; 0x14
    3418:	8b 8b       	std	Y+19, r24	; 0x13
    341a:	3f c0       	rjmp	.+126    	; 0x349a <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    341c:	6d 89       	ldd	r22, Y+21	; 0x15
    341e:	7e 89       	ldd	r23, Y+22	; 0x16
    3420:	8f 89       	ldd	r24, Y+23	; 0x17
    3422:	98 8d       	ldd	r25, Y+24	; 0x18
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	69 8d       	ldd	r22, Y+25	; 0x19
    3436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9c 8b       	std	Y+20, r25	; 0x14
    345a:	8b 8b       	std	Y+19, r24	; 0x13
    345c:	0f c0       	rjmp	.+30     	; 0x347c <LCD_voidInit+0x3d6>
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9a 8b       	std	Y+18, r25	; 0x12
    3464:	89 8b       	std	Y+17, r24	; 0x11
    3466:	89 89       	ldd	r24, Y+17	; 0x11
    3468:	9a 89       	ldd	r25, Y+18	; 0x12
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_voidInit+0x3c4>
    346e:	9a 8b       	std	Y+18, r25	; 0x12
    3470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9c 8b       	std	Y+20, r25	; 0x14
    347a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8b 89       	ldd	r24, Y+19	; 0x13
    347e:	9c 89       	ldd	r25, Y+20	; 0x14
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <LCD_voidInit+0x3b8>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	6d 89       	ldd	r22, Y+21	; 0x15
    3488:	7e 89       	ldd	r23, Y+22	; 0x16
    348a:	8f 89       	ldd	r24, Y+23	; 0x17
    348c:	98 8d       	ldd	r25, Y+24	; 0x18
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9c 8b       	std	Y+20, r25	; 0x14
    3498:	8b 8b       	std	Y+19, r24	; 0x13
    349a:	8b 89       	ldd	r24, Y+19	; 0x13
    349c:	9c 89       	ldd	r25, Y+20	; 0x14
    349e:	98 8b       	std	Y+16, r25	; 0x10
    34a0:	8f 87       	std	Y+15, r24	; 0x0f
    34a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a4:	98 89       	ldd	r25, Y+16	; 0x10
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <LCD_voidInit+0x400>
    34aa:	98 8b       	std	Y+16, r25	; 0x10
    34ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*entry mode*/
	LCD_voidSendCommand(0b00000110);
    34ae:	86 e0       	ldi	r24, 0x06	; 6
    34b0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	a0 e0       	ldi	r26, 0x00	; 0
    34ba:	b0 e4       	ldi	r27, 0x40	; 64
    34bc:	8b 87       	std	Y+11, r24	; 0x0b
    34be:	9c 87       	std	Y+12, r25	; 0x0c
    34c0:	ad 87       	std	Y+13, r26	; 0x0d
    34c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a ef       	ldi	r20, 0xFA	; 250
    34d2:	54 e4       	ldi	r21, 0x44	; 68
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	8f 83       	std	Y+7, r24	; 0x07
    34de:	98 87       	std	Y+8, r25	; 0x08
    34e0:	a9 87       	std	Y+9, r26	; 0x09
    34e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e4:	6f 81       	ldd	r22, Y+7	; 0x07
    34e6:	78 85       	ldd	r23, Y+8	; 0x08
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e8       	ldi	r20, 0x80	; 128
    34f2:	5f e3       	ldi	r21, 0x3F	; 63
    34f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f8:	88 23       	and	r24, r24
    34fa:	2c f4       	brge	.+10     	; 0x3506 <LCD_voidInit+0x460>
		__ticks = 1;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	3f c0       	rjmp	.+126    	; 0x3584 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    3506:	6f 81       	ldd	r22, Y+7	; 0x07
    3508:	78 85       	ldd	r23, Y+8	; 0x08
    350a:	89 85       	ldd	r24, Y+9	; 0x09
    350c:	9a 85       	ldd	r25, Y+10	; 0x0a
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	57 e4       	ldi	r21, 0x47	; 71
    3516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351a:	18 16       	cp	r1, r24
    351c:	4c f5       	brge	.+82     	; 0x3570 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3520:	7c 85       	ldd	r23, Y+12	; 0x0c
    3522:	8d 85       	ldd	r24, Y+13	; 0x0d
    3524:	9e 85       	ldd	r25, Y+14	; 0x0e
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e2       	ldi	r20, 0x20	; 32
    352c:	51 e4       	ldi	r21, 0x41	; 65
    352e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9e 83       	std	Y+6, r25	; 0x06
    3544:	8d 83       	std	Y+5, r24	; 0x05
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <LCD_voidInit+0x4c0>
    3548:	88 ec       	ldi	r24, 0xC8	; 200
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	8b 83       	std	Y+3, r24	; 0x03
    3550:	8b 81       	ldd	r24, Y+3	; 0x03
    3552:	9c 81       	ldd	r25, Y+4	; 0x04
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <LCD_voidInit+0x4ae>
    3558:	9c 83       	std	Y+4, r25	; 0x04
    355a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	69 f7       	brne	.-38     	; 0x3548 <LCD_voidInit+0x4a2>
    356e:	14 c0       	rjmp	.+40     	; 0x3598 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3570:	6f 81       	ldd	r22, Y+7	; 0x07
    3572:	78 85       	ldd	r23, Y+8	; 0x08
    3574:	89 85       	ldd	r24, Y+9	; 0x09
    3576:	9a 85       	ldd	r25, Y+10	; 0x0a
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <LCD_voidInit+0x4ea>
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3598:	ca 5b       	subi	r28, 0xBA	; 186
    359a:	df 4f       	sbci	r29, 0xFF	; 255
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	cf 91       	pop	r28
    35a8:	df 91       	pop	r29
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	08 95       	ret

000035b0 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	2f 97       	sbiw	r28, 0x0f	; 15
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 0 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , LOW);
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	64 e0       	ldi	r22, 0x04	; 4
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	65 e0       	ldi	r22, 0x05	; 5
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Command) ;
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    35de:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	66 e0       	ldi	r22, 0x06	; 6
    35e6:	41 e0       	ldi	r20, 0x01	; 1
    35e8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e4       	ldi	r27, 0x40	; 64
    35f4:	8b 87       	std	Y+11, r24	; 0x0b
    35f6:	9c 87       	std	Y+12, r25	; 0x0c
    35f8:	ad 87       	std	Y+13, r26	; 0x0d
    35fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3600:	8d 85       	ldd	r24, Y+13	; 0x0d
    3602:	9e 85       	ldd	r25, Y+14	; 0x0e
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a ef       	ldi	r20, 0xFA	; 250
    360a:	54 e4       	ldi	r21, 0x44	; 68
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	8f 83       	std	Y+7, r24	; 0x07
    3616:	98 87       	std	Y+8, r25	; 0x08
    3618:	a9 87       	std	Y+9, r26	; 0x09
    361a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    361c:	6f 81       	ldd	r22, Y+7	; 0x07
    361e:	78 85       	ldd	r23, Y+8	; 0x08
    3620:	89 85       	ldd	r24, Y+9	; 0x09
    3622:	9a 85       	ldd	r25, Y+10	; 0x0a
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e8       	ldi	r20, 0x80	; 128
    362a:	5f e3       	ldi	r21, 0x3F	; 63
    362c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3630:	88 23       	and	r24, r24
    3632:	2c f4       	brge	.+10     	; 0x363e <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	3f c0       	rjmp	.+126    	; 0x36bc <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    363e:	6f 81       	ldd	r22, Y+7	; 0x07
    3640:	78 85       	ldd	r23, Y+8	; 0x08
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	3f ef       	ldi	r19, 0xFF	; 255
    364a:	4f e7       	ldi	r20, 0x7F	; 127
    364c:	57 e4       	ldi	r21, 0x47	; 71
    364e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3652:	18 16       	cp	r1, r24
    3654:	4c f5       	brge	.+82     	; 0x36a8 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	6b 85       	ldd	r22, Y+11	; 0x0b
    3658:	7c 85       	ldd	r23, Y+12	; 0x0c
    365a:	8d 85       	ldd	r24, Y+13	; 0x0d
    365c:	9e 85       	ldd	r25, Y+14	; 0x0e
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e2       	ldi	r20, 0x20	; 32
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	0f c0       	rjmp	.+30     	; 0x369e <LCD_voidSendCommand+0xee>
    3680:	88 ec       	ldi	r24, 0xC8	; 200
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	9c 81       	ldd	r25, Y+4	; 0x04
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <LCD_voidSendCommand+0xdc>
    3690:	9c 83       	std	Y+4, r25	; 0x04
    3692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
    36a0:	9e 81       	ldd	r25, Y+6	; 0x06
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	69 f7       	brne	.-38     	; 0x3680 <LCD_voidSendCommand+0xd0>
    36a6:	14 c0       	rjmp	.+40     	; 0x36d0 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a8:	6f 81       	ldd	r22, Y+7	; 0x07
    36aa:	78 85       	ldd	r23, Y+8	; 0x08
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_voidSendCommand+0x118>
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	66 e0       	ldi	r22, 0x06	; 6
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

}
    36da:	2f 96       	adiw	r28, 0x0f	; 15
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Data)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	2f 97       	sbiw	r28, 0x0f	; 15
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 1 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , HIGH);
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	65 e0       	ldi	r22, 0x05	; 5
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Data) ;
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	6f 85       	ldd	r22, Y+15	; 0x0f
    371a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	66 e0       	ldi	r22, 0x06	; 6
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	a0 e0       	ldi	r26, 0x00	; 0
    372e:	b0 e4       	ldi	r27, 0x40	; 64
    3730:	8b 87       	std	Y+11, r24	; 0x0b
    3732:	9c 87       	std	Y+12, r25	; 0x0c
    3734:	ad 87       	std	Y+13, r26	; 0x0d
    3736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3738:	6b 85       	ldd	r22, Y+11	; 0x0b
    373a:	7c 85       	ldd	r23, Y+12	; 0x0c
    373c:	8d 85       	ldd	r24, Y+13	; 0x0d
    373e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	4a ef       	ldi	r20, 0xFA	; 250
    3746:	54 e4       	ldi	r21, 0x44	; 68
    3748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8f 83       	std	Y+7, r24	; 0x07
    3752:	98 87       	std	Y+8, r25	; 0x08
    3754:	a9 87       	std	Y+9, r26	; 0x09
    3756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3758:	6f 81       	ldd	r22, Y+7	; 0x07
    375a:	78 85       	ldd	r23, Y+8	; 0x08
    375c:	89 85       	ldd	r24, Y+9	; 0x09
    375e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e8       	ldi	r20, 0x80	; 128
    3766:	5f e3       	ldi	r21, 0x3F	; 63
    3768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    376c:	88 23       	and	r24, r24
    376e:	2c f4       	brge	.+10     	; 0x377a <LCD_voidSendChar+0x8e>
		__ticks = 1;
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
    3778:	3f c0       	rjmp	.+126    	; 0x37f8 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    377a:	6f 81       	ldd	r22, Y+7	; 0x07
    377c:	78 85       	ldd	r23, Y+8	; 0x08
    377e:	89 85       	ldd	r24, Y+9	; 0x09
    3780:	9a 85       	ldd	r25, Y+10	; 0x0a
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	3f ef       	ldi	r19, 0xFF	; 255
    3786:	4f e7       	ldi	r20, 0x7F	; 127
    3788:	57 e4       	ldi	r21, 0x47	; 71
    378a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    378e:	18 16       	cp	r1, r24
    3790:	4c f5       	brge	.+82     	; 0x37e4 <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3792:	6b 85       	ldd	r22, Y+11	; 0x0b
    3794:	7c 85       	ldd	r23, Y+12	; 0x0c
    3796:	8d 85       	ldd	r24, Y+13	; 0x0d
    3798:	9e 85       	ldd	r25, Y+14	; 0x0e
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e2       	ldi	r20, 0x20	; 32
    37a0:	51 e4       	ldi	r21, 0x41	; 65
    37a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	bc 01       	movw	r22, r24
    37ac:	cd 01       	movw	r24, r26
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
    37ba:	0f c0       	rjmp	.+30     	; 0x37da <LCD_voidSendChar+0xee>
    37bc:	88 ec       	ldi	r24, 0xC8	; 200
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	9c 81       	ldd	r25, Y+4	; 0x04
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <LCD_voidSendChar+0xdc>
    37cc:	9c 83       	std	Y+4, r25	; 0x04
    37ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d0:	8d 81       	ldd	r24, Y+5	; 0x05
    37d2:	9e 81       	ldd	r25, Y+6	; 0x06
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37da:	8d 81       	ldd	r24, Y+5	; 0x05
    37dc:	9e 81       	ldd	r25, Y+6	; 0x06
    37de:	00 97       	sbiw	r24, 0x00	; 0
    37e0:	69 f7       	brne	.-38     	; 0x37bc <LCD_voidSendChar+0xd0>
    37e2:	14 c0       	rjmp	.+40     	; 0x380c <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e4:	6f 81       	ldd	r22, Y+7	; 0x07
    37e6:	78 85       	ldd	r23, Y+8	; 0x08
    37e8:	89 85       	ldd	r24, Y+9	; 0x09
    37ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	9e 83       	std	Y+6, r25	; 0x06
    37f6:	8d 83       	std	Y+5, r24	; 0x05
    37f8:	8d 81       	ldd	r24, Y+5	; 0x05
    37fa:	9e 81       	ldd	r25, Y+6	; 0x06
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	9a 81       	ldd	r25, Y+2	; 0x02
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_voidSendChar+0x118>
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	66 e0       	ldi	r22, 0x06	; 6
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

}
    3816:	2f 96       	adiw	r28, 0x0f	; 15
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8Arr)
{
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	00 d0       	rcall	.+0      	; 0x382e <LCD_voidSendString+0x6>
    382e:	0f 92       	push	r0
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	9b 83       	std	Y+3, r25	; 0x03
    3836:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0 ;
    3838:	19 82       	std	Y+1, r1	; 0x01
    383a:	0e c0       	rjmp	.+28     	; 0x3858 <LCD_voidSendString+0x30>
	while(Copy_u8Arr[i]!='\0')
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	9b 81       	ldd	r25, Y+3	; 0x03
    3846:	fc 01       	movw	r30, r24
    3848:	e2 0f       	add	r30, r18
    384a:	f3 1f       	adc	r31, r19
    384c:	80 81       	ld	r24, Z
    384e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
		i++;
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	8f 5f       	subi	r24, 0xFF	; 255
    3856:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8Arr)
{
	u8 i=0 ;
	while(Copy_u8Arr[i]!='\0')
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	fc 01       	movw	r30, r24
    3864:	e2 0f       	add	r30, r18
    3866:	f3 1f       	adc	r31, r19
    3868:	80 81       	ld	r24, Z
    386a:	88 23       	and	r24, r24
    386c:	39 f7       	brne	.-50     	; 0x383c <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
		i++;
	}

}
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	cf 91       	pop	r28
    3876:	df 91       	pop	r29
    3878:	08 95       	ret

0000387a <LCD_voidSendNum>:

void LCD_voidSendNum(u32 Copy_u32Num)
{
    387a:	ef 92       	push	r14
    387c:	ff 92       	push	r15
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	28 97       	sbiw	r28, 0x08	; 8
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	de bf       	out	0x3e, r29	; 62
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	6d 83       	std	Y+5, r22	; 0x05
    3898:	7e 83       	std	Y+6, r23	; 0x06
    389a:	8f 83       	std	Y+7, r24	; 0x07
    389c:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Number = 1 ;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	a0 e0       	ldi	r26, 0x00	; 0
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	ab 83       	std	Y+3, r26	; 0x03
    38ac:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Num==0)
    38ae:	8d 81       	ldd	r24, Y+5	; 0x05
    38b0:	9e 81       	ldd	r25, Y+6	; 0x06
    38b2:	af 81       	ldd	r26, Y+7	; 0x07
    38b4:	b8 85       	ldd	r27, Y+8	; 0x08
    38b6:	00 97       	sbiw	r24, 0x00	; 0
    38b8:	a1 05       	cpc	r26, r1
    38ba:	b1 05       	cpc	r27, r1
    38bc:	d1 f5       	brne	.+116    	; 0x3932 <LCD_voidSendNum+0xb8>
	{
		LCD_voidSendChar(0+'0');
    38be:	80 e3       	ldi	r24, 0x30	; 48
    38c0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
    38c4:	6b c0       	rjmp	.+214    	; 0x399c <LCD_voidSendNum+0x122>
	}
	else
	{
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	ab 81       	ldd	r26, Y+3	; 0x03
    38cc:	bc 81       	ldd	r27, Y+4	; 0x04
    38ce:	2a e0       	ldi	r18, 0x0A	; 10
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	50 e0       	ldi	r21, 0x00	; 0
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 83 2b 	call	0x5706	; 0x5706 <__mulsi3>
    38de:	7b 01       	movw	r14, r22
    38e0:	8c 01       	movw	r16, r24
    38e2:	8d 81       	ldd	r24, Y+5	; 0x05
    38e4:	9e 81       	ldd	r25, Y+6	; 0x06
    38e6:	af 81       	ldd	r26, Y+7	; 0x07
    38e8:	b8 85       	ldd	r27, Y+8	; 0x08
    38ea:	2a e0       	ldi	r18, 0x0A	; 10
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8e 0d       	add	r24, r14
    3900:	9f 1d       	adc	r25, r15
    3902:	a0 1f       	adc	r26, r16
    3904:	b1 1f       	adc	r27, r17
    3906:	89 83       	std	Y+1, r24	; 0x01
    3908:	9a 83       	std	Y+2, r25	; 0x02
    390a:	ab 83       	std	Y+3, r26	; 0x03
    390c:	bc 83       	std	Y+4, r27	; 0x04
			Copy_u32Num /= 10 ;
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	af 81       	ldd	r26, Y+7	; 0x07
    3914:	b8 85       	ldd	r27, Y+8	; 0x08
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
    3926:	da 01       	movw	r26, r20
    3928:	c9 01       	movw	r24, r18
    392a:	8d 83       	std	Y+5, r24	; 0x05
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	af 83       	std	Y+7, r26	; 0x07
    3930:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_voidSendChar(0+'0');
	}
	else
	{
		while(Copy_u32Num!=0)
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	af 81       	ldd	r26, Y+7	; 0x07
    3938:	b8 85       	ldd	r27, Y+8	; 0x08
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	a1 05       	cpc	r26, r1
    393e:	b1 05       	cpc	r27, r1
    3940:	11 f6       	brne	.-124    	; 0x38c6 <LCD_voidSendNum+0x4c>
    3942:	23 c0       	rjmp	.+70     	; 0x398a <LCD_voidSendNum+0x110>
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	ab 81       	ldd	r26, Y+3	; 0x03
    394a:	bc 81       	ldd	r27, Y+4	; 0x04
    394c:	2a e0       	ldi	r18, 0x0A	; 10
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	80 5d       	subi	r24, 0xD0	; 208
    3962:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
			Local_u32Number = Local_u32Number / 10 ;
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	9a 81       	ldd	r25, Y+2	; 0x02
    396a:	ab 81       	ldd	r26, Y+3	; 0x03
    396c:	bc 81       	ldd	r27, Y+4	; 0x04
    396e:	2a e0       	ldi	r18, 0x0A	; 10
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	bc 01       	movw	r22, r24
    3978:	cd 01       	movw	r24, r26
    397a:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
    397e:	da 01       	movw	r26, r20
    3980:	c9 01       	movw	r24, r18
    3982:	89 83       	std	Y+1, r24	; 0x01
    3984:	9a 83       	std	Y+2, r25	; 0x02
    3986:	ab 83       	std	Y+3, r26	; 0x03
    3988:	bc 83       	std	Y+4, r27	; 0x04
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	ab 81       	ldd	r26, Y+3	; 0x03
    3990:	bc 81       	ldd	r27, Y+4	; 0x04
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	91 05       	cpc	r25, r1
    3996:	a1 05       	cpc	r26, r1
    3998:	b1 05       	cpc	r27, r1
    399a:	a1 f6       	brne	.-88     	; 0x3944 <LCD_voidSendNum+0xca>
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
			Local_u32Number = Local_u32Number / 10 ;
		}
	}
}
    399c:	28 96       	adiw	r28, 0x08	; 8
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	f8 94       	cli
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	08 95       	ret

000039b6 <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8Line , u8 Copy_u8Position)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <LCD_voidGoToXY+0x6>
    39bc:	00 d0       	rcall	.+0      	; 0x39be <LCD_voidGoToXY+0x8>
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Line)
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	28 2f       	mov	r18, r24
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	3c 83       	std	Y+4, r19	; 0x04
    39ce:	2b 83       	std	Y+3, r18	; 0x03
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	9c 81       	ldd	r25, Y+4	; 0x04
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	31 f0       	breq	.+12     	; 0x39e4 <LCD_voidGoToXY+0x2e>
    39d8:	2b 81       	ldd	r18, Y+3	; 0x03
    39da:	3c 81       	ldd	r19, Y+4	; 0x04
    39dc:	21 30       	cpi	r18, 0x01	; 1
    39de:	31 05       	cpc	r19, r1
    39e0:	31 f0       	breq	.+12     	; 0x39ee <LCD_voidGoToXY+0x38>
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <LCD_voidGoToXY+0x40>
	{
		case 0 : LCD_voidSendCommand(0x80+Copy_u8Position); break ;
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	80 58       	subi	r24, 0x80	; 128
    39e8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <LCD_voidGoToXY+0x40>
		case 1 : LCD_voidSendCommand(0xC0+Copy_u8Position); break ;
    39ee:	8a 81       	ldd	r24, Y+2	; 0x02
    39f0:	80 54       	subi	r24, 0x40	; 64
    39f2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
		default: break;
	}
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <LCD_voidCLR>:
void LCD_voidCLR(void)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
	/*clear the LCD*/
	LCD_voidSendCommand(0b00000001);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
}
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	08 95       	ret

00003a18 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber ,u8 Copy_u8xPos , u8 Copy_u8YPos )
{
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	27 97       	sbiw	r28, 0x07	; 7
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	9c 83       	std	Y+4, r25	; 0x04
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
    3a30:	6d 83       	std	Y+5, r22	; 0x05
    3a32:	4e 83       	std	Y+6, r20	; 0x06
    3a34:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 , Local_u8Iterator ;
    3a36:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    3a38:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	88 0f       	add	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	8a 83       	std	Y+2, r24	; 0x02

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	80 5c       	subi	r24, 0xC0	; 192
    3a50:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3a54:	19 82       	std	Y+1, r1	; 0x01
    3a56:	0e c0       	rjmp	.+28     	; 0x3a74 <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	9c 81       	ldd	r25, Y+4	; 0x04
    3a62:	fc 01       	movw	r30, r24
    3a64:	e2 0f       	add	r30, r18
    3a66:	f3 1f       	adc	r31, r19
    3a68:	80 81       	ld	r24, Z
    3a6a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	8f 5f       	subi	r24, 0xFF	; 255
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	88 30       	cpi	r24, 0x08	; 8
    3a78:	78 f3       	brcs	.-34     	; 0x3a58 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
	}

	/*Go bach to the DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8xPos , Copy_u8YPos) ;
    3a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_voidGoToXY>

	/*Display the pattern writen in CGRAm*/
	LCD_voidSendChar(Copy_u8PatternNumber) ;
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>

}
    3a88:	27 96       	adiw	r28, 0x07	; 7
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <KPD_voidInit>:
#include"KPD_interface.h"



void KPD_voidInit(void)
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
	/*rows input*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_R1 , INPUT);
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	60 e0       	ldi	r22, 0x00	; 0
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R2 , INPUT);
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R3 , INPUT);
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	62 e0       	ldi	r22, 0x02	; 2
    3aba:	40 e0       	ldi	r20, 0x00	; 0
    3abc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R4 , INPUT);
    3ac0:	82 e0       	ldi	r24, 0x02	; 2
    3ac2:	63 e0       	ldi	r22, 0x03	; 3
    3ac4:	40 e0       	ldi	r20, 0x00	; 0
    3ac6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>


	/*columns pins*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_C1 , OUTPUT);
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	64 e0       	ldi	r22, 0x04	; 4
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C2 , OUTPUT);
    3ad4:	82 e0       	ldi	r24, 0x02	; 2
    3ad6:	65 e0       	ldi	r22, 0x05	; 5
    3ad8:	41 e0       	ldi	r20, 0x01	; 1
    3ada:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C3 , OUTPUT);
    3ade:	82 e0       	ldi	r24, 0x02	; 2
    3ae0:	66 e0       	ldi	r22, 0x06	; 6
    3ae2:	41 e0       	ldi	r20, 0x01	; 1
    3ae4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C4 , OUTPUT);
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	67 e0       	ldi	r22, 0x07	; 7
    3aec:	41 e0       	ldi	r20, 0x01	; 1
    3aee:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>


	/*columns deactive , rows pullup */
	DIO_voidSetPortvalue(KPD_PORT , DIO_u8PORT_HIGH);
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	6f ef       	ldi	r22, 0xFF	; 255
    3af6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPortvalue>

}
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	6b 97       	sbiw	r28, 0x1b	; 27
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator1 , Local_u8Iterator2 ;
	u8 Local_Au8ColsArr[4]={KPD_C1,KPD_C2,KPD_C3,KPD_C4};
    3b14:	84 e0       	ldi	r24, 0x04	; 4
    3b16:	8c 8b       	std	Y+20, r24	; 0x14
    3b18:	85 e0       	ldi	r24, 0x05	; 5
    3b1a:	8d 8b       	std	Y+21, r24	; 0x15
    3b1c:	86 e0       	ldi	r24, 0x06	; 6
    3b1e:	8e 8b       	std	Y+22, r24	; 0x16
    3b20:	87 e0       	ldi	r24, 0x07	; 7
    3b22:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
    3b24:	18 8e       	std	Y+24, r1	; 0x18
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	89 8f       	std	Y+25, r24	; 0x19
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	8a 8f       	std	Y+26, r24	; 0x1a
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
    3b32:	8f ef       	ldi	r24, 0xFF	; 255
    3b34:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag =0 ;
    3b36:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    3b38:	1b 8a       	std	Y+19, r1	; 0x13
    3b3a:	e3 c0       	rjmp	.+454    	; 0x3d02 <KPD_u8GetPressedKey+0x202>
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);
    3b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	ce 01       	movw	r24, r28
    3b44:	44 96       	adiw	r24, 0x14	; 20
    3b46:	fc 01       	movw	r30, r24
    3b48:	e2 0f       	add	r30, r18
    3b4a:	f3 1f       	adc	r31, r19
    3b4c:	90 81       	ld	r25, Z
    3b4e:	82 e0       	ldi	r24, 0x02	; 2
    3b50:	69 2f       	mov	r22, r25
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    3b58:	1a 8a       	std	Y+18, r1	; 0x12
    3b5a:	bb c0       	rjmp	.+374    	; 0x3cd2 <KPD_u8GetPressedKey+0x1d2>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 ea       	ldi	r26, 0xA0	; 160
    3b62:	b0 e4       	ldi	r27, 0x40	; 64
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	ad 87       	std	Y+13, r26	; 0x0d
    3b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a ef       	ldi	r20, 0xFA	; 250
    3b7a:	54 e4       	ldi	r21, 0x44	; 68
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	8f 83       	std	Y+7, r24	; 0x07
    3b86:	98 87       	std	Y+8, r25	; 0x08
    3b88:	a9 87       	std	Y+9, r26	; 0x09
    3b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e8       	ldi	r20, 0x80	; 128
    3b9a:	5f e3       	ldi	r21, 0x3F	; 63
    3b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	2c f4       	brge	.+10     	; 0x3bae <KPD_u8GetPressedKey+0xae>
		__ticks = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <KPD_u8GetPressedKey+0x12c>
	else if (__tmp > 65535)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	4c f5       	brge	.+82     	; 0x3c18 <KPD_u8GetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e2       	ldi	r20, 0x20	; 32
    3bd4:	51 e4       	ldi	r21, 0x41	; 65
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <KPD_u8GetPressedKey+0x10e>
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <KPD_u8GetPressedKey+0xfc>
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <KPD_u8GetPressedKey+0xf0>
    3c16:	14 c0       	rjmp	.+40     	; 0x3c40 <KPD_u8GetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <KPD_u8GetPressedKey+0x138>
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
		{
			//debouncing
			_delay_ms(5);

			Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3c40:	8a 89       	ldd	r24, Y+18	; 0x12
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	ce 01       	movw	r24, r28
    3c48:	48 96       	adiw	r24, 0x18	; 24
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	e2 0f       	add	r30, r18
    3c4e:	f3 1f       	adc	r31, r19
    3c50:	90 81       	ld	r25, Z
    3c52:	82 e0       	ldi	r24, 0x02	; 2
    3c54:	69 2f       	mov	r22, r25
    3c56:	0e 94 75 0c 	call	0x18ea	; 0x18ea <DIO_u8GetPinvalue>
    3c5a:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
    3c5c:	89 89       	ldd	r24, Y+17	; 0x11
    3c5e:	88 23       	and	r24, r24
    3c60:	a9 f5       	brne	.+106    	; 0x3ccc <KPD_u8GetPressedKey+0x1cc>
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3c62:	8a 89       	ldd	r24, Y+18	; 0x12
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	ce 01       	movw	r24, r28
    3c6a:	48 96       	adiw	r24, 0x18	; 24
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	e2 0f       	add	r30, r18
    3c70:	f3 1f       	adc	r31, r19
    3c72:	90 81       	ld	r25, Z
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	69 2f       	mov	r22, r25
    3c78:	0e 94 75 0c 	call	0x18ea	; 0x18ea <DIO_u8GetPinvalue>
    3c7c:	89 8b       	std	Y+17, r24	; 0x11
    3c7e:	0e c0       	rjmp	.+28     	; 0x3c9c <KPD_u8GetPressedKey+0x19c>

				while(Local_PinValue==0)
				{
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    3c80:	8a 89       	ldd	r24, Y+18	; 0x12
    3c82:	28 2f       	mov	r18, r24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	ce 01       	movw	r24, r28
    3c88:	48 96       	adiw	r24, 0x18	; 24
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	e2 0f       	add	r30, r18
    3c8e:	f3 1f       	adc	r31, r19
    3c90:	90 81       	ld	r25, Z
    3c92:	82 e0       	ldi	r24, 0x02	; 2
    3c94:	69 2f       	mov	r22, r25
    3c96:	0e 94 75 0c 	call	0x18ea	; 0x18ea <DIO_u8GetPinvalue>
    3c9a:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);

				while(Local_PinValue==0)
    3c9c:	89 89       	ldd	r24, Y+17	; 0x11
    3c9e:	88 23       	and	r24, r24
    3ca0:	79 f3       	breq	.-34     	; 0x3c80 <KPD_u8GetPressedKey+0x180>
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
				}
				//Safety debouncing


				Local_PressedKey = KeyPadArr[Local_u8Iterator2][Local_u8Iterator1];
    3ca2:	8a 89       	ldd	r24, Y+18	; 0x12
    3ca4:	48 2f       	mov	r20, r24
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    3caa:	28 2f       	mov	r18, r24
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	ca 01       	movw	r24, r20
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	88 0f       	add	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	82 0f       	add	r24, r18
    3cba:	93 1f       	adc	r25, r19
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	e5 5f       	subi	r30, 0xF5	; 245
    3cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc2:	80 81       	ld	r24, Z
    3cc4:	88 8b       	std	Y+16, r24	; 0x10
				Local_u8Flag = 1 ;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	8f 87       	std	Y+15, r24	; 0x0f
    3cca:	07 c0       	rjmp	.+14     	; 0x3cda <KPD_u8GetPressedKey+0x1da>
	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    3ccc:	8a 89       	ldd	r24, Y+18	; 0x12
    3cce:	8f 5f       	subi	r24, 0xFF	; 255
    3cd0:	8a 8b       	std	Y+18, r24	; 0x12
    3cd2:	8a 89       	ldd	r24, Y+18	; 0x12
    3cd4:	84 30       	cpi	r24, 0x04	; 4
    3cd6:	08 f4       	brcc	.+2      	; 0x3cda <KPD_u8GetPressedKey+0x1da>
    3cd8:	41 cf       	rjmp	.-382    	; 0x3b5c <KPD_u8GetPressedKey+0x5c>
				break ;
			}

		}
		//deactivate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , HIGH);
    3cda:	8b 89       	ldd	r24, Y+19	; 0x13
    3cdc:	28 2f       	mov	r18, r24
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	44 96       	adiw	r24, 0x14	; 20
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 0f       	add	r30, r18
    3ce8:	f3 1f       	adc	r31, r19
    3cea:	90 81       	ld	r25, Z
    3cec:	82 e0       	ldi	r24, 0x02	; 2
    3cee:	69 2f       	mov	r22, r25
    3cf0:	41 e0       	ldi	r20, 0x01	; 1
    3cf2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
		if(Local_u8Flag==1)
    3cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	39 f0       	breq	.+14     	; 0x3d0a <KPD_u8GetPressedKey+0x20a>
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
	u8 Local_u8Flag =0 ;

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    3cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfe:	8f 5f       	subi	r24, 0xFF	; 255
    3d00:	8b 8b       	std	Y+19, r24	; 0x13
    3d02:	8b 89       	ldd	r24, Y+19	; 0x13
    3d04:	84 30       	cpi	r24, 0x04	; 4
    3d06:	08 f4       	brcc	.+2      	; 0x3d0a <KPD_u8GetPressedKey+0x20a>
    3d08:	19 cf       	rjmp	.-462    	; 0x3b3c <KPD_u8GetPressedKey+0x3c>
		if(Local_u8Flag==1)
		{
			break ;
		}
	}
	return Local_PressedKey ;
    3d0a:	88 89       	ldd	r24, Y+16	; 0x10
}
    3d0c:	6b 96       	adiw	r28, 0x1b	; 27
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <main>:


void Emergeny(void);

int main()
{
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	df 93       	push	r29
    3d24:	cf 93       	push	r28
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	c7 5f       	subi	r28, 0xF7	; 247
    3d2c:	d0 40       	sbci	r29, 0x00	; 0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
	u8 Recieved ;
	u32 Read1 ;
	u16 Password = 1001 ;
    3d38:	fe 01       	movw	r30, r28
    3d3a:	ef 50       	subi	r30, 0x0F	; 15
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	89 ee       	ldi	r24, 0xE9	; 233
    3d40:	93 e0       	ldi	r25, 0x03	; 3
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
	u16 User_Pass , Try_Again=0 ;
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 51       	subi	r30, 0x13	; 19
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	11 82       	std	Z+1, r1	; 0x01
    3d4e:	10 82       	st	Z, r1
	u8 pass1 , pass2 , pass3 , pass4 ;
	STP_voidInit();
    3d50:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <STP_voidInit>
	KPD_voidInit();
    3d54:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <KPD_voidInit>
	LCD_voidInit();
    3d58:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LCD_voidInit>
	//buzzer
	DIO_voidSetPinDirection(PORTD , PIN3 , OUTPUT);
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	63 e0       	ldi	r22, 0x03	; 3
    3d60:	41 e0       	ldi	r20, 0x01	; 1
    3d62:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(PORTD , PIN3 , LOW);
    3d66:	83 e0       	ldi	r24, 0x03	; 3
    3d68:	63 e0       	ldi	r22, 0x03	; 3
    3d6a:	40 e0       	ldi	r20, 0x00	; 0
    3d6c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
	//uart
	DIO_voidSetPinDirection(PORTD , PIN0 , INPUT);
    3d70:	83 e0       	ldi	r24, 0x03	; 3
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	40 e0       	ldi	r20, 0x00	; 0
    3d76:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD , PIN1 , OUTPUT);
    3d7a:	83 e0       	ldi	r24, 0x03	; 3
    3d7c:	61 e0       	ldi	r22, 0x01	; 1
    3d7e:	41 e0       	ldi	r20, 0x01	; 1
    3d80:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	UART_voidInit();
    3d84:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>

	//light sensor
	ADC_voidInit();
    3d88:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ADC_voidInit>
	LED_voidInitOneLed(PORTA , PIN0 ) ;
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <LED_voidInitOneLed>

	//tempsensor
	DIO_voidSetPinDirection(PORTA , PIN7 , OUTPUT);
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	67 e0       	ldi	r22, 0x07	; 7
    3d9c:	41 e0       	ldi	r20, 0x01	; 1
    3d9e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	u32 Read2 ;
	u32 Temp ;

	//interrupt
	DIO_voidSetPinDirection(PORTD , PIN2 , INPUT) ;
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	62 e0       	ldi	r22, 0x02	; 2
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(PORTD , PIN2 , HIGH);
    3dac:	83 e0       	ldi	r24, 0x03	; 3
    3dae:	62 e0       	ldi	r22, 0x02	; 2
    3db0:	41 e0       	ldi	r20, 0x01	; 1
    3db2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>

            ///// GLOBAL interrupt *~*  *-*  *_* -_- .-.


	EXTI_voidEnable(INT0 , FALLING_EDGE);
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_voidEnable>

	EXTI_voidSetCallBack_INT0(&Emergeny);
    3dbe:	86 ef       	ldi	r24, 0xF6	; 246
    3dc0:	9a e2       	ldi	r25, 0x2A	; 42
    3dc2:	0e 94 86 09 	call	0x130c	; 0x130c <EXTI_voidSetCallBack_INT0>

	jump :
	Try_Again++;
    3dc6:	de 01       	movw	r26, r28
    3dc8:	a3 51       	subi	r26, 0x13	; 19
    3dca:	bf 4f       	sbci	r27, 0xFF	; 255
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e3 51       	subi	r30, 0x13	; 19
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	01 96       	adiw	r24, 0x01	; 1
    3dd8:	11 96       	adiw	r26, 0x01	; 1
    3dda:	9c 93       	st	X, r25
    3ddc:	8e 93       	st	-X, r24
	if(Try_Again==1)
    3dde:	fe 01       	movw	r30, r28
    3de0:	e3 51       	subi	r30, 0x13	; 19
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 81       	ld	r24, Z
    3de6:	91 81       	ldd	r25, Z+1	; 0x01
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	91 05       	cpc	r25, r1
    3dec:	19 f4       	brne	.+6      	; 0x3df4 <main+0xd6>
	{
		UART_voidSendData('a');
    3dee:	81 e6       	ldi	r24, 0x61	; 97
    3df0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
	}
	if(Try_Again==2)
    3df4:	fe 01       	movw	r30, r28
    3df6:	e3 51       	subi	r30, 0x13	; 19
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	91 81       	ldd	r25, Z+1	; 0x01
    3dfe:	82 30       	cpi	r24, 0x02	; 2
    3e00:	91 05       	cpc	r25, r1
    3e02:	19 f4       	brne	.+6      	; 0x3e0a <main+0xec>
	{
		UART_voidSendData('b');
    3e04:	82 e6       	ldi	r24, 0x62	; 98
    3e06:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
	}
	if(Try_Again==3)
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e3 51       	subi	r30, 0x13	; 19
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	80 81       	ld	r24, Z
    3e12:	91 81       	ldd	r25, Z+1	; 0x01
    3e14:	83 30       	cpi	r24, 0x03	; 3
    3e16:	91 05       	cpc	r25, r1
    3e18:	19 f4       	brne	.+6      	; 0x3e20 <main+0x102>
	{
		UART_voidSendData('c');
    3e1a:	83 e6       	ldi	r24, 0x63	; 99
    3e1c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
	}


	while(1)
	{
		LCD_voidCLR();
    3e20:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
		LCD_voidSendString("Welcome");
    3e24:	80 e6       	ldi	r24, 0x60	; 96
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e3 52       	subi	r30, 0x23	; 35
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	aa e7       	ldi	r26, 0x7A	; 122
    3e38:	b4 e4       	ldi	r27, 0x44	; 68
    3e3a:	80 83       	st	Z, r24
    3e3c:	91 83       	std	Z+1, r25	; 0x01
    3e3e:	a2 83       	std	Z+2, r26	; 0x02
    3e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e42:	8e 01       	movw	r16, r28
    3e44:	07 52       	subi	r16, 0x27	; 39
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e3 52       	subi	r30, 0x23	; 35
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	60 81       	ld	r22, Z
    3e50:	71 81       	ldd	r23, Z+1	; 0x01
    3e52:	82 81       	ldd	r24, Z+2	; 0x02
    3e54:	93 81       	ldd	r25, Z+3	; 0x03
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	4a ef       	ldi	r20, 0xFA	; 250
    3e5c:	54 e4       	ldi	r21, 0x44	; 68
    3e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	f8 01       	movw	r30, r16
    3e68:	80 83       	st	Z, r24
    3e6a:	91 83       	std	Z+1, r25	; 0x01
    3e6c:	a2 83       	std	Z+2, r26	; 0x02
    3e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e70:	fe 01       	movw	r30, r28
    3e72:	e7 52       	subi	r30, 0x27	; 39
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	60 81       	ld	r22, Z
    3e78:	71 81       	ldd	r23, Z+1	; 0x01
    3e7a:	82 81       	ldd	r24, Z+2	; 0x02
    3e7c:	93 81       	ldd	r25, Z+3	; 0x03
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	5f e3       	ldi	r21, 0x3F	; 63
    3e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e8a:	88 23       	and	r24, r24
    3e8c:	44 f4       	brge	.+16     	; 0x3e9e <main+0x180>
		__ticks = 1;
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e9 52       	subi	r30, 0x29	; 41
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	91 83       	std	Z+1, r25	; 0x01
    3e9a:	80 83       	st	Z, r24
    3e9c:	64 c0       	rjmp	.+200    	; 0x3f66 <main+0x248>
	else if (__tmp > 65535)
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e7 52       	subi	r30, 0x27	; 39
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	60 81       	ld	r22, Z
    3ea6:	71 81       	ldd	r23, Z+1	; 0x01
    3ea8:	82 81       	ldd	r24, Z+2	; 0x02
    3eaa:	93 81       	ldd	r25, Z+3	; 0x03
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	3f ef       	ldi	r19, 0xFF	; 255
    3eb0:	4f e7       	ldi	r20, 0x7F	; 127
    3eb2:	57 e4       	ldi	r21, 0x47	; 71
    3eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eb8:	18 16       	cp	r1, r24
    3eba:	0c f0       	brlt	.+2      	; 0x3ebe <main+0x1a0>
    3ebc:	43 c0       	rjmp	.+134    	; 0x3f44 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e3 52       	subi	r30, 0x23	; 35
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 e2       	ldi	r20, 0x20	; 32
    3ed2:	51 e4       	ldi	r21, 0x41	; 65
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8e 01       	movw	r16, r28
    3ede:	09 52       	subi	r16, 0x29	; 41
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	cd 01       	movw	r24, r26
    3ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	f8 01       	movw	r30, r16
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	80 83       	st	Z, r24
    3ef4:	1f c0       	rjmp	.+62     	; 0x3f34 <main+0x216>
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	eb 52       	subi	r30, 0x2B	; 43
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	88 ec       	ldi	r24, 0xC8	; 200
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	91 83       	std	Z+1, r25	; 0x01
    3f02:	80 83       	st	Z, r24
    3f04:	fe 01       	movw	r30, r28
    3f06:	eb 52       	subi	r30, 0x2B	; 43
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	f1 f7       	brne	.-4      	; 0x3f0e <main+0x1f0>
    3f12:	fe 01       	movw	r30, r28
    3f14:	eb 52       	subi	r30, 0x2B	; 43
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1c:	de 01       	movw	r26, r28
    3f1e:	a9 52       	subi	r26, 0x29	; 41
    3f20:	bf 4f       	sbci	r27, 0xFF	; 255
    3f22:	fe 01       	movw	r30, r28
    3f24:	e9 52       	subi	r30, 0x29	; 41
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	80 81       	ld	r24, Z
    3f2a:	91 81       	ldd	r25, Z+1	; 0x01
    3f2c:	01 97       	sbiw	r24, 0x01	; 1
    3f2e:	11 96       	adiw	r26, 0x01	; 1
    3f30:	9c 93       	st	X, r25
    3f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f34:	fe 01       	movw	r30, r28
    3f36:	e9 52       	subi	r30, 0x29	; 41
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	80 81       	ld	r24, Z
    3f3c:	91 81       	ldd	r25, Z+1	; 0x01
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	d1 f6       	brne	.-76     	; 0x3ef6 <main+0x1d8>
    3f42:	27 c0       	rjmp	.+78     	; 0x3f92 <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f44:	8e 01       	movw	r16, r28
    3f46:	09 52       	subi	r16, 0x29	; 41
    3f48:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e7 52       	subi	r30, 0x27	; 39
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	f8 01       	movw	r30, r16
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	80 83       	st	Z, r24
    3f66:	de 01       	movw	r26, r28
    3f68:	ad 52       	subi	r26, 0x2D	; 45
    3f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e9 52       	subi	r30, 0x29	; 41
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	8d 93       	st	X+, r24
    3f78:	9c 93       	st	X, r25
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	ed 52       	subi	r30, 0x2D	; 45
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <main+0x266>
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ed 52       	subi	r30, 0x2D	; 45
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_voidCLR();
    3f92:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
		LCD_voidSendString("Enter password");
    3f96:	88 e6       	ldi	r24, 0x68	; 104
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e1 53       	subi	r30, 0x31	; 49
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	aa e7       	ldi	r26, 0x7A	; 122
    3faa:	b4 e4       	ldi	r27, 0x44	; 68
    3fac:	80 83       	st	Z, r24
    3fae:	91 83       	std	Z+1, r25	; 0x01
    3fb0:	a2 83       	std	Z+2, r26	; 0x02
    3fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb4:	8e 01       	movw	r16, r28
    3fb6:	05 53       	subi	r16, 0x35	; 53
    3fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e1 53       	subi	r30, 0x31	; 49
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	60 81       	ld	r22, Z
    3fc2:	71 81       	ldd	r23, Z+1	; 0x01
    3fc4:	82 81       	ldd	r24, Z+2	; 0x02
    3fc6:	93 81       	ldd	r25, Z+3	; 0x03
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	4a ef       	ldi	r20, 0xFA	; 250
    3fce:	54 e4       	ldi	r21, 0x44	; 68
    3fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	f8 01       	movw	r30, r16
    3fda:	80 83       	st	Z, r24
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	a2 83       	std	Z+2, r26	; 0x02
    3fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e5 53       	subi	r30, 0x35	; 53
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	60 81       	ld	r22, Z
    3fea:	71 81       	ldd	r23, Z+1	; 0x01
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e8       	ldi	r20, 0x80	; 128
    3ff6:	5f e3       	ldi	r21, 0x3F	; 63
    3ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	44 f4       	brge	.+16     	; 0x4010 <main+0x2f2>
		__ticks = 1;
    4000:	fe 01       	movw	r30, r28
    4002:	e7 53       	subi	r30, 0x37	; 55
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	80 83       	st	Z, r24
    400e:	64 c0       	rjmp	.+200    	; 0x40d8 <main+0x3ba>
	else if (__tmp > 65535)
    4010:	fe 01       	movw	r30, r28
    4012:	e5 53       	subi	r30, 0x35	; 53
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	93 81       	ldd	r25, Z+3	; 0x03
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	3f ef       	ldi	r19, 0xFF	; 255
    4022:	4f e7       	ldi	r20, 0x7F	; 127
    4024:	57 e4       	ldi	r21, 0x47	; 71
    4026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    402a:	18 16       	cp	r1, r24
    402c:	0c f0       	brlt	.+2      	; 0x4030 <main+0x312>
    402e:	43 c0       	rjmp	.+134    	; 0x40b6 <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4030:	fe 01       	movw	r30, r28
    4032:	e1 53       	subi	r30, 0x31	; 49
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	93 81       	ldd	r25, Z+3	; 0x03
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e2       	ldi	r20, 0x20	; 32
    4044:	51 e4       	ldi	r21, 0x41	; 65
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	8e 01       	movw	r16, r28
    4050:	07 53       	subi	r16, 0x37	; 55
    4052:	1f 4f       	sbci	r17, 0xFF	; 255
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	1f c0       	rjmp	.+62     	; 0x40a6 <main+0x388>
    4068:	fe 01       	movw	r30, r28
    406a:	e9 53       	subi	r30, 0x39	; 57
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	88 ec       	ldi	r24, 0xC8	; 200
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	80 83       	st	Z, r24
    4076:	fe 01       	movw	r30, r28
    4078:	e9 53       	subi	r30, 0x39	; 57
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 81       	ld	r24, Z
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <main+0x362>
    4084:	fe 01       	movw	r30, r28
    4086:	e9 53       	subi	r30, 0x39	; 57
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408e:	de 01       	movw	r26, r28
    4090:	a7 53       	subi	r26, 0x37	; 55
    4092:	bf 4f       	sbci	r27, 0xFF	; 255
    4094:	fe 01       	movw	r30, r28
    4096:	e7 53       	subi	r30, 0x37	; 55
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 81       	ld	r24, Z
    409c:	91 81       	ldd	r25, Z+1	; 0x01
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	11 96       	adiw	r26, 0x01	; 1
    40a2:	9c 93       	st	X, r25
    40a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a6:	fe 01       	movw	r30, r28
    40a8:	e7 53       	subi	r30, 0x37	; 55
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	80 81       	ld	r24, Z
    40ae:	91 81       	ldd	r25, Z+1	; 0x01
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	d1 f6       	brne	.-76     	; 0x4068 <main+0x34a>
    40b4:	27 c0       	rjmp	.+78     	; 0x4104 <main+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b6:	8e 01       	movw	r16, r28
    40b8:	07 53       	subi	r16, 0x37	; 55
    40ba:	1f 4f       	sbci	r17, 0xFF	; 255
    40bc:	fe 01       	movw	r30, r28
    40be:	e5 53       	subi	r30, 0x35	; 53
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	60 81       	ld	r22, Z
    40c4:	71 81       	ldd	r23, Z+1	; 0x01
    40c6:	82 81       	ldd	r24, Z+2	; 0x02
    40c8:	93 81       	ldd	r25, Z+3	; 0x03
    40ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	f8 01       	movw	r30, r16
    40d4:	91 83       	std	Z+1, r25	; 0x01
    40d6:	80 83       	st	Z, r24
    40d8:	de 01       	movw	r26, r28
    40da:	ab 53       	subi	r26, 0x3B	; 59
    40dc:	bf 4f       	sbci	r27, 0xFF	; 255
    40de:	fe 01       	movw	r30, r28
    40e0:	e7 53       	subi	r30, 0x37	; 55
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	80 81       	ld	r24, Z
    40e6:	91 81       	ldd	r25, Z+1	; 0x01
    40e8:	8d 93       	st	X+, r24
    40ea:	9c 93       	st	X, r25
    40ec:	fe 01       	movw	r30, r28
    40ee:	eb 53       	subi	r30, 0x3B	; 59
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	f1 f7       	brne	.-4      	; 0x40f6 <main+0x3d8>
    40fa:	fe 01       	movw	r30, r28
    40fc:	eb 53       	subi	r30, 0x3B	; 59
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_voidGoToXY(1,0);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_voidGoToXY>
		while(1)
		{
			pass1 = KPD_u8GetPressedKey();
    410c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <KPD_u8GetPressedKey>
    4110:	fe 01       	movw	r30, r28
    4112:	e4 51       	subi	r30, 0x14	; 20
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 83       	st	Z, r24

			if((pass1!=0xff))
    4118:	fe 01       	movw	r30, r28
    411a:	e4 51       	subi	r30, 0x14	; 20
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	8f 3f       	cpi	r24, 0xFF	; 255
    4122:	a1 f3       	breq	.-24     	; 0x410c <main+0x3ee>
			{
				LCD_voidSendChar('*');
    4124:	8a e2       	ldi	r24, 0x2A	; 42
    4126:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass2 = KPD_u8GetPressedKey();
    412a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <KPD_u8GetPressedKey>
    412e:	fe 01       	movw	r30, r28
    4130:	e5 51       	subi	r30, 0x15	; 21
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 83       	st	Z, r24

			if((pass2!=0xff))
    4136:	fe 01       	movw	r30, r28
    4138:	e5 51       	subi	r30, 0x15	; 21
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	8f 3f       	cpi	r24, 0xFF	; 255
    4140:	a1 f3       	breq	.-24     	; 0x412a <main+0x40c>
			{
				LCD_voidSendChar('*');
    4142:	8a e2       	ldi	r24, 0x2A	; 42
    4144:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass3 = KPD_u8GetPressedKey();
    4148:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <KPD_u8GetPressedKey>
    414c:	fe 01       	movw	r30, r28
    414e:	e6 51       	subi	r30, 0x16	; 22
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	80 83       	st	Z, r24

			if((pass3!=0xff))
    4154:	fe 01       	movw	r30, r28
    4156:	e6 51       	subi	r30, 0x16	; 22
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	80 81       	ld	r24, Z
    415c:	8f 3f       	cpi	r24, 0xFF	; 255
    415e:	a1 f3       	breq	.-24     	; 0x4148 <main+0x42a>
			{
				LCD_voidSendChar('*');
    4160:	8a e2       	ldi	r24, 0x2A	; 42
    4162:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
			}

		}
		while(1)
		{
			pass4 = KPD_u8GetPressedKey();
    4166:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <KPD_u8GetPressedKey>
    416a:	fe 01       	movw	r30, r28
    416c:	e7 51       	subi	r30, 0x17	; 23
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 83       	st	Z, r24

			if((pass4!=0xff))
    4172:	fe 01       	movw	r30, r28
    4174:	e7 51       	subi	r30, 0x17	; 23
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	8f 3f       	cpi	r24, 0xFF	; 255
    417c:	a1 f3       	breq	.-24     	; 0x4166 <main+0x448>
			{
				LCD_voidSendChar('*');
    417e:	8a e2       	ldi	r24, 0x2A	; 42
    4180:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_voidSendChar>
				break ;
			}

		}

		User_Pass = (pass1*1000+pass2*100+pass3*10+pass4);  //1234
    4184:	fe 01       	movw	r30, r28
    4186:	e4 51       	subi	r30, 0x14	; 20
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	28 2f       	mov	r18, r24
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	88 ee       	ldi	r24, 0xE8	; 232
    4192:	93 e0       	ldi	r25, 0x03	; 3
    4194:	28 9f       	mul	r18, r24
    4196:	a0 01       	movw	r20, r0
    4198:	29 9f       	mul	r18, r25
    419a:	50 0d       	add	r21, r0
    419c:	38 9f       	mul	r19, r24
    419e:	50 0d       	add	r21, r0
    41a0:	11 24       	eor	r1, r1
    41a2:	fe 01       	movw	r30, r28
    41a4:	e5 51       	subi	r30, 0x15	; 21
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	28 2f       	mov	r18, r24
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	84 e6       	ldi	r24, 0x64	; 100
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	bc 01       	movw	r22, r24
    41b4:	26 9f       	mul	r18, r22
    41b6:	c0 01       	movw	r24, r0
    41b8:	27 9f       	mul	r18, r23
    41ba:	90 0d       	add	r25, r0
    41bc:	36 9f       	mul	r19, r22
    41be:	90 0d       	add	r25, r0
    41c0:	11 24       	eor	r1, r1
    41c2:	48 0f       	add	r20, r24
    41c4:	59 1f       	adc	r21, r25
    41c6:	fe 01       	movw	r30, r28
    41c8:	e6 51       	subi	r30, 0x16	; 22
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 81       	ld	r24, Z
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	9c 01       	movw	r18, r24
    41d4:	22 0f       	add	r18, r18
    41d6:	33 1f       	adc	r19, r19
    41d8:	c9 01       	movw	r24, r18
    41da:	88 0f       	add	r24, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	82 0f       	add	r24, r18
    41e4:	93 1f       	adc	r25, r19
    41e6:	9a 01       	movw	r18, r20
    41e8:	28 0f       	add	r18, r24
    41ea:	39 1f       	adc	r19, r25
    41ec:	fe 01       	movw	r30, r28
    41ee:	e7 51       	subi	r30, 0x17	; 23
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	80 81       	ld	r24, Z
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	82 0f       	add	r24, r18
    41fa:	93 1f       	adc	r25, r19
    41fc:	fe 01       	movw	r30, r28
    41fe:	e1 51       	subi	r30, 0x11	; 17
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	91 83       	std	Z+1, r25	; 0x01
    4204:	80 83       	st	Z, r24
		if((User_Pass!=Password)&&(Try_Again<3))
    4206:	fe 01       	movw	r30, r28
    4208:	e1 51       	subi	r30, 0x11	; 17
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	de 01       	movw	r26, r28
    420e:	af 50       	subi	r26, 0x0F	; 15
    4210:	bf 4f       	sbci	r27, 0xFF	; 255
    4212:	20 81       	ld	r18, Z
    4214:	31 81       	ldd	r19, Z+1	; 0x01
    4216:	8d 91       	ld	r24, X+
    4218:	9c 91       	ld	r25, X
    421a:	11 97       	sbiw	r26, 0x01	; 1
    421c:	28 17       	cp	r18, r24
    421e:	39 07       	cpc	r19, r25
    4220:	09 f4       	brne	.+2      	; 0x4224 <main+0x506>
    4222:	7d c1       	rjmp	.+762    	; 0x451e <main+0x800>
			{
				LCD_voidSendChar('*');
				break ;
			}

		}
    4224:	fe 01       	movw	r30, r28
    4226:	e3 51       	subi	r30, 0x13	; 19
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	80 81       	ld	r24, Z
    422c:	91 81       	ldd	r25, Z+1	; 0x01
    422e:	83 30       	cpi	r24, 0x03	; 3
    4230:	91 05       	cpc	r25, r1
    4232:	08 f0       	brcs	.+2      	; 0x4236 <main+0x518>
    4234:	74 c1       	rjmp	.+744    	; 0x451e <main+0x800>

		User_Pass = (pass1*1000+pass2*100+pass3*10+pass4);  //1234
		if((User_Pass!=Password)&&(Try_Again<3))
		{
			LCD_voidCLR();
    4236:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Wrong Password");
    423a:	87 e7       	ldi	r24, 0x77	; 119
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    4242:	fe 01       	movw	r30, r28
    4244:	ef 53       	subi	r30, 0x3F	; 63
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	aa e7       	ldi	r26, 0x7A	; 122
    424e:	b4 e4       	ldi	r27, 0x44	; 68
    4250:	80 83       	st	Z, r24
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	a2 83       	std	Z+2, r26	; 0x02
    4256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4258:	8e 01       	movw	r16, r28
    425a:	03 54       	subi	r16, 0x43	; 67
    425c:	1f 4f       	sbci	r17, 0xFF	; 255
    425e:	fe 01       	movw	r30, r28
    4260:	ef 53       	subi	r30, 0x3F	; 63
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	60 81       	ld	r22, Z
    4266:	71 81       	ldd	r23, Z+1	; 0x01
    4268:	82 81       	ldd	r24, Z+2	; 0x02
    426a:	93 81       	ldd	r25, Z+3	; 0x03
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	4a ef       	ldi	r20, 0xFA	; 250
    4272:	54 e4       	ldi	r21, 0x44	; 68
    4274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	f8 01       	movw	r30, r16
    427e:	80 83       	st	Z, r24
    4280:	91 83       	std	Z+1, r25	; 0x01
    4282:	a2 83       	std	Z+2, r26	; 0x02
    4284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4286:	fe 01       	movw	r30, r28
    4288:	e3 54       	subi	r30, 0x43	; 67
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	93 81       	ldd	r25, Z+3	; 0x03
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	44 f4       	brge	.+16     	; 0x42b4 <main+0x596>
		__ticks = 1;
    42a4:	fe 01       	movw	r30, r28
    42a6:	e5 54       	subi	r30, 0x45	; 69
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	80 83       	st	Z, r24
    42b2:	64 c0       	rjmp	.+200    	; 0x437c <main+0x65e>
	else if (__tmp > 65535)
    42b4:	fe 01       	movw	r30, r28
    42b6:	e3 54       	subi	r30, 0x43	; 67
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	60 81       	ld	r22, Z
    42bc:	71 81       	ldd	r23, Z+1	; 0x01
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	93 81       	ldd	r25, Z+3	; 0x03
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	3f ef       	ldi	r19, 0xFF	; 255
    42c6:	4f e7       	ldi	r20, 0x7F	; 127
    42c8:	57 e4       	ldi	r21, 0x47	; 71
    42ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42ce:	18 16       	cp	r1, r24
    42d0:	0c f0       	brlt	.+2      	; 0x42d4 <main+0x5b6>
    42d2:	43 c0       	rjmp	.+134    	; 0x435a <main+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d4:	fe 01       	movw	r30, r28
    42d6:	ef 53       	subi	r30, 0x3F	; 63
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e2       	ldi	r20, 0x20	; 32
    42e8:	51 e4       	ldi	r21, 0x41	; 65
    42ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	8e 01       	movw	r16, r28
    42f4:	05 54       	subi	r16, 0x45	; 69
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	bc 01       	movw	r22, r24
    42fa:	cd 01       	movw	r24, r26
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	f8 01       	movw	r30, r16
    4306:	91 83       	std	Z+1, r25	; 0x01
    4308:	80 83       	st	Z, r24
    430a:	1f c0       	rjmp	.+62     	; 0x434a <main+0x62c>
    430c:	fe 01       	movw	r30, r28
    430e:	e7 54       	subi	r30, 0x47	; 71
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	88 ec       	ldi	r24, 0xC8	; 200
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
    431a:	fe 01       	movw	r30, r28
    431c:	e7 54       	subi	r30, 0x47	; 71
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	f1 f7       	brne	.-4      	; 0x4324 <main+0x606>
    4328:	fe 01       	movw	r30, r28
    432a:	e7 54       	subi	r30, 0x47	; 71
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	de 01       	movw	r26, r28
    4334:	a5 54       	subi	r26, 0x45	; 69
    4336:	bf 4f       	sbci	r27, 0xFF	; 255
    4338:	fe 01       	movw	r30, r28
    433a:	e5 54       	subi	r30, 0x45	; 69
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 81       	ld	r24, Z
    4340:	91 81       	ldd	r25, Z+1	; 0x01
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	11 96       	adiw	r26, 0x01	; 1
    4346:	9c 93       	st	X, r25
    4348:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434a:	fe 01       	movw	r30, r28
    434c:	e5 54       	subi	r30, 0x45	; 69
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	80 81       	ld	r24, Z
    4352:	91 81       	ldd	r25, Z+1	; 0x01
    4354:	00 97       	sbiw	r24, 0x00	; 0
    4356:	d1 f6       	brne	.-76     	; 0x430c <main+0x5ee>
    4358:	27 c0       	rjmp	.+78     	; 0x43a8 <main+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435a:	8e 01       	movw	r16, r28
    435c:	05 54       	subi	r16, 0x45	; 69
    435e:	1f 4f       	sbci	r17, 0xFF	; 255
    4360:	fe 01       	movw	r30, r28
    4362:	e3 54       	subi	r30, 0x43	; 67
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	60 81       	ld	r22, Z
    4368:	71 81       	ldd	r23, Z+1	; 0x01
    436a:	82 81       	ldd	r24, Z+2	; 0x02
    436c:	93 81       	ldd	r25, Z+3	; 0x03
    436e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	f8 01       	movw	r30, r16
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
    437c:	de 01       	movw	r26, r28
    437e:	a9 54       	subi	r26, 0x49	; 73
    4380:	bf 4f       	sbci	r27, 0xFF	; 255
    4382:	fe 01       	movw	r30, r28
    4384:	e5 54       	subi	r30, 0x45	; 69
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	8d 93       	st	X+, r24
    438e:	9c 93       	st	X, r25
    4390:	fe 01       	movw	r30, r28
    4392:	e9 54       	subi	r30, 0x49	; 73
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	80 81       	ld	r24, Z
    4398:	91 81       	ldd	r25, Z+1	; 0x01
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	f1 f7       	brne	.-4      	; 0x439a <main+0x67c>
    439e:	fe 01       	movw	r30, r28
    43a0:	e9 54       	subi	r30, 0x49	; 73
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	91 83       	std	Z+1, r25	; 0x01
    43a6:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_voidCLR();
    43a8:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Try again");
    43ac:	86 e8       	ldi	r24, 0x86	; 134
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    43b4:	fe 01       	movw	r30, r28
    43b6:	ed 54       	subi	r30, 0x4D	; 77
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	aa e7       	ldi	r26, 0x7A	; 122
    43c0:	b4 e4       	ldi	r27, 0x44	; 68
    43c2:	80 83       	st	Z, r24
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	a2 83       	std	Z+2, r26	; 0x02
    43c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ca:	8e 01       	movw	r16, r28
    43cc:	01 55       	subi	r16, 0x51	; 81
    43ce:	1f 4f       	sbci	r17, 0xFF	; 255
    43d0:	fe 01       	movw	r30, r28
    43d2:	ed 54       	subi	r30, 0x4D	; 77
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	60 81       	ld	r22, Z
    43d8:	71 81       	ldd	r23, Z+1	; 0x01
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	4a ef       	ldi	r20, 0xFA	; 250
    43e4:	54 e4       	ldi	r21, 0x44	; 68
    43e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	f8 01       	movw	r30, r16
    43f0:	80 83       	st	Z, r24
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	a2 83       	std	Z+2, r26	; 0x02
    43f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43f8:	fe 01       	movw	r30, r28
    43fa:	e1 55       	subi	r30, 0x51	; 81
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	60 81       	ld	r22, Z
    4400:	71 81       	ldd	r23, Z+1	; 0x01
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	93 81       	ldd	r25, Z+3	; 0x03
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e8       	ldi	r20, 0x80	; 128
    440c:	5f e3       	ldi	r21, 0x3F	; 63
    440e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4412:	88 23       	and	r24, r24
    4414:	44 f4       	brge	.+16     	; 0x4426 <main+0x708>
		__ticks = 1;
    4416:	fe 01       	movw	r30, r28
    4418:	e3 55       	subi	r30, 0x53	; 83
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	91 83       	std	Z+1, r25	; 0x01
    4422:	80 83       	st	Z, r24
    4424:	64 c0       	rjmp	.+200    	; 0x44ee <main+0x7d0>
	else if (__tmp > 65535)
    4426:	fe 01       	movw	r30, r28
    4428:	e1 55       	subi	r30, 0x51	; 81
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	60 81       	ld	r22, Z
    442e:	71 81       	ldd	r23, Z+1	; 0x01
    4430:	82 81       	ldd	r24, Z+2	; 0x02
    4432:	93 81       	ldd	r25, Z+3	; 0x03
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	3f ef       	ldi	r19, 0xFF	; 255
    4438:	4f e7       	ldi	r20, 0x7F	; 127
    443a:	57 e4       	ldi	r21, 0x47	; 71
    443c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4440:	18 16       	cp	r1, r24
    4442:	0c f0       	brlt	.+2      	; 0x4446 <main+0x728>
    4444:	43 c0       	rjmp	.+134    	; 0x44cc <main+0x7ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4446:	fe 01       	movw	r30, r28
    4448:	ed 54       	subi	r30, 0x4D	; 77
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	60 81       	ld	r22, Z
    444e:	71 81       	ldd	r23, Z+1	; 0x01
    4450:	82 81       	ldd	r24, Z+2	; 0x02
    4452:	93 81       	ldd	r25, Z+3	; 0x03
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e2       	ldi	r20, 0x20	; 32
    445a:	51 e4       	ldi	r21, 0x41	; 65
    445c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	8e 01       	movw	r16, r28
    4466:	03 55       	subi	r16, 0x53	; 83
    4468:	1f 4f       	sbci	r17, 0xFF	; 255
    446a:	bc 01       	movw	r22, r24
    446c:	cd 01       	movw	r24, r26
    446e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	f8 01       	movw	r30, r16
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	80 83       	st	Z, r24
    447c:	1f c0       	rjmp	.+62     	; 0x44bc <main+0x79e>
    447e:	fe 01       	movw	r30, r28
    4480:	e5 55       	subi	r30, 0x55	; 85
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	88 ec       	ldi	r24, 0xC8	; 200
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	91 83       	std	Z+1, r25	; 0x01
    448a:	80 83       	st	Z, r24
    448c:	fe 01       	movw	r30, r28
    448e:	e5 55       	subi	r30, 0x55	; 85
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	f1 f7       	brne	.-4      	; 0x4496 <main+0x778>
    449a:	fe 01       	movw	r30, r28
    449c:	e5 55       	subi	r30, 0x55	; 85
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a4:	de 01       	movw	r26, r28
    44a6:	a3 55       	subi	r26, 0x53	; 83
    44a8:	bf 4f       	sbci	r27, 0xFF	; 255
    44aa:	fe 01       	movw	r30, r28
    44ac:	e3 55       	subi	r30, 0x53	; 83
    44ae:	ff 4f       	sbci	r31, 0xFF	; 255
    44b0:	80 81       	ld	r24, Z
    44b2:	91 81       	ldd	r25, Z+1	; 0x01
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	11 96       	adiw	r26, 0x01	; 1
    44b8:	9c 93       	st	X, r25
    44ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44bc:	fe 01       	movw	r30, r28
    44be:	e3 55       	subi	r30, 0x53	; 83
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	80 81       	ld	r24, Z
    44c4:	91 81       	ldd	r25, Z+1	; 0x01
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	d1 f6       	brne	.-76     	; 0x447e <main+0x760>
    44ca:	7d cc       	rjmp	.-1798   	; 0x3dc6 <main+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44cc:	8e 01       	movw	r16, r28
    44ce:	03 55       	subi	r16, 0x53	; 83
    44d0:	1f 4f       	sbci	r17, 0xFF	; 255
    44d2:	fe 01       	movw	r30, r28
    44d4:	e1 55       	subi	r30, 0x51	; 81
    44d6:	ff 4f       	sbci	r31, 0xFF	; 255
    44d8:	60 81       	ld	r22, Z
    44da:	71 81       	ldd	r23, Z+1	; 0x01
    44dc:	82 81       	ldd	r24, Z+2	; 0x02
    44de:	93 81       	ldd	r25, Z+3	; 0x03
    44e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e4:	dc 01       	movw	r26, r24
    44e6:	cb 01       	movw	r24, r22
    44e8:	f8 01       	movw	r30, r16
    44ea:	91 83       	std	Z+1, r25	; 0x01
    44ec:	80 83       	st	Z, r24
    44ee:	de 01       	movw	r26, r28
    44f0:	a7 55       	subi	r26, 0x57	; 87
    44f2:	bf 4f       	sbci	r27, 0xFF	; 255
    44f4:	fe 01       	movw	r30, r28
    44f6:	e3 55       	subi	r30, 0x53	; 83
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	80 81       	ld	r24, Z
    44fc:	91 81       	ldd	r25, Z+1	; 0x01
    44fe:	11 96       	adiw	r26, 0x01	; 1
    4500:	9c 93       	st	X, r25
    4502:	8e 93       	st	-X, r24
    4504:	fe 01       	movw	r30, r28
    4506:	e7 55       	subi	r30, 0x57	; 87
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	80 81       	ld	r24, Z
    450c:	91 81       	ldd	r25, Z+1	; 0x01
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <main+0x7f0>
    4512:	fe 01       	movw	r30, r28
    4514:	e7 55       	subi	r30, 0x57	; 87
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	91 83       	std	Z+1, r25	; 0x01
    451a:	80 83       	st	Z, r24
    451c:	54 cc       	rjmp	.-1880   	; 0x3dc6 <main+0xa8>
		}




		else if((User_Pass!=Password)&&(Try_Again=3))
    451e:	fe 01       	movw	r30, r28
    4520:	e1 51       	subi	r30, 0x11	; 17
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	de 01       	movw	r26, r28
    4526:	af 50       	subi	r26, 0x0F	; 15
    4528:	bf 4f       	sbci	r27, 0xFF	; 255
    452a:	20 81       	ld	r18, Z
    452c:	31 81       	ldd	r19, Z+1	; 0x01
    452e:	8d 91       	ld	r24, X+
    4530:	9c 91       	ld	r25, X
    4532:	11 97       	sbiw	r26, 0x01	; 1
    4534:	28 17       	cp	r18, r24
    4536:	39 07       	cpc	r19, r25
    4538:	09 f4       	brne	.+2      	; 0x453c <main+0x81e>
    453a:	90 c1       	rjmp	.+800    	; 0x485c <main+0xb3e>
    453c:	fe 01       	movw	r30, r28
    453e:	e3 51       	subi	r30, 0x13	; 19
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	83 e0       	ldi	r24, 0x03	; 3
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	91 83       	std	Z+1, r25	; 0x01
    4548:	80 83       	st	Z, r24
		{
			UART_voidSendData('d');
    454a:	84 e6       	ldi	r24, 0x64	; 100
    454c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
			LCD_voidCLR();
    4550:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("NoMoreTries");
    4554:	80 e9       	ldi	r24, 0x90	; 144
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    455c:	fe 01       	movw	r30, r28
    455e:	eb 55       	subi	r30, 0x5B	; 91
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	aa e7       	ldi	r26, 0x7A	; 122
    4568:	b4 e4       	ldi	r27, 0x44	; 68
    456a:	80 83       	st	Z, r24
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	a2 83       	std	Z+2, r26	; 0x02
    4570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4572:	8e 01       	movw	r16, r28
    4574:	0f 55       	subi	r16, 0x5F	; 95
    4576:	1f 4f       	sbci	r17, 0xFF	; 255
    4578:	fe 01       	movw	r30, r28
    457a:	eb 55       	subi	r30, 0x5B	; 91
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	82 81       	ldd	r24, Z+2	; 0x02
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	4a ef       	ldi	r20, 0xFA	; 250
    458c:	54 e4       	ldi	r21, 0x44	; 68
    458e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	f8 01       	movw	r30, r16
    4598:	80 83       	st	Z, r24
    459a:	91 83       	std	Z+1, r25	; 0x01
    459c:	a2 83       	std	Z+2, r26	; 0x02
    459e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45a0:	fe 01       	movw	r30, r28
    45a2:	ef 55       	subi	r30, 0x5F	; 95
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	60 81       	ld	r22, Z
    45a8:	71 81       	ldd	r23, Z+1	; 0x01
    45aa:	82 81       	ldd	r24, Z+2	; 0x02
    45ac:	93 81       	ldd	r25, Z+3	; 0x03
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e8       	ldi	r20, 0x80	; 128
    45b4:	5f e3       	ldi	r21, 0x3F	; 63
    45b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ba:	88 23       	and	r24, r24
    45bc:	44 f4       	brge	.+16     	; 0x45ce <main+0x8b0>
		__ticks = 1;
    45be:	fe 01       	movw	r30, r28
    45c0:	e1 56       	subi	r30, 0x61	; 97
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	80 83       	st	Z, r24
    45cc:	64 c0       	rjmp	.+200    	; 0x4696 <main+0x978>
	else if (__tmp > 65535)
    45ce:	fe 01       	movw	r30, r28
    45d0:	ef 55       	subi	r30, 0x5F	; 95
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	60 81       	ld	r22, Z
    45d6:	71 81       	ldd	r23, Z+1	; 0x01
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	3f ef       	ldi	r19, 0xFF	; 255
    45e0:	4f e7       	ldi	r20, 0x7F	; 127
    45e2:	57 e4       	ldi	r21, 0x47	; 71
    45e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45e8:	18 16       	cp	r1, r24
    45ea:	0c f0       	brlt	.+2      	; 0x45ee <main+0x8d0>
    45ec:	43 c0       	rjmp	.+134    	; 0x4674 <main+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ee:	fe 01       	movw	r30, r28
    45f0:	eb 55       	subi	r30, 0x5B	; 91
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	60 81       	ld	r22, Z
    45f6:	71 81       	ldd	r23, Z+1	; 0x01
    45f8:	82 81       	ldd	r24, Z+2	; 0x02
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e2       	ldi	r20, 0x20	; 32
    4602:	51 e4       	ldi	r21, 0x41	; 65
    4604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	8e 01       	movw	r16, r28
    460e:	01 56       	subi	r16, 0x61	; 97
    4610:	1f 4f       	sbci	r17, 0xFF	; 255
    4612:	bc 01       	movw	r22, r24
    4614:	cd 01       	movw	r24, r26
    4616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	f8 01       	movw	r30, r16
    4620:	91 83       	std	Z+1, r25	; 0x01
    4622:	80 83       	st	Z, r24
    4624:	1f c0       	rjmp	.+62     	; 0x4664 <main+0x946>
    4626:	fe 01       	movw	r30, r28
    4628:	e3 56       	subi	r30, 0x63	; 99
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	88 ec       	ldi	r24, 0xC8	; 200
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
    4634:	fe 01       	movw	r30, r28
    4636:	e3 56       	subi	r30, 0x63	; 99
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	80 81       	ld	r24, Z
    463c:	91 81       	ldd	r25, Z+1	; 0x01
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	f1 f7       	brne	.-4      	; 0x463e <main+0x920>
    4642:	fe 01       	movw	r30, r28
    4644:	e3 56       	subi	r30, 0x63	; 99
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	91 83       	std	Z+1, r25	; 0x01
    464a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464c:	de 01       	movw	r26, r28
    464e:	a1 56       	subi	r26, 0x61	; 97
    4650:	bf 4f       	sbci	r27, 0xFF	; 255
    4652:	fe 01       	movw	r30, r28
    4654:	e1 56       	subi	r30, 0x61	; 97
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	80 81       	ld	r24, Z
    465a:	91 81       	ldd	r25, Z+1	; 0x01
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	11 96       	adiw	r26, 0x01	; 1
    4660:	9c 93       	st	X, r25
    4662:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4664:	fe 01       	movw	r30, r28
    4666:	e1 56       	subi	r30, 0x61	; 97
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	d1 f6       	brne	.-76     	; 0x4626 <main+0x908>
    4672:	27 c0       	rjmp	.+78     	; 0x46c2 <main+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4674:	8e 01       	movw	r16, r28
    4676:	01 56       	subi	r16, 0x61	; 97
    4678:	1f 4f       	sbci	r17, 0xFF	; 255
    467a:	fe 01       	movw	r30, r28
    467c:	ef 55       	subi	r30, 0x5F	; 95
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	60 81       	ld	r22, Z
    4682:	71 81       	ldd	r23, Z+1	; 0x01
    4684:	82 81       	ldd	r24, Z+2	; 0x02
    4686:	93 81       	ldd	r25, Z+3	; 0x03
    4688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	f8 01       	movw	r30, r16
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	80 83       	st	Z, r24
    4696:	de 01       	movw	r26, r28
    4698:	a5 56       	subi	r26, 0x65	; 101
    469a:	bf 4f       	sbci	r27, 0xFF	; 255
    469c:	fe 01       	movw	r30, r28
    469e:	e1 56       	subi	r30, 0x61	; 97
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	91 81       	ldd	r25, Z+1	; 0x01
    46a6:	8d 93       	st	X+, r24
    46a8:	9c 93       	st	X, r25
    46aa:	fe 01       	movw	r30, r28
    46ac:	e5 56       	subi	r30, 0x65	; 101
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <main+0x996>
    46b8:	fe 01       	movw	r30, r28
    46ba:	e5 56       	subi	r30, 0x65	; 101
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_voidCLR();
    46c2:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Alerts On");
    46c6:	8c e9       	ldi	r24, 0x9C	; 156
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
			DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
    46ce:	83 e0       	ldi	r24, 0x03	; 3
    46d0:	63 e0       	ldi	r22, 0x03	; 3
    46d2:	41 e0       	ldi	r20, 0x01	; 1
    46d4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    46d8:	fe 01       	movw	r30, r28
    46da:	e9 56       	subi	r30, 0x69	; 105
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	90 e4       	ldi	r25, 0x40	; 64
    46e2:	ac e1       	ldi	r26, 0x1C	; 28
    46e4:	b6 e4       	ldi	r27, 0x46	; 70
    46e6:	80 83       	st	Z, r24
    46e8:	91 83       	std	Z+1, r25	; 0x01
    46ea:	a2 83       	std	Z+2, r26	; 0x02
    46ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ee:	8e 01       	movw	r16, r28
    46f0:	0d 56       	subi	r16, 0x6D	; 109
    46f2:	1f 4f       	sbci	r17, 0xFF	; 255
    46f4:	fe 01       	movw	r30, r28
    46f6:	e9 56       	subi	r30, 0x69	; 105
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	60 81       	ld	r22, Z
    46fc:	71 81       	ldd	r23, Z+1	; 0x01
    46fe:	82 81       	ldd	r24, Z+2	; 0x02
    4700:	93 81       	ldd	r25, Z+3	; 0x03
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	4a ef       	ldi	r20, 0xFA	; 250
    4708:	54 e4       	ldi	r21, 0x44	; 68
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	f8 01       	movw	r30, r16
    4714:	80 83       	st	Z, r24
    4716:	91 83       	std	Z+1, r25	; 0x01
    4718:	a2 83       	std	Z+2, r26	; 0x02
    471a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    471c:	fe 01       	movw	r30, r28
    471e:	ed 56       	subi	r30, 0x6D	; 109
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	60 81       	ld	r22, Z
    4724:	71 81       	ldd	r23, Z+1	; 0x01
    4726:	82 81       	ldd	r24, Z+2	; 0x02
    4728:	93 81       	ldd	r25, Z+3	; 0x03
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e8       	ldi	r20, 0x80	; 128
    4730:	5f e3       	ldi	r21, 0x3F	; 63
    4732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4736:	88 23       	and	r24, r24
    4738:	44 f4       	brge	.+16     	; 0x474a <main+0xa2c>
		__ticks = 1;
    473a:	fe 01       	movw	r30, r28
    473c:	ef 56       	subi	r30, 0x6F	; 111
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	91 83       	std	Z+1, r25	; 0x01
    4746:	80 83       	st	Z, r24
    4748:	64 c0       	rjmp	.+200    	; 0x4812 <main+0xaf4>
	else if (__tmp > 65535)
    474a:	fe 01       	movw	r30, r28
    474c:	ed 56       	subi	r30, 0x6D	; 109
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	60 81       	ld	r22, Z
    4752:	71 81       	ldd	r23, Z+1	; 0x01
    4754:	82 81       	ldd	r24, Z+2	; 0x02
    4756:	93 81       	ldd	r25, Z+3	; 0x03
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	3f ef       	ldi	r19, 0xFF	; 255
    475c:	4f e7       	ldi	r20, 0x7F	; 127
    475e:	57 e4       	ldi	r21, 0x47	; 71
    4760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4764:	18 16       	cp	r1, r24
    4766:	0c f0       	brlt	.+2      	; 0x476a <main+0xa4c>
    4768:	43 c0       	rjmp	.+134    	; 0x47f0 <main+0xad2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    476a:	fe 01       	movw	r30, r28
    476c:	e9 56       	subi	r30, 0x69	; 105
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	60 81       	ld	r22, Z
    4772:	71 81       	ldd	r23, Z+1	; 0x01
    4774:	82 81       	ldd	r24, Z+2	; 0x02
    4776:	93 81       	ldd	r25, Z+3	; 0x03
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	40 e2       	ldi	r20, 0x20	; 32
    477e:	51 e4       	ldi	r21, 0x41	; 65
    4780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	8e 01       	movw	r16, r28
    478a:	0f 56       	subi	r16, 0x6F	; 111
    478c:	1f 4f       	sbci	r17, 0xFF	; 255
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	f8 01       	movw	r30, r16
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	80 83       	st	Z, r24
    47a0:	1f c0       	rjmp	.+62     	; 0x47e0 <main+0xac2>
    47a2:	fe 01       	movw	r30, r28
    47a4:	e1 57       	subi	r30, 0x71	; 113
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	88 ec       	ldi	r24, 0xC8	; 200
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	80 83       	st	Z, r24
    47b0:	fe 01       	movw	r30, r28
    47b2:	e1 57       	subi	r30, 0x71	; 113
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	80 81       	ld	r24, Z
    47b8:	91 81       	ldd	r25, Z+1	; 0x01
    47ba:	01 97       	sbiw	r24, 0x01	; 1
    47bc:	f1 f7       	brne	.-4      	; 0x47ba <main+0xa9c>
    47be:	fe 01       	movw	r30, r28
    47c0:	e1 57       	subi	r30, 0x71	; 113
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c8:	de 01       	movw	r26, r28
    47ca:	af 56       	subi	r26, 0x6F	; 111
    47cc:	bf 4f       	sbci	r27, 0xFF	; 255
    47ce:	fe 01       	movw	r30, r28
    47d0:	ef 56       	subi	r30, 0x6F	; 111
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	01 97       	sbiw	r24, 0x01	; 1
    47da:	11 96       	adiw	r26, 0x01	; 1
    47dc:	9c 93       	st	X, r25
    47de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e0:	fe 01       	movw	r30, r28
    47e2:	ef 56       	subi	r30, 0x6F	; 111
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	80 81       	ld	r24, Z
    47e8:	91 81       	ldd	r25, Z+1	; 0x01
    47ea:	00 97       	sbiw	r24, 0x00	; 0
    47ec:	d1 f6       	brne	.-76     	; 0x47a2 <main+0xa84>
    47ee:	28 c0       	rjmp	.+80     	; 0x4840 <main+0xb22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f0:	8e 01       	movw	r16, r28
    47f2:	0f 56       	subi	r16, 0x6F	; 111
    47f4:	1f 4f       	sbci	r17, 0xFF	; 255
    47f6:	fe 01       	movw	r30, r28
    47f8:	ed 56       	subi	r30, 0x6D	; 109
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	60 81       	ld	r22, Z
    47fe:	71 81       	ldd	r23, Z+1	; 0x01
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	f8 01       	movw	r30, r16
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
    4812:	de 01       	movw	r26, r28
    4814:	a3 57       	subi	r26, 0x73	; 115
    4816:	bf 4f       	sbci	r27, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	ef 56       	subi	r30, 0x6F	; 111
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	91 81       	ldd	r25, Z+1	; 0x01
    4822:	11 96       	adiw	r26, 0x01	; 1
    4824:	9c 93       	st	X, r25
    4826:	8e 93       	st	-X, r24
    4828:	fe 01       	movw	r30, r28
    482a:	e3 57       	subi	r30, 0x73	; 115
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	80 81       	ld	r24, Z
    4830:	91 81       	ldd	r25, Z+1	; 0x01
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	f1 f7       	brne	.-4      	; 0x4832 <main+0xb14>
    4836:	fe 01       	movw	r30, r28
    4838:	e3 57       	subi	r30, 0x73	; 115
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	91 83       	std	Z+1, r25	; 0x01
    483e:	80 83       	st	Z, r24



	}

	return 0 ;
    4840:	80 e0       	ldi	r24, 0x00	; 0
    4842:	90 e0       	ldi	r25, 0x00	; 0
}
    4844:	c9 50       	subi	r28, 0x09	; 9
    4846:	df 4f       	sbci	r29, 0xFF	; 255
    4848:	0f b6       	in	r0, 0x3f	; 63
    484a:	f8 94       	cli
    484c:	de bf       	out	0x3e, r29	; 62
    484e:	0f be       	out	0x3f, r0	; 63
    4850:	cd bf       	out	0x3d, r28	; 61
    4852:	cf 91       	pop	r28
    4854:	df 91       	pop	r29
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	08 95       	ret

			_delay_ms(10000);
			break ;
		}

		else if(User_Pass==Password)
    485c:	fe 01       	movw	r30, r28
    485e:	e1 51       	subi	r30, 0x11	; 17
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	de 01       	movw	r26, r28
    4864:	af 50       	subi	r26, 0x0F	; 15
    4866:	bf 4f       	sbci	r27, 0xFF	; 255
    4868:	20 81       	ld	r18, Z
    486a:	31 81       	ldd	r19, Z+1	; 0x01
    486c:	8d 91       	ld	r24, X+
    486e:	9c 91       	ld	r25, X
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	28 17       	cp	r18, r24
    4874:	39 07       	cpc	r19, r25
    4876:	09 f0       	breq	.+2      	; 0x487a <main+0xb5c>
    4878:	d3 ca       	rjmp	.-2650   	; 0x3e20 <main+0x102>
		{

			LCD_voidCLR();
    487a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Hello user");
    487e:	86 ea       	ldi	r24, 0xA6	; 166
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    4886:	fe 01       	movw	r30, r28
    4888:	e7 57       	subi	r30, 0x77	; 119
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e8       	ldi	r25, 0x80	; 128
    4890:	ab e3       	ldi	r26, 0x3B	; 59
    4892:	b5 e4       	ldi	r27, 0x45	; 69
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    489c:	8e 01       	movw	r16, r28
    489e:	0b 57       	subi	r16, 0x7B	; 123
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	fe 01       	movw	r30, r28
    48a4:	e7 57       	subi	r30, 0x77	; 119
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	4a ef       	ldi	r20, 0xFA	; 250
    48b6:	54 e4       	ldi	r21, 0x44	; 68
    48b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	f8 01       	movw	r30, r16
    48c2:	80 83       	st	Z, r24
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	a2 83       	std	Z+2, r26	; 0x02
    48c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ca:	fe 01       	movw	r30, r28
    48cc:	eb 57       	subi	r30, 0x7B	; 123
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e8       	ldi	r20, 0x80	; 128
    48de:	5f e3       	ldi	r21, 0x3F	; 63
    48e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48e4:	88 23       	and	r24, r24
    48e6:	44 f4       	brge	.+16     	; 0x48f8 <main+0xbda>
		__ticks = 1;
    48e8:	fe 01       	movw	r30, r28
    48ea:	ed 57       	subi	r30, 0x7D	; 125
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	80 83       	st	Z, r24
    48f6:	64 c0       	rjmp	.+200    	; 0x49c0 <main+0xca2>
	else if (__tmp > 65535)
    48f8:	fe 01       	movw	r30, r28
    48fa:	eb 57       	subi	r30, 0x7B	; 123
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	4f e7       	ldi	r20, 0x7F	; 127
    490c:	57 e4       	ldi	r21, 0x47	; 71
    490e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4912:	18 16       	cp	r1, r24
    4914:	0c f0       	brlt	.+2      	; 0x4918 <main+0xbfa>
    4916:	43 c0       	rjmp	.+134    	; 0x499e <main+0xc80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4918:	fe 01       	movw	r30, r28
    491a:	e7 57       	subi	r30, 0x77	; 119
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e2       	ldi	r20, 0x20	; 32
    492c:	51 e4       	ldi	r21, 0x41	; 65
    492e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	8e 01       	movw	r16, r28
    4938:	0d 57       	subi	r16, 0x7D	; 125
    493a:	1f 4f       	sbci	r17, 0xFF	; 255
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	f8 01       	movw	r30, r16
    494a:	91 83       	std	Z+1, r25	; 0x01
    494c:	80 83       	st	Z, r24
    494e:	1f c0       	rjmp	.+62     	; 0x498e <main+0xc70>
    4950:	fe 01       	movw	r30, r28
    4952:	ef 57       	subi	r30, 0x7F	; 127
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	88 ec       	ldi	r24, 0xC8	; 200
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	80 83       	st	Z, r24
    495e:	fe 01       	movw	r30, r28
    4960:	ef 57       	subi	r30, 0x7F	; 127
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	91 81       	ldd	r25, Z+1	; 0x01
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <main+0xc4a>
    496c:	fe 01       	movw	r30, r28
    496e:	ef 57       	subi	r30, 0x7F	; 127
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4976:	de 01       	movw	r26, r28
    4978:	ad 57       	subi	r26, 0x7D	; 125
    497a:	bf 4f       	sbci	r27, 0xFF	; 255
    497c:	fe 01       	movw	r30, r28
    497e:	ed 57       	subi	r30, 0x7D	; 125
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	80 81       	ld	r24, Z
    4984:	91 81       	ldd	r25, Z+1	; 0x01
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	9c 93       	st	X, r25
    498c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498e:	fe 01       	movw	r30, r28
    4990:	ed 57       	subi	r30, 0x7D	; 125
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	00 97       	sbiw	r24, 0x00	; 0
    499a:	d1 f6       	brne	.-76     	; 0x4950 <main+0xc32>
    499c:	27 c0       	rjmp	.+78     	; 0x49ec <main+0xcce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    499e:	8e 01       	movw	r16, r28
    49a0:	0d 57       	subi	r16, 0x7D	; 125
    49a2:	1f 4f       	sbci	r17, 0xFF	; 255
    49a4:	fe 01       	movw	r30, r28
    49a6:	eb 57       	subi	r30, 0x7B	; 123
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	f8 01       	movw	r30, r16
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
    49c0:	de 01       	movw	r26, r28
    49c2:	a1 58       	subi	r26, 0x81	; 129
    49c4:	bf 4f       	sbci	r27, 0xFF	; 255
    49c6:	fe 01       	movw	r30, r28
    49c8:	ed 57       	subi	r30, 0x7D	; 125
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	8d 93       	st	X+, r24
    49d2:	9c 93       	st	X, r25
    49d4:	fe 01       	movw	r30, r28
    49d6:	e1 58       	subi	r30, 0x81	; 129
    49d8:	ff 4f       	sbci	r31, 0xFF	; 255
    49da:	80 81       	ld	r24, Z
    49dc:	91 81       	ldd	r25, Z+1	; 0x01
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <main+0xcc0>
    49e2:	fe 01       	movw	r30, r28
    49e4:	e1 58       	subi	r30, 0x81	; 129
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    49ec:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			UART_voidSendData('s');
    49f0:	83 e7       	ldi	r24, 0x73	; 115
    49f2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
			LCD_voidSendString("Door is opened");
    49f6:	81 eb       	ldi	r24, 0xB1	; 177
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    49fe:	fe 01       	movw	r30, r28
    4a00:	e5 58       	subi	r30, 0x85	; 133
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e8       	ldi	r25, 0x80	; 128
    4a08:	ab e3       	ldi	r26, 0x3B	; 59
    4a0a:	b5 e4       	ldi	r27, 0x45	; 69
    4a0c:	80 83       	st	Z, r24
    4a0e:	91 83       	std	Z+1, r25	; 0x01
    4a10:	a2 83       	std	Z+2, r26	; 0x02
    4a12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a14:	8e 01       	movw	r16, r28
    4a16:	09 58       	subi	r16, 0x89	; 137
    4a18:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e5 58       	subi	r30, 0x85	; 133
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	60 81       	ld	r22, Z
    4a22:	71 81       	ldd	r23, Z+1	; 0x01
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	93 81       	ldd	r25, Z+3	; 0x03
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	4a ef       	ldi	r20, 0xFA	; 250
    4a2e:	54 e4       	ldi	r21, 0x44	; 68
    4a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a34:	dc 01       	movw	r26, r24
    4a36:	cb 01       	movw	r24, r22
    4a38:	f8 01       	movw	r30, r16
    4a3a:	80 83       	st	Z, r24
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	a2 83       	std	Z+2, r26	; 0x02
    4a40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a42:	fe 01       	movw	r30, r28
    4a44:	e9 58       	subi	r30, 0x89	; 137
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	60 81       	ld	r22, Z
    4a4a:	71 81       	ldd	r23, Z+1	; 0x01
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	44 f4       	brge	.+16     	; 0x4a70 <main+0xd52>
		__ticks = 1;
    4a60:	fe 01       	movw	r30, r28
    4a62:	eb 58       	subi	r30, 0x8B	; 139
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	91 83       	std	Z+1, r25	; 0x01
    4a6c:	80 83       	st	Z, r24
    4a6e:	64 c0       	rjmp	.+200    	; 0x4b38 <main+0xe1a>
	else if (__tmp > 65535)
    4a70:	fe 01       	movw	r30, r28
    4a72:	e9 58       	subi	r30, 0x89	; 137
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	3f ef       	ldi	r19, 0xFF	; 255
    4a82:	4f e7       	ldi	r20, 0x7F	; 127
    4a84:	57 e4       	ldi	r21, 0x47	; 71
    4a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a8a:	18 16       	cp	r1, r24
    4a8c:	0c f0       	brlt	.+2      	; 0x4a90 <main+0xd72>
    4a8e:	43 c0       	rjmp	.+134    	; 0x4b16 <main+0xdf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a90:	fe 01       	movw	r30, r28
    4a92:	e5 58       	subi	r30, 0x85	; 133
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	60 81       	ld	r22, Z
    4a98:	71 81       	ldd	r23, Z+1	; 0x01
    4a9a:	82 81       	ldd	r24, Z+2	; 0x02
    4a9c:	93 81       	ldd	r25, Z+3	; 0x03
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e2       	ldi	r20, 0x20	; 32
    4aa4:	51 e4       	ldi	r21, 0x41	; 65
    4aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	8e 01       	movw	r16, r28
    4ab0:	0b 58       	subi	r16, 0x8B	; 139
    4ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab4:	bc 01       	movw	r22, r24
    4ab6:	cd 01       	movw	r24, r26
    4ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	f8 01       	movw	r30, r16
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
    4ac6:	1f c0       	rjmp	.+62     	; 0x4b06 <main+0xde8>
    4ac8:	fe 01       	movw	r30, r28
    4aca:	ed 58       	subi	r30, 0x8D	; 141
    4acc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ace:	88 ec       	ldi	r24, 0xC8	; 200
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	80 83       	st	Z, r24
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	ed 58       	subi	r30, 0x8D	; 141
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	80 81       	ld	r24, Z
    4ade:	91 81       	ldd	r25, Z+1	; 0x01
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <main+0xdc2>
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	ed 58       	subi	r30, 0x8D	; 141
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	91 83       	std	Z+1, r25	; 0x01
    4aec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aee:	de 01       	movw	r26, r28
    4af0:	ab 58       	subi	r26, 0x8B	; 139
    4af2:	bf 4f       	sbci	r27, 0xFF	; 255
    4af4:	fe 01       	movw	r30, r28
    4af6:	eb 58       	subi	r30, 0x8B	; 139
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 81       	ld	r24, Z
    4afc:	91 81       	ldd	r25, Z+1	; 0x01
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	11 96       	adiw	r26, 0x01	; 1
    4b02:	9c 93       	st	X, r25
    4b04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b06:	fe 01       	movw	r30, r28
    4b08:	eb 58       	subi	r30, 0x8B	; 139
    4b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0c:	80 81       	ld	r24, Z
    4b0e:	91 81       	ldd	r25, Z+1	; 0x01
    4b10:	00 97       	sbiw	r24, 0x00	; 0
    4b12:	d1 f6       	brne	.-76     	; 0x4ac8 <main+0xdaa>
    4b14:	27 c0       	rjmp	.+78     	; 0x4b64 <main+0xe46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b16:	8e 01       	movw	r16, r28
    4b18:	0b 58       	subi	r16, 0x8B	; 139
    4b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	e9 58       	subi	r30, 0x89	; 137
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	60 81       	ld	r22, Z
    4b24:	71 81       	ldd	r23, Z+1	; 0x01
    4b26:	82 81       	ldd	r24, Z+2	; 0x02
    4b28:	93 81       	ldd	r25, Z+3	; 0x03
    4b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	f8 01       	movw	r30, r16
    4b34:	91 83       	std	Z+1, r25	; 0x01
    4b36:	80 83       	st	Z, r24
    4b38:	de 01       	movw	r26, r28
    4b3a:	af 58       	subi	r26, 0x8F	; 143
    4b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b3e:	fe 01       	movw	r30, r28
    4b40:	eb 58       	subi	r30, 0x8B	; 139
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	80 81       	ld	r24, Z
    4b46:	91 81       	ldd	r25, Z+1	; 0x01
    4b48:	8d 93       	st	X+, r24
    4b4a:	9c 93       	st	X, r25
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	ef 58       	subi	r30, 0x8F	; 143
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	80 81       	ld	r24, Z
    4b54:	91 81       	ldd	r25, Z+1	; 0x01
    4b56:	01 97       	sbiw	r24, 0x01	; 1
    4b58:	f1 f7       	brne	.-4      	; 0x4b56 <main+0xe38>
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	ef 58       	subi	r30, 0x8F	; 143
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	91 83       	std	Z+1, r25	; 0x01
    4b62:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4b64:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Light Sys ON");
    4b68:	80 ec       	ldi	r24, 0xC0	; 192
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    4b70:	fe 01       	movw	r30, r28
    4b72:	e3 59       	subi	r30, 0x93	; 147
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e8       	ldi	r25, 0x80	; 128
    4b7a:	ab e3       	ldi	r26, 0x3B	; 59
    4b7c:	b5 e4       	ldi	r27, 0x45	; 69
    4b7e:	80 83       	st	Z, r24
    4b80:	91 83       	std	Z+1, r25	; 0x01
    4b82:	a2 83       	std	Z+2, r26	; 0x02
    4b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b86:	8e 01       	movw	r16, r28
    4b88:	07 59       	subi	r16, 0x97	; 151
    4b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e3 59       	subi	r30, 0x93	; 147
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4a ef       	ldi	r20, 0xFA	; 250
    4ba0:	54 e4       	ldi	r21, 0x44	; 68
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	f8 01       	movw	r30, r16
    4bac:	80 83       	st	Z, r24
    4bae:	91 83       	std	Z+1, r25	; 0x01
    4bb0:	a2 83       	std	Z+2, r26	; 0x02
    4bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e7 59       	subi	r30, 0x97	; 151
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	60 81       	ld	r22, Z
    4bbc:	71 81       	ldd	r23, Z+1	; 0x01
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	93 81       	ldd	r25, Z+3	; 0x03
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e8       	ldi	r20, 0x80	; 128
    4bc8:	5f e3       	ldi	r21, 0x3F	; 63
    4bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bce:	88 23       	and	r24, r24
    4bd0:	44 f4       	brge	.+16     	; 0x4be2 <main+0xec4>
		__ticks = 1;
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e9 59       	subi	r30, 0x99	; 153
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
    4be0:	64 c0       	rjmp	.+200    	; 0x4caa <main+0xf8c>
	else if (__tmp > 65535)
    4be2:	fe 01       	movw	r30, r28
    4be4:	e7 59       	subi	r30, 0x97	; 151
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	60 81       	ld	r22, Z
    4bea:	71 81       	ldd	r23, Z+1	; 0x01
    4bec:	82 81       	ldd	r24, Z+2	; 0x02
    4bee:	93 81       	ldd	r25, Z+3	; 0x03
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	3f ef       	ldi	r19, 0xFF	; 255
    4bf4:	4f e7       	ldi	r20, 0x7F	; 127
    4bf6:	57 e4       	ldi	r21, 0x47	; 71
    4bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bfc:	18 16       	cp	r1, r24
    4bfe:	0c f0       	brlt	.+2      	; 0x4c02 <main+0xee4>
    4c00:	43 c0       	rjmp	.+134    	; 0x4c88 <main+0xf6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c02:	fe 01       	movw	r30, r28
    4c04:	e3 59       	subi	r30, 0x93	; 147
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	60 81       	ld	r22, Z
    4c0a:	71 81       	ldd	r23, Z+1	; 0x01
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e2       	ldi	r20, 0x20	; 32
    4c16:	51 e4       	ldi	r21, 0x41	; 65
    4c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	8e 01       	movw	r16, r28
    4c22:	09 59       	subi	r16, 0x99	; 153
    4c24:	1f 4f       	sbci	r17, 0xFF	; 255
    4c26:	bc 01       	movw	r22, r24
    4c28:	cd 01       	movw	r24, r26
    4c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	f8 01       	movw	r30, r16
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	80 83       	st	Z, r24
    4c38:	1f c0       	rjmp	.+62     	; 0x4c78 <main+0xf5a>
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	eb 59       	subi	r30, 0x9B	; 155
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	88 ec       	ldi	r24, 0xC8	; 200
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	91 83       	std	Z+1, r25	; 0x01
    4c46:	80 83       	st	Z, r24
    4c48:	fe 01       	movw	r30, r28
    4c4a:	eb 59       	subi	r30, 0x9B	; 155
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	91 81       	ldd	r25, Z+1	; 0x01
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <main+0xf34>
    4c56:	fe 01       	movw	r30, r28
    4c58:	eb 59       	subi	r30, 0x9B	; 155
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c60:	de 01       	movw	r26, r28
    4c62:	a9 59       	subi	r26, 0x99	; 153
    4c64:	bf 4f       	sbci	r27, 0xFF	; 255
    4c66:	fe 01       	movw	r30, r28
    4c68:	e9 59       	subi	r30, 0x99	; 153
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	80 81       	ld	r24, Z
    4c6e:	91 81       	ldd	r25, Z+1	; 0x01
    4c70:	01 97       	sbiw	r24, 0x01	; 1
    4c72:	11 96       	adiw	r26, 0x01	; 1
    4c74:	9c 93       	st	X, r25
    4c76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e9 59       	subi	r30, 0x99	; 153
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	80 81       	ld	r24, Z
    4c80:	91 81       	ldd	r25, Z+1	; 0x01
    4c82:	00 97       	sbiw	r24, 0x00	; 0
    4c84:	d1 f6       	brne	.-76     	; 0x4c3a <main+0xf1c>
    4c86:	27 c0       	rjmp	.+78     	; 0x4cd6 <main+0xfb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c88:	8e 01       	movw	r16, r28
    4c8a:	09 59       	subi	r16, 0x99	; 153
    4c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e7 59       	subi	r30, 0x97	; 151
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	60 81       	ld	r22, Z
    4c96:	71 81       	ldd	r23, Z+1	; 0x01
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	91 83       	std	Z+1, r25	; 0x01
    4ca8:	80 83       	st	Z, r24
    4caa:	de 01       	movw	r26, r28
    4cac:	ad 59       	subi	r26, 0x9D	; 157
    4cae:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	e9 59       	subi	r30, 0x99	; 153
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	80 81       	ld	r24, Z
    4cb8:	91 81       	ldd	r25, Z+1	; 0x01
    4cba:	8d 93       	st	X+, r24
    4cbc:	9c 93       	st	X, r25
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	ed 59       	subi	r30, 0x9D	; 157
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 81       	ld	r24, Z
    4cc6:	91 81       	ldd	r25, Z+1	; 0x01
    4cc8:	01 97       	sbiw	r24, 0x01	; 1
    4cca:	f1 f7       	brne	.-4      	; 0x4cc8 <main+0xfaa>
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ed 59       	subi	r30, 0x9D	; 157
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4cd6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Temp Sys ON");
    4cda:	8d ec       	ldi	r24, 0xCD	; 205
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e1 5a       	subi	r30, 0xA1	; 161
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e8       	ldi	r25, 0x80	; 128
    4cec:	ab e3       	ldi	r26, 0x3B	; 59
    4cee:	b5 e4       	ldi	r27, 0x45	; 69
    4cf0:	80 83       	st	Z, r24
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	a2 83       	std	Z+2, r26	; 0x02
    4cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf8:	8e 01       	movw	r16, r28
    4cfa:	05 5a       	subi	r16, 0xA5	; 165
    4cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfe:	fe 01       	movw	r30, r28
    4d00:	e1 5a       	subi	r30, 0xA1	; 161
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	60 81       	ld	r22, Z
    4d06:	71 81       	ldd	r23, Z+1	; 0x01
    4d08:	82 81       	ldd	r24, Z+2	; 0x02
    4d0a:	93 81       	ldd	r25, Z+3	; 0x03
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	4a ef       	ldi	r20, 0xFA	; 250
    4d12:	54 e4       	ldi	r21, 0x44	; 68
    4d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	f8 01       	movw	r30, r16
    4d1e:	80 83       	st	Z, r24
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	a2 83       	std	Z+2, r26	; 0x02
    4d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d26:	fe 01       	movw	r30, r28
    4d28:	e5 5a       	subi	r30, 0xA5	; 165
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	60 81       	ld	r22, Z
    4d2e:	71 81       	ldd	r23, Z+1	; 0x01
    4d30:	82 81       	ldd	r24, Z+2	; 0x02
    4d32:	93 81       	ldd	r25, Z+3	; 0x03
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e8       	ldi	r20, 0x80	; 128
    4d3a:	5f e3       	ldi	r21, 0x3F	; 63
    4d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d40:	88 23       	and	r24, r24
    4d42:	44 f4       	brge	.+16     	; 0x4d54 <main+0x1036>
		__ticks = 1;
    4d44:	fe 01       	movw	r30, r28
    4d46:	e7 5a       	subi	r30, 0xA7	; 167
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	80 83       	st	Z, r24
    4d52:	64 c0       	rjmp	.+200    	; 0x4e1c <main+0x10fe>
	else if (__tmp > 65535)
    4d54:	fe 01       	movw	r30, r28
    4d56:	e5 5a       	subi	r30, 0xA5	; 165
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	60 81       	ld	r22, Z
    4d5c:	71 81       	ldd	r23, Z+1	; 0x01
    4d5e:	82 81       	ldd	r24, Z+2	; 0x02
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	3f ef       	ldi	r19, 0xFF	; 255
    4d66:	4f e7       	ldi	r20, 0x7F	; 127
    4d68:	57 e4       	ldi	r21, 0x47	; 71
    4d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d6e:	18 16       	cp	r1, r24
    4d70:	0c f0       	brlt	.+2      	; 0x4d74 <main+0x1056>
    4d72:	43 c0       	rjmp	.+134    	; 0x4dfa <main+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d74:	fe 01       	movw	r30, r28
    4d76:	e1 5a       	subi	r30, 0xA1	; 161
    4d78:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7a:	60 81       	ld	r22, Z
    4d7c:	71 81       	ldd	r23, Z+1	; 0x01
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	40 e2       	ldi	r20, 0x20	; 32
    4d88:	51 e4       	ldi	r21, 0x41	; 65
    4d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	8e 01       	movw	r16, r28
    4d94:	07 5a       	subi	r16, 0xA7	; 167
    4d96:	1f 4f       	sbci	r17, 0xFF	; 255
    4d98:	bc 01       	movw	r22, r24
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	f8 01       	movw	r30, r16
    4da6:	91 83       	std	Z+1, r25	; 0x01
    4da8:	80 83       	st	Z, r24
    4daa:	1f c0       	rjmp	.+62     	; 0x4dea <main+0x10cc>
    4dac:	fe 01       	movw	r30, r28
    4dae:	e9 5a       	subi	r30, 0xA9	; 169
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	88 ec       	ldi	r24, 0xC8	; 200
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	91 83       	std	Z+1, r25	; 0x01
    4db8:	80 83       	st	Z, r24
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e9 5a       	subi	r30, 0xA9	; 169
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 81       	ld	r24, Z
    4dc2:	91 81       	ldd	r25, Z+1	; 0x01
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <main+0x10a6>
    4dc8:	fe 01       	movw	r30, r28
    4dca:	e9 5a       	subi	r30, 0xA9	; 169
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	91 83       	std	Z+1, r25	; 0x01
    4dd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd2:	de 01       	movw	r26, r28
    4dd4:	a7 5a       	subi	r26, 0xA7	; 167
    4dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e7 5a       	subi	r30, 0xA7	; 167
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	11 96       	adiw	r26, 0x01	; 1
    4de6:	9c 93       	st	X, r25
    4de8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	fe 01       	movw	r30, r28
    4dec:	e7 5a       	subi	r30, 0xA7	; 167
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 81       	ld	r24, Z
    4df2:	91 81       	ldd	r25, Z+1	; 0x01
    4df4:	00 97       	sbiw	r24, 0x00	; 0
    4df6:	d1 f6       	brne	.-76     	; 0x4dac <main+0x108e>
    4df8:	27 c0       	rjmp	.+78     	; 0x4e48 <main+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfa:	8e 01       	movw	r16, r28
    4dfc:	07 5a       	subi	r16, 0xA7	; 167
    4dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    4e00:	fe 01       	movw	r30, r28
    4e02:	e5 5a       	subi	r30, 0xA5	; 165
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	60 81       	ld	r22, Z
    4e08:	71 81       	ldd	r23, Z+1	; 0x01
    4e0a:	82 81       	ldd	r24, Z+2	; 0x02
    4e0c:	93 81       	ldd	r25, Z+3	; 0x03
    4e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	f8 01       	movw	r30, r16
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	de 01       	movw	r26, r28
    4e1e:	ab 5a       	subi	r26, 0xAB	; 171
    4e20:	bf 4f       	sbci	r27, 0xFF	; 255
    4e22:	fe 01       	movw	r30, r28
    4e24:	e7 5a       	subi	r30, 0xA7	; 167
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	80 81       	ld	r24, Z
    4e2a:	91 81       	ldd	r25, Z+1	; 0x01
    4e2c:	8d 93       	st	X+, r24
    4e2e:	9c 93       	st	X, r25
    4e30:	fe 01       	movw	r30, r28
    4e32:	eb 5a       	subi	r30, 0xAB	; 171
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	80 81       	ld	r24, Z
    4e38:	91 81       	ldd	r25, Z+1	; 0x01
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	f1 f7       	brne	.-4      	; 0x4e3a <main+0x111c>
    4e3e:	fe 01       	movw	r30, r28
    4e40:	eb 5a       	subi	r30, 0xAB	; 171
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	91 83       	std	Z+1, r25	; 0x01
    4e46:	80 83       	st	Z, r24
			_delay_ms(3000);
			LCD_voidCLR();
    4e48:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
			LCD_voidSendString("Have a nice day");
    4e4c:	89 ed       	ldi	r24, 0xD9	; 217
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
    4e54:	fe 01       	movw	r30, r28
    4e56:	ef 5a       	subi	r30, 0xAF	; 175
    4e58:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	aa e7       	ldi	r26, 0x7A	; 122
    4e60:	b4 e4       	ldi	r27, 0x44	; 68
    4e62:	80 83       	st	Z, r24
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	a2 83       	std	Z+2, r26	; 0x02
    4e68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e6a:	8e 01       	movw	r16, r28
    4e6c:	03 5b       	subi	r16, 0xB3	; 179
    4e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e70:	fe 01       	movw	r30, r28
    4e72:	ef 5a       	subi	r30, 0xAF	; 175
    4e74:	ff 4f       	sbci	r31, 0xFF	; 255
    4e76:	60 81       	ld	r22, Z
    4e78:	71 81       	ldd	r23, Z+1	; 0x01
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	4a ef       	ldi	r20, 0xFA	; 250
    4e84:	54 e4       	ldi	r21, 0x44	; 68
    4e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	cb 01       	movw	r24, r22
    4e8e:	f8 01       	movw	r30, r16
    4e90:	80 83       	st	Z, r24
    4e92:	91 83       	std	Z+1, r25	; 0x01
    4e94:	a2 83       	std	Z+2, r26	; 0x02
    4e96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e98:	fe 01       	movw	r30, r28
    4e9a:	e3 5b       	subi	r30, 0xB3	; 179
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	60 81       	ld	r22, Z
    4ea0:	71 81       	ldd	r23, Z+1	; 0x01
    4ea2:	82 81       	ldd	r24, Z+2	; 0x02
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	40 e8       	ldi	r20, 0x80	; 128
    4eac:	5f e3       	ldi	r21, 0x3F	; 63
    4eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eb2:	88 23       	and	r24, r24
    4eb4:	44 f4       	brge	.+16     	; 0x4ec6 <main+0x11a8>
		__ticks = 1;
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	e5 5b       	subi	r30, 0xB5	; 181
    4eba:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	91 83       	std	Z+1, r25	; 0x01
    4ec2:	80 83       	st	Z, r24
    4ec4:	64 c0       	rjmp	.+200    	; 0x4f8e <main+0x1270>
	else if (__tmp > 65535)
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	e3 5b       	subi	r30, 0xB3	; 179
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	60 81       	ld	r22, Z
    4ece:	71 81       	ldd	r23, Z+1	; 0x01
    4ed0:	82 81       	ldd	r24, Z+2	; 0x02
    4ed2:	93 81       	ldd	r25, Z+3	; 0x03
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	3f ef       	ldi	r19, 0xFF	; 255
    4ed8:	4f e7       	ldi	r20, 0x7F	; 127
    4eda:	57 e4       	ldi	r21, 0x47	; 71
    4edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ee0:	18 16       	cp	r1, r24
    4ee2:	0c f0       	brlt	.+2      	; 0x4ee6 <main+0x11c8>
    4ee4:	43 c0       	rjmp	.+134    	; 0x4f6c <main+0x124e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	ef 5a       	subi	r30, 0xAF	; 175
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e2       	ldi	r20, 0x20	; 32
    4efa:	51 e4       	ldi	r21, 0x41	; 65
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	8e 01       	movw	r16, r28
    4f06:	05 5b       	subi	r16, 0xB5	; 181
    4f08:	1f 4f       	sbci	r17, 0xFF	; 255
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	cd 01       	movw	r24, r26
    4f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	f8 01       	movw	r30, r16
    4f18:	91 83       	std	Z+1, r25	; 0x01
    4f1a:	80 83       	st	Z, r24
    4f1c:	1f c0       	rjmp	.+62     	; 0x4f5c <main+0x123e>
    4f1e:	fe 01       	movw	r30, r28
    4f20:	e7 5b       	subi	r30, 0xB7	; 183
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	88 ec       	ldi	r24, 0xC8	; 200
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	91 83       	std	Z+1, r25	; 0x01
    4f2a:	80 83       	st	Z, r24
    4f2c:	fe 01       	movw	r30, r28
    4f2e:	e7 5b       	subi	r30, 0xB7	; 183
    4f30:	ff 4f       	sbci	r31, 0xFF	; 255
    4f32:	80 81       	ld	r24, Z
    4f34:	91 81       	ldd	r25, Z+1	; 0x01
    4f36:	01 97       	sbiw	r24, 0x01	; 1
    4f38:	f1 f7       	brne	.-4      	; 0x4f36 <main+0x1218>
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e7 5b       	subi	r30, 0xB7	; 183
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	91 83       	std	Z+1, r25	; 0x01
    4f42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f44:	de 01       	movw	r26, r28
    4f46:	a5 5b       	subi	r26, 0xB5	; 181
    4f48:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	e5 5b       	subi	r30, 0xB5	; 181
    4f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f50:	80 81       	ld	r24, Z
    4f52:	91 81       	ldd	r25, Z+1	; 0x01
    4f54:	01 97       	sbiw	r24, 0x01	; 1
    4f56:	11 96       	adiw	r26, 0x01	; 1
    4f58:	9c 93       	st	X, r25
    4f5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	e5 5b       	subi	r30, 0xB5	; 181
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	80 81       	ld	r24, Z
    4f64:	91 81       	ldd	r25, Z+1	; 0x01
    4f66:	00 97       	sbiw	r24, 0x00	; 0
    4f68:	d1 f6       	brne	.-76     	; 0x4f1e <main+0x1200>
    4f6a:	27 c0       	rjmp	.+78     	; 0x4fba <main+0x129c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6c:	8e 01       	movw	r16, r28
    4f6e:	05 5b       	subi	r16, 0xB5	; 181
    4f70:	1f 4f       	sbci	r17, 0xFF	; 255
    4f72:	fe 01       	movw	r30, r28
    4f74:	e3 5b       	subi	r30, 0xB3	; 179
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	60 81       	ld	r22, Z
    4f7a:	71 81       	ldd	r23, Z+1	; 0x01
    4f7c:	82 81       	ldd	r24, Z+2	; 0x02
    4f7e:	93 81       	ldd	r25, Z+3	; 0x03
    4f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	f8 01       	movw	r30, r16
    4f8a:	91 83       	std	Z+1, r25	; 0x01
    4f8c:	80 83       	st	Z, r24
    4f8e:	de 01       	movw	r26, r28
    4f90:	a9 5b       	subi	r26, 0xB9	; 185
    4f92:	bf 4f       	sbci	r27, 0xFF	; 255
    4f94:	fe 01       	movw	r30, r28
    4f96:	e5 5b       	subi	r30, 0xB5	; 181
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	80 81       	ld	r24, Z
    4f9c:	91 81       	ldd	r25, Z+1	; 0x01
    4f9e:	8d 93       	st	X+, r24
    4fa0:	9c 93       	st	X, r25
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e9 5b       	subi	r30, 0xB9	; 185
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <main+0x128e>
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e9 5b       	subi	r30, 0xB9	; 185
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	91 83       	std	Z+1, r25	; 0x01
    4fb8:	80 83       	st	Z, r24
			_delay_ms(1000);
			while(1)
			{


				Read1 = ADC_voidGetAnalogRead(ADC3);
    4fba:	83 e0       	ldi	r24, 0x03	; 3
    4fbc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <ADC_voidGetAnalogRead>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	ed 50       	subi	r30, 0x0D	; 13
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	80 83       	st	Z, r24
    4fcc:	91 83       	std	Z+1, r25	; 0x01
    4fce:	a2 83       	std	Z+2, r26	; 0x02
    4fd0:	b3 83       	std	Z+3, r27	; 0x03
				if(Read1>=2753)
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ed 50       	subi	r30, 0x0D	; 13
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	a2 81       	ldd	r26, Z+2	; 0x02
    4fde:	b3 81       	ldd	r27, Z+3	; 0x03
    4fe0:	81 3c       	cpi	r24, 0xC1	; 193
    4fe2:	fa e0       	ldi	r31, 0x0A	; 10
    4fe4:	9f 07       	cpc	r25, r31
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	af 07       	cpc	r26, r31
    4fea:	f0 e0       	ldi	r31, 0x00	; 0
    4fec:	bf 07       	cpc	r27, r31
    4fee:	08 f4       	brcc	.+2      	; 0x4ff2 <main+0x12d4>
    4ff0:	90 c0       	rjmp	.+288    	; 0x5112 <main+0x13f4>
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	ed 5b       	subi	r30, 0xBD	; 189
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	aa e7       	ldi	r26, 0x7A	; 122
    4ffe:	b4 e4       	ldi	r27, 0x44	; 68
    5000:	80 83       	st	Z, r24
    5002:	91 83       	std	Z+1, r25	; 0x01
    5004:	a2 83       	std	Z+2, r26	; 0x02
    5006:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5008:	8e 01       	movw	r16, r28
    500a:	01 5c       	subi	r16, 0xC1	; 193
    500c:	1f 4f       	sbci	r17, 0xFF	; 255
    500e:	fe 01       	movw	r30, r28
    5010:	ed 5b       	subi	r30, 0xBD	; 189
    5012:	ff 4f       	sbci	r31, 0xFF	; 255
    5014:	60 81       	ld	r22, Z
    5016:	71 81       	ldd	r23, Z+1	; 0x01
    5018:	82 81       	ldd	r24, Z+2	; 0x02
    501a:	93 81       	ldd	r25, Z+3	; 0x03
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	4a ef       	ldi	r20, 0xFA	; 250
    5022:	54 e4       	ldi	r21, 0x44	; 68
    5024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	f8 01       	movw	r30, r16
    502e:	80 83       	st	Z, r24
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	a2 83       	std	Z+2, r26	; 0x02
    5034:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5036:	fe 01       	movw	r30, r28
    5038:	ff 96       	adiw	r30, 0x3f	; 63
    503a:	60 81       	ld	r22, Z
    503c:	71 81       	ldd	r23, Z+1	; 0x01
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	93 81       	ldd	r25, Z+3	; 0x03
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	40 e8       	ldi	r20, 0x80	; 128
    5048:	5f e3       	ldi	r21, 0x3F	; 63
    504a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    504e:	88 23       	and	r24, r24
    5050:	2c f4       	brge	.+10     	; 0x505c <main+0x133e>
		__ticks = 1;
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	9e af       	std	Y+62, r25	; 0x3e
    5058:	8d af       	std	Y+61, r24	; 0x3d
    505a:	46 c0       	rjmp	.+140    	; 0x50e8 <main+0x13ca>
	else if (__tmp > 65535)
    505c:	fe 01       	movw	r30, r28
    505e:	ff 96       	adiw	r30, 0x3f	; 63
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	82 81       	ldd	r24, Z+2	; 0x02
    5066:	93 81       	ldd	r25, Z+3	; 0x03
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	3f ef       	ldi	r19, 0xFF	; 255
    506c:	4f e7       	ldi	r20, 0x7F	; 127
    506e:	57 e4       	ldi	r21, 0x47	; 71
    5070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5074:	18 16       	cp	r1, r24
    5076:	64 f5       	brge	.+88     	; 0x50d0 <main+0x13b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5078:	fe 01       	movw	r30, r28
    507a:	ed 5b       	subi	r30, 0xBD	; 189
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	60 81       	ld	r22, Z
    5080:	71 81       	ldd	r23, Z+1	; 0x01
    5082:	82 81       	ldd	r24, Z+2	; 0x02
    5084:	93 81       	ldd	r25, Z+3	; 0x03
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	30 e0       	ldi	r19, 0x00	; 0
    508a:	40 e2       	ldi	r20, 0x20	; 32
    508c:	51 e4       	ldi	r21, 0x41	; 65
    508e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5092:	dc 01       	movw	r26, r24
    5094:	cb 01       	movw	r24, r22
    5096:	bc 01       	movw	r22, r24
    5098:	cd 01       	movw	r24, r26
    509a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	9e af       	std	Y+62, r25	; 0x3e
    50a4:	8d af       	std	Y+61, r24	; 0x3d
    50a6:	0f c0       	rjmp	.+30     	; 0x50c6 <main+0x13a8>
    50a8:	88 ec       	ldi	r24, 0xC8	; 200
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	9c af       	std	Y+60, r25	; 0x3c
    50ae:	8b af       	std	Y+59, r24	; 0x3b
    50b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    50b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    50b4:	01 97       	sbiw	r24, 0x01	; 1
    50b6:	f1 f7       	brne	.-4      	; 0x50b4 <main+0x1396>
    50b8:	9c af       	std	Y+60, r25	; 0x3c
    50ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    50be:	9e ad       	ldd	r25, Y+62	; 0x3e
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	9e af       	std	Y+62, r25	; 0x3e
    50c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    50c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	69 f7       	brne	.-38     	; 0x50a8 <main+0x138a>
    50ce:	16 c0       	rjmp	.+44     	; 0x50fc <main+0x13de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d0:	fe 01       	movw	r30, r28
    50d2:	ff 96       	adiw	r30, 0x3f	; 63
    50d4:	60 81       	ld	r22, Z
    50d6:	71 81       	ldd	r23, Z+1	; 0x01
    50d8:	82 81       	ldd	r24, Z+2	; 0x02
    50da:	93 81       	ldd	r25, Z+3	; 0x03
    50dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9e af       	std	Y+62, r25	; 0x3e
    50e6:	8d af       	std	Y+61, r24	; 0x3d
    50e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    50ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    50ec:	9a af       	std	Y+58, r25	; 0x3a
    50ee:	89 af       	std	Y+57, r24	; 0x39
    50f0:	89 ad       	ldd	r24, Y+57	; 0x39
    50f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	f1 f7       	brne	.-4      	; 0x50f4 <main+0x13d6>
    50f8:	9a af       	std	Y+58, r25	; 0x3a
    50fa:	89 af       	std	Y+57, r24	; 0x39
				{
					_delay_ms(1000);
					DIO_voidSetPinDirection(PORTA,PIN0 , OUTPUT);
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	41 e0       	ldi	r20, 0x01	; 1
    5102:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
					DIO_voidSetPinvalue(PORTA , PIN0 , HIGH);
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	60 e0       	ldi	r22, 0x00	; 0
    510a:	41 e0       	ldi	r20, 0x01	; 1
    510c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    5110:	81 c0       	rjmp	.+258    	; 0x5214 <main+0x14f6>
    5112:	80 e0       	ldi	r24, 0x00	; 0
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	aa e7       	ldi	r26, 0x7A	; 122
    5118:	b4 e4       	ldi	r27, 0x44	; 68
    511a:	8d ab       	std	Y+53, r24	; 0x35
    511c:	9e ab       	std	Y+54, r25	; 0x36
    511e:	af ab       	std	Y+55, r26	; 0x37
    5120:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5122:	6d a9       	ldd	r22, Y+53	; 0x35
    5124:	7e a9       	ldd	r23, Y+54	; 0x36
    5126:	8f a9       	ldd	r24, Y+55	; 0x37
    5128:	98 ad       	ldd	r25, Y+56	; 0x38
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	4a ef       	ldi	r20, 0xFA	; 250
    5130:	54 e4       	ldi	r21, 0x44	; 68
    5132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5136:	dc 01       	movw	r26, r24
    5138:	cb 01       	movw	r24, r22
    513a:	89 ab       	std	Y+49, r24	; 0x31
    513c:	9a ab       	std	Y+50, r25	; 0x32
    513e:	ab ab       	std	Y+51, r26	; 0x33
    5140:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5142:	69 a9       	ldd	r22, Y+49	; 0x31
    5144:	7a a9       	ldd	r23, Y+50	; 0x32
    5146:	8b a9       	ldd	r24, Y+51	; 0x33
    5148:	9c a9       	ldd	r25, Y+52	; 0x34
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	40 e8       	ldi	r20, 0x80	; 128
    5150:	5f e3       	ldi	r21, 0x3F	; 63
    5152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5156:	88 23       	and	r24, r24
    5158:	2c f4       	brge	.+10     	; 0x5164 <main+0x1446>
		__ticks = 1;
    515a:	81 e0       	ldi	r24, 0x01	; 1
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	98 ab       	std	Y+48, r25	; 0x30
    5160:	8f a7       	std	Y+47, r24	; 0x2f
    5162:	3f c0       	rjmp	.+126    	; 0x51e2 <main+0x14c4>
	else if (__tmp > 65535)
    5164:	69 a9       	ldd	r22, Y+49	; 0x31
    5166:	7a a9       	ldd	r23, Y+50	; 0x32
    5168:	8b a9       	ldd	r24, Y+51	; 0x33
    516a:	9c a9       	ldd	r25, Y+52	; 0x34
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	3f ef       	ldi	r19, 0xFF	; 255
    5170:	4f e7       	ldi	r20, 0x7F	; 127
    5172:	57 e4       	ldi	r21, 0x47	; 71
    5174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5178:	18 16       	cp	r1, r24
    517a:	4c f5       	brge	.+82     	; 0x51ce <main+0x14b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    517c:	6d a9       	ldd	r22, Y+53	; 0x35
    517e:	7e a9       	ldd	r23, Y+54	; 0x36
    5180:	8f a9       	ldd	r24, Y+55	; 0x37
    5182:	98 ad       	ldd	r25, Y+56	; 0x38
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e2       	ldi	r20, 0x20	; 32
    518a:	51 e4       	ldi	r21, 0x41	; 65
    518c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	bc 01       	movw	r22, r24
    5196:	cd 01       	movw	r24, r26
    5198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	98 ab       	std	Y+48, r25	; 0x30
    51a2:	8f a7       	std	Y+47, r24	; 0x2f
    51a4:	0f c0       	rjmp	.+30     	; 0x51c4 <main+0x14a6>
    51a6:	88 ec       	ldi	r24, 0xC8	; 200
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	9e a7       	std	Y+46, r25	; 0x2e
    51ac:	8d a7       	std	Y+45, r24	; 0x2d
    51ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    51b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	f1 f7       	brne	.-4      	; 0x51b2 <main+0x1494>
    51b6:	9e a7       	std	Y+46, r25	; 0x2e
    51b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    51bc:	98 a9       	ldd	r25, Y+48	; 0x30
    51be:	01 97       	sbiw	r24, 0x01	; 1
    51c0:	98 ab       	std	Y+48, r25	; 0x30
    51c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    51c6:	98 a9       	ldd	r25, Y+48	; 0x30
    51c8:	00 97       	sbiw	r24, 0x00	; 0
    51ca:	69 f7       	brne	.-38     	; 0x51a6 <main+0x1488>
    51cc:	14 c0       	rjmp	.+40     	; 0x51f6 <main+0x14d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ce:	69 a9       	ldd	r22, Y+49	; 0x31
    51d0:	7a a9       	ldd	r23, Y+50	; 0x32
    51d2:	8b a9       	ldd	r24, Y+51	; 0x33
    51d4:	9c a9       	ldd	r25, Y+52	; 0x34
    51d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	98 ab       	std	Y+48, r25	; 0x30
    51e0:	8f a7       	std	Y+47, r24	; 0x2f
    51e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    51e4:	98 a9       	ldd	r25, Y+48	; 0x30
    51e6:	9c a7       	std	Y+44, r25	; 0x2c
    51e8:	8b a7       	std	Y+43, r24	; 0x2b
    51ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    51ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	f1 f7       	brne	.-4      	; 0x51ee <main+0x14d0>
    51f2:	9c a7       	std	Y+44, r25	; 0x2c
    51f4:	8b a7       	std	Y+43, r24	; 0x2b
				}
				else
				{
					_delay_ms(1000);
					DIO_voidSetPinDirection(PORTA,PIN0 , OUTPUT);
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	60 e0       	ldi	r22, 0x00	; 0
    51fa:	41 e0       	ldi	r20, 0x01	; 1
    51fc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_voidSetPinDirection>
					DIO_voidSetPinvalue(PORTA , PIN0 , LOW);
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	40 e0       	ldi	r20, 0x00	; 0
    5206:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
					STP_voidDirectionAngle(ClockWise , 120) ;
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	68 e7       	ldi	r22, 0x78	; 120
    520e:	70 e0       	ldi	r23, 0x00	; 0
    5210:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <STP_voidDirectionAngle>
				}

				Read2 = ADC_voidGetAnalogRead(ADC2);
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <ADC_voidGetAnalogRead>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	fe 01       	movw	r30, r28
    5220:	eb 51       	subi	r30, 0x1B	; 27
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	80 83       	st	Z, r24
    5226:	91 83       	std	Z+1, r25	; 0x01
    5228:	a2 83       	std	Z+2, r26	; 0x02
    522a:	b3 83       	std	Z+3, r27	; 0x03
				Temp = Read2 / 10 ;
    522c:	8e 01       	movw	r16, r28
    522e:	0f 51       	subi	r16, 0x1F	; 31
    5230:	1f 4f       	sbci	r17, 0xFF	; 255
    5232:	fe 01       	movw	r30, r28
    5234:	eb 51       	subi	r30, 0x1B	; 27
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	80 81       	ld	r24, Z
    523a:	91 81       	ldd	r25, Z+1	; 0x01
    523c:	a2 81       	ldd	r26, Z+2	; 0x02
    523e:	b3 81       	ldd	r27, Z+3	; 0x03
    5240:	2a e0       	ldi	r18, 0x0A	; 10
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e0       	ldi	r20, 0x00	; 0
    5246:	50 e0       	ldi	r21, 0x00	; 0
    5248:	bc 01       	movw	r22, r24
    524a:	cd 01       	movw	r24, r26
    524c:	0e 94 b6 2b 	call	0x576c	; 0x576c <__udivmodsi4>
    5250:	da 01       	movw	r26, r20
    5252:	c9 01       	movw	r24, r18
    5254:	f8 01       	movw	r30, r16
    5256:	80 83       	st	Z, r24
    5258:	91 83       	std	Z+1, r25	; 0x01
    525a:	a2 83       	std	Z+2, r26	; 0x02
    525c:	b3 83       	std	Z+3, r27	; 0x03
				if(Temp>30&&Temp<50)
    525e:	fe 01       	movw	r30, r28
    5260:	ef 51       	subi	r30, 0x1F	; 31
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 81       	ld	r24, Z
    5266:	91 81       	ldd	r25, Z+1	; 0x01
    5268:	a2 81       	ldd	r26, Z+2	; 0x02
    526a:	b3 81       	ldd	r27, Z+3	; 0x03
    526c:	8f 31       	cpi	r24, 0x1F	; 31
    526e:	91 05       	cpc	r25, r1
    5270:	a1 05       	cpc	r26, r1
    5272:	b1 05       	cpc	r27, r1
    5274:	08 f4       	brcc	.+2      	; 0x5278 <main+0x155a>
    5276:	97 c0       	rjmp	.+302    	; 0x53a6 <main+0x1688>
    5278:	fe 01       	movw	r30, r28
    527a:	ef 51       	subi	r30, 0x1F	; 31
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	80 81       	ld	r24, Z
    5280:	91 81       	ldd	r25, Z+1	; 0x01
    5282:	a2 81       	ldd	r26, Z+2	; 0x02
    5284:	b3 81       	ldd	r27, Z+3	; 0x03
    5286:	82 33       	cpi	r24, 0x32	; 50
    5288:	91 05       	cpc	r25, r1
    528a:	a1 05       	cpc	r26, r1
    528c:	b1 05       	cpc	r27, r1
    528e:	08 f0       	brcs	.+2      	; 0x5292 <main+0x1574>
    5290:	8a c0       	rjmp	.+276    	; 0x53a6 <main+0x1688>
				{
					LCD_voidSendCommand(0xC0);
    5292:	80 ec       	ldi	r24, 0xC0	; 192
    5294:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <LCD_voidSendCommand>
					LCD_voidSendString("Temp = ");
    5298:	89 ee       	ldi	r24, 0xE9	; 233
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
                 LCD_voidSendNum(Temp);
    52a0:	fe 01       	movw	r30, r28
    52a2:	ef 51       	subi	r30, 0x1F	; 31
    52a4:	ff 4f       	sbci	r31, 0xFF	; 255
    52a6:	80 81       	ld	r24, Z
    52a8:	91 81       	ldd	r25, Z+1	; 0x01
    52aa:	a2 81       	ldd	r26, Z+2	; 0x02
    52ac:	b3 81       	ldd	r27, Z+3	; 0x03
    52ae:	bc 01       	movw	r22, r24
    52b0:	cd 01       	movw	r24, r26
    52b2:	0e 94 3d 1c 	call	0x387a	; 0x387a <LCD_voidSendNum>
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	aa e7       	ldi	r26, 0x7A	; 122
    52bc:	b4 e4       	ldi	r27, 0x44	; 68
    52be:	8f a3       	std	Y+39, r24	; 0x27
    52c0:	98 a7       	std	Y+40, r25	; 0x28
    52c2:	a9 a7       	std	Y+41, r26	; 0x29
    52c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52c6:	6f a1       	ldd	r22, Y+39	; 0x27
    52c8:	78 a5       	ldd	r23, Y+40	; 0x28
    52ca:	89 a5       	ldd	r24, Y+41	; 0x29
    52cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	4a ef       	ldi	r20, 0xFA	; 250
    52d4:	54 e4       	ldi	r21, 0x44	; 68
    52d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	8b a3       	std	Y+35, r24	; 0x23
    52e0:	9c a3       	std	Y+36, r25	; 0x24
    52e2:	ad a3       	std	Y+37, r26	; 0x25
    52e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52e6:	6b a1       	ldd	r22, Y+35	; 0x23
    52e8:	7c a1       	ldd	r23, Y+36	; 0x24
    52ea:	8d a1       	ldd	r24, Y+37	; 0x25
    52ec:	9e a1       	ldd	r25, Y+38	; 0x26
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	40 e8       	ldi	r20, 0x80	; 128
    52f4:	5f e3       	ldi	r21, 0x3F	; 63
    52f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52fa:	88 23       	and	r24, r24
    52fc:	2c f4       	brge	.+10     	; 0x5308 <main+0x15ea>
		__ticks = 1;
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	9a a3       	std	Y+34, r25	; 0x22
    5304:	89 a3       	std	Y+33, r24	; 0x21
    5306:	3f c0       	rjmp	.+126    	; 0x5386 <main+0x1668>
	else if (__tmp > 65535)
    5308:	6b a1       	ldd	r22, Y+35	; 0x23
    530a:	7c a1       	ldd	r23, Y+36	; 0x24
    530c:	8d a1       	ldd	r24, Y+37	; 0x25
    530e:	9e a1       	ldd	r25, Y+38	; 0x26
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	3f ef       	ldi	r19, 0xFF	; 255
    5314:	4f e7       	ldi	r20, 0x7F	; 127
    5316:	57 e4       	ldi	r21, 0x47	; 71
    5318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    531c:	18 16       	cp	r1, r24
    531e:	4c f5       	brge	.+82     	; 0x5372 <main+0x1654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5320:	6f a1       	ldd	r22, Y+39	; 0x27
    5322:	78 a5       	ldd	r23, Y+40	; 0x28
    5324:	89 a5       	ldd	r24, Y+41	; 0x29
    5326:	9a a5       	ldd	r25, Y+42	; 0x2a
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 e2       	ldi	r20, 0x20	; 32
    532e:	51 e4       	ldi	r21, 0x41	; 65
    5330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5334:	dc 01       	movw	r26, r24
    5336:	cb 01       	movw	r24, r22
    5338:	bc 01       	movw	r22, r24
    533a:	cd 01       	movw	r24, r26
    533c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	9a a3       	std	Y+34, r25	; 0x22
    5346:	89 a3       	std	Y+33, r24	; 0x21
    5348:	0f c0       	rjmp	.+30     	; 0x5368 <main+0x164a>
    534a:	88 ec       	ldi	r24, 0xC8	; 200
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	98 a3       	std	Y+32, r25	; 0x20
    5350:	8f 8f       	std	Y+31, r24	; 0x1f
    5352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5354:	98 a1       	ldd	r25, Y+32	; 0x20
    5356:	01 97       	sbiw	r24, 0x01	; 1
    5358:	f1 f7       	brne	.-4      	; 0x5356 <main+0x1638>
    535a:	98 a3       	std	Y+32, r25	; 0x20
    535c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    535e:	89 a1       	ldd	r24, Y+33	; 0x21
    5360:	9a a1       	ldd	r25, Y+34	; 0x22
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	9a a3       	std	Y+34, r25	; 0x22
    5366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5368:	89 a1       	ldd	r24, Y+33	; 0x21
    536a:	9a a1       	ldd	r25, Y+34	; 0x22
    536c:	00 97       	sbiw	r24, 0x00	; 0
    536e:	69 f7       	brne	.-38     	; 0x534a <main+0x162c>
    5370:	14 c0       	rjmp	.+40     	; 0x539a <main+0x167c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5372:	6b a1       	ldd	r22, Y+35	; 0x23
    5374:	7c a1       	ldd	r23, Y+36	; 0x24
    5376:	8d a1       	ldd	r24, Y+37	; 0x25
    5378:	9e a1       	ldd	r25, Y+38	; 0x26
    537a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	9a a3       	std	Y+34, r25	; 0x22
    5384:	89 a3       	std	Y+33, r24	; 0x21
    5386:	89 a1       	ldd	r24, Y+33	; 0x21
    5388:	9a a1       	ldd	r25, Y+34	; 0x22
    538a:	9e 8f       	std	Y+30, r25	; 0x1e
    538c:	8d 8f       	std	Y+29, r24	; 0x1d
    538e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5392:	01 97       	sbiw	r24, 0x01	; 1
    5394:	f1 f7       	brne	.-4      	; 0x5392 <main+0x1674>
    5396:	9e 8f       	std	Y+30, r25	; 0x1e
    5398:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					DIO_voidSetPinvalue(PORTA , PIN7 , HIGH);
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	67 e0       	ldi	r22, 0x07	; 7
    539e:	41 e0       	ldi	r20, 0x01	; 1
    53a0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    53a4:	0a ce       	rjmp	.-1004   	; 0x4fba <main+0x129c>

				}
				else if (Temp<=30)
    53a6:	fe 01       	movw	r30, r28
    53a8:	ef 51       	subi	r30, 0x1F	; 31
    53aa:	ff 4f       	sbci	r31, 0xFF	; 255
    53ac:	80 81       	ld	r24, Z
    53ae:	91 81       	ldd	r25, Z+1	; 0x01
    53b0:	a2 81       	ldd	r26, Z+2	; 0x02
    53b2:	b3 81       	ldd	r27, Z+3	; 0x03
    53b4:	8f 31       	cpi	r24, 0x1F	; 31
    53b6:	91 05       	cpc	r25, r1
    53b8:	a1 05       	cpc	r26, r1
    53ba:	b1 05       	cpc	r27, r1
    53bc:	08 f0       	brcs	.+2      	; 0x53c0 <main+0x16a2>
    53be:	78 c0       	rjmp	.+240    	; 0x54b0 <main+0x1792>
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	aa e7       	ldi	r26, 0x7A	; 122
    53c6:	b4 e4       	ldi	r27, 0x44	; 68
    53c8:	89 8f       	std	Y+25, r24	; 0x19
    53ca:	9a 8f       	std	Y+26, r25	; 0x1a
    53cc:	ab 8f       	std	Y+27, r26	; 0x1b
    53ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d0:	69 8d       	ldd	r22, Y+25	; 0x19
    53d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	4a ef       	ldi	r20, 0xFA	; 250
    53de:	54 e4       	ldi	r21, 0x44	; 68
    53e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e4:	dc 01       	movw	r26, r24
    53e6:	cb 01       	movw	r24, r22
    53e8:	8d 8b       	std	Y+21, r24	; 0x15
    53ea:	9e 8b       	std	Y+22, r25	; 0x16
    53ec:	af 8b       	std	Y+23, r26	; 0x17
    53ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53f0:	6d 89       	ldd	r22, Y+21	; 0x15
    53f2:	7e 89       	ldd	r23, Y+22	; 0x16
    53f4:	8f 89       	ldd	r24, Y+23	; 0x17
    53f6:	98 8d       	ldd	r25, Y+24	; 0x18
    53f8:	20 e0       	ldi	r18, 0x00	; 0
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	40 e8       	ldi	r20, 0x80	; 128
    53fe:	5f e3       	ldi	r21, 0x3F	; 63
    5400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5404:	88 23       	and	r24, r24
    5406:	2c f4       	brge	.+10     	; 0x5412 <main+0x16f4>
		__ticks = 1;
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	9c 8b       	std	Y+20, r25	; 0x14
    540e:	8b 8b       	std	Y+19, r24	; 0x13
    5410:	3f c0       	rjmp	.+126    	; 0x5490 <main+0x1772>
	else if (__tmp > 65535)
    5412:	6d 89       	ldd	r22, Y+21	; 0x15
    5414:	7e 89       	ldd	r23, Y+22	; 0x16
    5416:	8f 89       	ldd	r24, Y+23	; 0x17
    5418:	98 8d       	ldd	r25, Y+24	; 0x18
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	3f ef       	ldi	r19, 0xFF	; 255
    541e:	4f e7       	ldi	r20, 0x7F	; 127
    5420:	57 e4       	ldi	r21, 0x47	; 71
    5422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5426:	18 16       	cp	r1, r24
    5428:	4c f5       	brge	.+82     	; 0x547c <main+0x175e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542a:	69 8d       	ldd	r22, Y+25	; 0x19
    542c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    542e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	40 e2       	ldi	r20, 0x20	; 32
    5438:	51 e4       	ldi	r21, 0x41	; 65
    543a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    543e:	dc 01       	movw	r26, r24
    5440:	cb 01       	movw	r24, r22
    5442:	bc 01       	movw	r22, r24
    5444:	cd 01       	movw	r24, r26
    5446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	9c 8b       	std	Y+20, r25	; 0x14
    5450:	8b 8b       	std	Y+19, r24	; 0x13
    5452:	0f c0       	rjmp	.+30     	; 0x5472 <main+0x1754>
    5454:	88 ec       	ldi	r24, 0xC8	; 200
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	9a 8b       	std	Y+18, r25	; 0x12
    545a:	89 8b       	std	Y+17, r24	; 0x11
    545c:	89 89       	ldd	r24, Y+17	; 0x11
    545e:	9a 89       	ldd	r25, Y+18	; 0x12
    5460:	01 97       	sbiw	r24, 0x01	; 1
    5462:	f1 f7       	brne	.-4      	; 0x5460 <main+0x1742>
    5464:	9a 8b       	std	Y+18, r25	; 0x12
    5466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5468:	8b 89       	ldd	r24, Y+19	; 0x13
    546a:	9c 89       	ldd	r25, Y+20	; 0x14
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	9c 8b       	std	Y+20, r25	; 0x14
    5470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5472:	8b 89       	ldd	r24, Y+19	; 0x13
    5474:	9c 89       	ldd	r25, Y+20	; 0x14
    5476:	00 97       	sbiw	r24, 0x00	; 0
    5478:	69 f7       	brne	.-38     	; 0x5454 <main+0x1736>
    547a:	14 c0       	rjmp	.+40     	; 0x54a4 <main+0x1786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547c:	6d 89       	ldd	r22, Y+21	; 0x15
    547e:	7e 89       	ldd	r23, Y+22	; 0x16
    5480:	8f 89       	ldd	r24, Y+23	; 0x17
    5482:	98 8d       	ldd	r25, Y+24	; 0x18
    5484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	9c 8b       	std	Y+20, r25	; 0x14
    548e:	8b 8b       	std	Y+19, r24	; 0x13
    5490:	8b 89       	ldd	r24, Y+19	; 0x13
    5492:	9c 89       	ldd	r25, Y+20	; 0x14
    5494:	98 8b       	std	Y+16, r25	; 0x10
    5496:	8f 87       	std	Y+15, r24	; 0x0f
    5498:	8f 85       	ldd	r24, Y+15	; 0x0f
    549a:	98 89       	ldd	r25, Y+16	; 0x10
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	f1 f7       	brne	.-4      	; 0x549c <main+0x177e>
    54a0:	98 8b       	std	Y+16, r25	; 0x10
    54a2:	8f 87       	std	Y+15, r24	; 0x0f
				{


					_delay_ms(1000);
					DIO_voidSetPinvalue(PORTA , PIN7 , LOW);
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	67 e0       	ldi	r22, 0x07	; 7
    54a8:	40 e0       	ldi	r20, 0x00	; 0
    54aa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    54ae:	85 cd       	rjmp	.-1270   	; 0x4fba <main+0x129c>

				}

				else if (Temp>=50)
    54b0:	fe 01       	movw	r30, r28
    54b2:	ef 51       	subi	r30, 0x1F	; 31
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	80 81       	ld	r24, Z
    54b8:	91 81       	ldd	r25, Z+1	; 0x01
    54ba:	a2 81       	ldd	r26, Z+2	; 0x02
    54bc:	b3 81       	ldd	r27, Z+3	; 0x03
    54be:	82 33       	cpi	r24, 0x32	; 50
    54c0:	91 05       	cpc	r25, r1
    54c2:	a1 05       	cpc	r26, r1
    54c4:	b1 05       	cpc	r27, r1
    54c6:	08 f4       	brcc	.+2      	; 0x54ca <main+0x17ac>
    54c8:	78 cd       	rjmp	.-1296   	; 0x4fba <main+0x129c>
								{
					DIO_voidSetPinvalue(PORTA , PIN7 , HIGH);
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	67 e0       	ldi	r22, 0x07	; 7
    54ce:	41 e0       	ldi	r20, 0x01	; 1
    54d0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
					DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
    54d4:	83 e0       	ldi	r24, 0x03	; 3
    54d6:	63 e0       	ldi	r22, 0x03	; 3
    54d8:	41 e0       	ldi	r20, 0x01	; 1
    54da:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
					UART_voidSendData('b');
    54de:	82 e6       	ldi	r24, 0x62	; 98
    54e0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
					LCD_voidCLR();
    54e4:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_voidCLR>
									LCD_voidSendString("fire = ");
    54e8:	81 ef       	ldi	r24, 0xF1	; 241
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_voidSendString>
				LCD_voidSendNum(Temp);
    54f0:	fe 01       	movw	r30, r28
    54f2:	ef 51       	subi	r30, 0x1F	; 31
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	80 81       	ld	r24, Z
    54f8:	91 81       	ldd	r25, Z+1	; 0x01
    54fa:	a2 81       	ldd	r26, Z+2	; 0x02
    54fc:	b3 81       	ldd	r27, Z+3	; 0x03
    54fe:	bc 01       	movw	r22, r24
    5500:	cd 01       	movw	r24, r26
    5502:	0e 94 3d 1c 	call	0x387a	; 0x387a <LCD_voidSendNum>
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	aa e7       	ldi	r26, 0x7A	; 122
    550c:	b4 e4       	ldi	r27, 0x44	; 68
    550e:	8b 87       	std	Y+11, r24	; 0x0b
    5510:	9c 87       	std	Y+12, r25	; 0x0c
    5512:	ad 87       	std	Y+13, r26	; 0x0d
    5514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5516:	6b 85       	ldd	r22, Y+11	; 0x0b
    5518:	7c 85       	ldd	r23, Y+12	; 0x0c
    551a:	8d 85       	ldd	r24, Y+13	; 0x0d
    551c:	9e 85       	ldd	r25, Y+14	; 0x0e
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	4a ef       	ldi	r20, 0xFA	; 250
    5524:	54 e4       	ldi	r21, 0x44	; 68
    5526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    552a:	dc 01       	movw	r26, r24
    552c:	cb 01       	movw	r24, r22
    552e:	8f 83       	std	Y+7, r24	; 0x07
    5530:	98 87       	std	Y+8, r25	; 0x08
    5532:	a9 87       	std	Y+9, r26	; 0x09
    5534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5536:	6f 81       	ldd	r22, Y+7	; 0x07
    5538:	78 85       	ldd	r23, Y+8	; 0x08
    553a:	89 85       	ldd	r24, Y+9	; 0x09
    553c:	9a 85       	ldd	r25, Y+10	; 0x0a
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	40 e8       	ldi	r20, 0x80	; 128
    5544:	5f e3       	ldi	r21, 0x3F	; 63
    5546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    554a:	88 23       	and	r24, r24
    554c:	2c f4       	brge	.+10     	; 0x5558 <main+0x183a>
		__ticks = 1;
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	9e 83       	std	Y+6, r25	; 0x06
    5554:	8d 83       	std	Y+5, r24	; 0x05
    5556:	3f c0       	rjmp	.+126    	; 0x55d6 <main+0x18b8>
	else if (__tmp > 65535)
    5558:	6f 81       	ldd	r22, Y+7	; 0x07
    555a:	78 85       	ldd	r23, Y+8	; 0x08
    555c:	89 85       	ldd	r24, Y+9	; 0x09
    555e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	3f ef       	ldi	r19, 0xFF	; 255
    5564:	4f e7       	ldi	r20, 0x7F	; 127
    5566:	57 e4       	ldi	r21, 0x47	; 71
    5568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    556c:	18 16       	cp	r1, r24
    556e:	4c f5       	brge	.+82     	; 0x55c2 <main+0x18a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5570:	6b 85       	ldd	r22, Y+11	; 0x0b
    5572:	7c 85       	ldd	r23, Y+12	; 0x0c
    5574:	8d 85       	ldd	r24, Y+13	; 0x0d
    5576:	9e 85       	ldd	r25, Y+14	; 0x0e
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	40 e2       	ldi	r20, 0x20	; 32
    557e:	51 e4       	ldi	r21, 0x41	; 65
    5580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5584:	dc 01       	movw	r26, r24
    5586:	cb 01       	movw	r24, r22
    5588:	bc 01       	movw	r22, r24
    558a:	cd 01       	movw	r24, r26
    558c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5590:	dc 01       	movw	r26, r24
    5592:	cb 01       	movw	r24, r22
    5594:	9e 83       	std	Y+6, r25	; 0x06
    5596:	8d 83       	std	Y+5, r24	; 0x05
    5598:	0f c0       	rjmp	.+30     	; 0x55b8 <main+0x189a>
    559a:	88 ec       	ldi	r24, 0xC8	; 200
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	9c 83       	std	Y+4, r25	; 0x04
    55a0:	8b 83       	std	Y+3, r24	; 0x03
    55a2:	8b 81       	ldd	r24, Y+3	; 0x03
    55a4:	9c 81       	ldd	r25, Y+4	; 0x04
    55a6:	01 97       	sbiw	r24, 0x01	; 1
    55a8:	f1 f7       	brne	.-4      	; 0x55a6 <main+0x1888>
    55aa:	9c 83       	std	Y+4, r25	; 0x04
    55ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ae:	8d 81       	ldd	r24, Y+5	; 0x05
    55b0:	9e 81       	ldd	r25, Y+6	; 0x06
    55b2:	01 97       	sbiw	r24, 0x01	; 1
    55b4:	9e 83       	std	Y+6, r25	; 0x06
    55b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b8:	8d 81       	ldd	r24, Y+5	; 0x05
    55ba:	9e 81       	ldd	r25, Y+6	; 0x06
    55bc:	00 97       	sbiw	r24, 0x00	; 0
    55be:	69 f7       	brne	.-38     	; 0x559a <main+0x187c>
    55c0:	fc cc       	rjmp	.-1544   	; 0x4fba <main+0x129c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c2:	6f 81       	ldd	r22, Y+7	; 0x07
    55c4:	78 85       	ldd	r23, Y+8	; 0x08
    55c6:	89 85       	ldd	r24, Y+9	; 0x09
    55c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	9e 83       	std	Y+6, r25	; 0x06
    55d4:	8d 83       	std	Y+5, r24	; 0x05
    55d6:	8d 81       	ldd	r24, Y+5	; 0x05
    55d8:	9e 81       	ldd	r25, Y+6	; 0x06
    55da:	9a 83       	std	Y+2, r25	; 0x02
    55dc:	89 83       	std	Y+1, r24	; 0x01
    55de:	89 81       	ldd	r24, Y+1	; 0x01
    55e0:	9a 81       	ldd	r25, Y+2	; 0x02
    55e2:	01 97       	sbiw	r24, 0x01	; 1
    55e4:	f1 f7       	brne	.-4      	; 0x55e2 <main+0x18c4>
    55e6:	9a 83       	std	Y+2, r25	; 0x02
    55e8:	89 83       	std	Y+1, r24	; 0x01
    55ea:	e7 cc       	rjmp	.-1586   	; 0x4fba <main+0x129c>

000055ec <Emergeny>:
	return 0 ;
}


void Emergeny(void)
{
    55ec:	df 93       	push	r29
    55ee:	cf 93       	push	r28
    55f0:	cd b7       	in	r28, 0x3d	; 61
    55f2:	de b7       	in	r29, 0x3e	; 62
    55f4:	2e 97       	sbiw	r28, 0x0e	; 14
    55f6:	0f b6       	in	r0, 0x3f	; 63
    55f8:	f8 94       	cli
    55fa:	de bf       	out	0x3e, r29	; 62
    55fc:	0f be       	out	0x3f, r0	; 63
    55fe:	cd bf       	out	0x3d, r28	; 61
	UART_voidSendData('d');
    5600:	84 e6       	ldi	r24, 0x64	; 100
    5602:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_voidSendData>
	DIO_voidSetPinvalue(PORTD , PIN3 , HIGH);
    5606:	83 e0       	ldi	r24, 0x03	; 3
    5608:	63 e0       	ldi	r22, 0x03	; 3
    560a:	41 e0       	ldi	r20, 0x01	; 1
    560c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_voidSetPinvalue>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e4       	ldi	r25, 0x40	; 64
    5614:	ac e1       	ldi	r26, 0x1C	; 28
    5616:	b6 e4       	ldi	r27, 0x46	; 70
    5618:	8b 87       	std	Y+11, r24	; 0x0b
    561a:	9c 87       	std	Y+12, r25	; 0x0c
    561c:	ad 87       	std	Y+13, r26	; 0x0d
    561e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5620:	6b 85       	ldd	r22, Y+11	; 0x0b
    5622:	7c 85       	ldd	r23, Y+12	; 0x0c
    5624:	8d 85       	ldd	r24, Y+13	; 0x0d
    5626:	9e 85       	ldd	r25, Y+14	; 0x0e
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	4a ef       	ldi	r20, 0xFA	; 250
    562e:	54 e4       	ldi	r21, 0x44	; 68
    5630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	8f 83       	std	Y+7, r24	; 0x07
    563a:	98 87       	std	Y+8, r25	; 0x08
    563c:	a9 87       	std	Y+9, r26	; 0x09
    563e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5640:	6f 81       	ldd	r22, Y+7	; 0x07
    5642:	78 85       	ldd	r23, Y+8	; 0x08
    5644:	89 85       	ldd	r24, Y+9	; 0x09
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	40 e8       	ldi	r20, 0x80	; 128
    564e:	5f e3       	ldi	r21, 0x3F	; 63
    5650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5654:	88 23       	and	r24, r24
    5656:	2c f4       	brge	.+10     	; 0x5662 <Emergeny+0x76>
		__ticks = 1;
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	9e 83       	std	Y+6, r25	; 0x06
    565e:	8d 83       	std	Y+5, r24	; 0x05
    5660:	3f c0       	rjmp	.+126    	; 0x56e0 <Emergeny+0xf4>
	else if (__tmp > 65535)
    5662:	6f 81       	ldd	r22, Y+7	; 0x07
    5664:	78 85       	ldd	r23, Y+8	; 0x08
    5666:	89 85       	ldd	r24, Y+9	; 0x09
    5668:	9a 85       	ldd	r25, Y+10	; 0x0a
    566a:	20 e0       	ldi	r18, 0x00	; 0
    566c:	3f ef       	ldi	r19, 0xFF	; 255
    566e:	4f e7       	ldi	r20, 0x7F	; 127
    5670:	57 e4       	ldi	r21, 0x47	; 71
    5672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5676:	18 16       	cp	r1, r24
    5678:	4c f5       	brge	.+82     	; 0x56cc <Emergeny+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    567a:	6b 85       	ldd	r22, Y+11	; 0x0b
    567c:	7c 85       	ldd	r23, Y+12	; 0x0c
    567e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5680:	9e 85       	ldd	r25, Y+14	; 0x0e
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	40 e2       	ldi	r20, 0x20	; 32
    5688:	51 e4       	ldi	r21, 0x41	; 65
    568a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	bc 01       	movw	r22, r24
    5694:	cd 01       	movw	r24, r26
    5696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    569a:	dc 01       	movw	r26, r24
    569c:	cb 01       	movw	r24, r22
    569e:	9e 83       	std	Y+6, r25	; 0x06
    56a0:	8d 83       	std	Y+5, r24	; 0x05
    56a2:	0f c0       	rjmp	.+30     	; 0x56c2 <Emergeny+0xd6>
    56a4:	88 ec       	ldi	r24, 0xC8	; 200
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	9c 83       	std	Y+4, r25	; 0x04
    56aa:	8b 83       	std	Y+3, r24	; 0x03
    56ac:	8b 81       	ldd	r24, Y+3	; 0x03
    56ae:	9c 81       	ldd	r25, Y+4	; 0x04
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	f1 f7       	brne	.-4      	; 0x56b0 <Emergeny+0xc4>
    56b4:	9c 83       	std	Y+4, r25	; 0x04
    56b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ba:	9e 81       	ldd	r25, Y+6	; 0x06
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	9e 83       	std	Y+6, r25	; 0x06
    56c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c2:	8d 81       	ldd	r24, Y+5	; 0x05
    56c4:	9e 81       	ldd	r25, Y+6	; 0x06
    56c6:	00 97       	sbiw	r24, 0x00	; 0
    56c8:	69 f7       	brne	.-38     	; 0x56a4 <Emergeny+0xb8>
    56ca:	14 c0       	rjmp	.+40     	; 0x56f4 <Emergeny+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56cc:	6f 81       	ldd	r22, Y+7	; 0x07
    56ce:	78 85       	ldd	r23, Y+8	; 0x08
    56d0:	89 85       	ldd	r24, Y+9	; 0x09
    56d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	9e 83       	std	Y+6, r25	; 0x06
    56de:	8d 83       	std	Y+5, r24	; 0x05
    56e0:	8d 81       	ldd	r24, Y+5	; 0x05
    56e2:	9e 81       	ldd	r25, Y+6	; 0x06
    56e4:	9a 83       	std	Y+2, r25	; 0x02
    56e6:	89 83       	std	Y+1, r24	; 0x01
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	9a 81       	ldd	r25, Y+2	; 0x02
    56ec:	01 97       	sbiw	r24, 0x01	; 1
    56ee:	f1 f7       	brne	.-4      	; 0x56ec <Emergeny+0x100>
    56f0:	9a 83       	std	Y+2, r25	; 0x02
    56f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);


}
    56f4:	2e 96       	adiw	r28, 0x0e	; 14
    56f6:	0f b6       	in	r0, 0x3f	; 63
    56f8:	f8 94       	cli
    56fa:	de bf       	out	0x3e, r29	; 62
    56fc:	0f be       	out	0x3f, r0	; 63
    56fe:	cd bf       	out	0x3d, r28	; 61
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	08 95       	ret

00005706 <__mulsi3>:
    5706:	62 9f       	mul	r22, r18
    5708:	d0 01       	movw	r26, r0
    570a:	73 9f       	mul	r23, r19
    570c:	f0 01       	movw	r30, r0
    570e:	82 9f       	mul	r24, r18
    5710:	e0 0d       	add	r30, r0
    5712:	f1 1d       	adc	r31, r1
    5714:	64 9f       	mul	r22, r20
    5716:	e0 0d       	add	r30, r0
    5718:	f1 1d       	adc	r31, r1
    571a:	92 9f       	mul	r25, r18
    571c:	f0 0d       	add	r31, r0
    571e:	83 9f       	mul	r24, r19
    5720:	f0 0d       	add	r31, r0
    5722:	74 9f       	mul	r23, r20
    5724:	f0 0d       	add	r31, r0
    5726:	65 9f       	mul	r22, r21
    5728:	f0 0d       	add	r31, r0
    572a:	99 27       	eor	r25, r25
    572c:	72 9f       	mul	r23, r18
    572e:	b0 0d       	add	r27, r0
    5730:	e1 1d       	adc	r30, r1
    5732:	f9 1f       	adc	r31, r25
    5734:	63 9f       	mul	r22, r19
    5736:	b0 0d       	add	r27, r0
    5738:	e1 1d       	adc	r30, r1
    573a:	f9 1f       	adc	r31, r25
    573c:	bd 01       	movw	r22, r26
    573e:	cf 01       	movw	r24, r30
    5740:	11 24       	eor	r1, r1
    5742:	08 95       	ret

00005744 <__udivmodhi4>:
    5744:	aa 1b       	sub	r26, r26
    5746:	bb 1b       	sub	r27, r27
    5748:	51 e1       	ldi	r21, 0x11	; 17
    574a:	07 c0       	rjmp	.+14     	; 0x575a <__udivmodhi4_ep>

0000574c <__udivmodhi4_loop>:
    574c:	aa 1f       	adc	r26, r26
    574e:	bb 1f       	adc	r27, r27
    5750:	a6 17       	cp	r26, r22
    5752:	b7 07       	cpc	r27, r23
    5754:	10 f0       	brcs	.+4      	; 0x575a <__udivmodhi4_ep>
    5756:	a6 1b       	sub	r26, r22
    5758:	b7 0b       	sbc	r27, r23

0000575a <__udivmodhi4_ep>:
    575a:	88 1f       	adc	r24, r24
    575c:	99 1f       	adc	r25, r25
    575e:	5a 95       	dec	r21
    5760:	a9 f7       	brne	.-22     	; 0x574c <__udivmodhi4_loop>
    5762:	80 95       	com	r24
    5764:	90 95       	com	r25
    5766:	bc 01       	movw	r22, r24
    5768:	cd 01       	movw	r24, r26
    576a:	08 95       	ret

0000576c <__udivmodsi4>:
    576c:	a1 e2       	ldi	r26, 0x21	; 33
    576e:	1a 2e       	mov	r1, r26
    5770:	aa 1b       	sub	r26, r26
    5772:	bb 1b       	sub	r27, r27
    5774:	fd 01       	movw	r30, r26
    5776:	0d c0       	rjmp	.+26     	; 0x5792 <__udivmodsi4_ep>

00005778 <__udivmodsi4_loop>:
    5778:	aa 1f       	adc	r26, r26
    577a:	bb 1f       	adc	r27, r27
    577c:	ee 1f       	adc	r30, r30
    577e:	ff 1f       	adc	r31, r31
    5780:	a2 17       	cp	r26, r18
    5782:	b3 07       	cpc	r27, r19
    5784:	e4 07       	cpc	r30, r20
    5786:	f5 07       	cpc	r31, r21
    5788:	20 f0       	brcs	.+8      	; 0x5792 <__udivmodsi4_ep>
    578a:	a2 1b       	sub	r26, r18
    578c:	b3 0b       	sbc	r27, r19
    578e:	e4 0b       	sbc	r30, r20
    5790:	f5 0b       	sbc	r31, r21

00005792 <__udivmodsi4_ep>:
    5792:	66 1f       	adc	r22, r22
    5794:	77 1f       	adc	r23, r23
    5796:	88 1f       	adc	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	1a 94       	dec	r1
    579c:	69 f7       	brne	.-38     	; 0x5778 <__udivmodsi4_loop>
    579e:	60 95       	com	r22
    57a0:	70 95       	com	r23
    57a2:	80 95       	com	r24
    57a4:	90 95       	com	r25
    57a6:	9b 01       	movw	r18, r22
    57a8:	ac 01       	movw	r20, r24
    57aa:	bd 01       	movw	r22, r26
    57ac:	cf 01       	movw	r24, r30
    57ae:	08 95       	ret

000057b0 <__prologue_saves__>:
    57b0:	2f 92       	push	r2
    57b2:	3f 92       	push	r3
    57b4:	4f 92       	push	r4
    57b6:	5f 92       	push	r5
    57b8:	6f 92       	push	r6
    57ba:	7f 92       	push	r7
    57bc:	8f 92       	push	r8
    57be:	9f 92       	push	r9
    57c0:	af 92       	push	r10
    57c2:	bf 92       	push	r11
    57c4:	cf 92       	push	r12
    57c6:	df 92       	push	r13
    57c8:	ef 92       	push	r14
    57ca:	ff 92       	push	r15
    57cc:	0f 93       	push	r16
    57ce:	1f 93       	push	r17
    57d0:	cf 93       	push	r28
    57d2:	df 93       	push	r29
    57d4:	cd b7       	in	r28, 0x3d	; 61
    57d6:	de b7       	in	r29, 0x3e	; 62
    57d8:	ca 1b       	sub	r28, r26
    57da:	db 0b       	sbc	r29, r27
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	f8 94       	cli
    57e0:	de bf       	out	0x3e, r29	; 62
    57e2:	0f be       	out	0x3f, r0	; 63
    57e4:	cd bf       	out	0x3d, r28	; 61
    57e6:	09 94       	ijmp

000057e8 <__epilogue_restores__>:
    57e8:	2a 88       	ldd	r2, Y+18	; 0x12
    57ea:	39 88       	ldd	r3, Y+17	; 0x11
    57ec:	48 88       	ldd	r4, Y+16	; 0x10
    57ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    57f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    57f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    57f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    57f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    57f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    57fa:	b9 84       	ldd	r11, Y+9	; 0x09
    57fc:	c8 84       	ldd	r12, Y+8	; 0x08
    57fe:	df 80       	ldd	r13, Y+7	; 0x07
    5800:	ee 80       	ldd	r14, Y+6	; 0x06
    5802:	fd 80       	ldd	r15, Y+5	; 0x05
    5804:	0c 81       	ldd	r16, Y+4	; 0x04
    5806:	1b 81       	ldd	r17, Y+3	; 0x03
    5808:	aa 81       	ldd	r26, Y+2	; 0x02
    580a:	b9 81       	ldd	r27, Y+1	; 0x01
    580c:	ce 0f       	add	r28, r30
    580e:	d1 1d       	adc	r29, r1
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	f8 94       	cli
    5814:	de bf       	out	0x3e, r29	; 62
    5816:	0f be       	out	0x3f, r0	; 63
    5818:	cd bf       	out	0x3d, r28	; 61
    581a:	ed 01       	movw	r28, r26
    581c:	08 95       	ret

0000581e <_exit>:
    581e:	f8 94       	cli

00005820 <__stop_program>:
    5820:	ff cf       	rjmp	.-2      	; 0x5820 <__stop_program>
