
SPI_S2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000464c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000464c  000046e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800068  00800068  000046e8  2**0
                  ALLOC
  3 .stab         00003bc4  00000000  00000000  000046e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013cf  00000000  00000000  000082ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000967b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000097bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000992b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c45f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d20c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ddc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_10>
      2c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e4       	ldi	r30, 0x4C	; 76
      78:	f6 e4       	ldi	r31, 0x46	; 70
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 38 18 	call	0x3070	; 0x3070 <main>
      8a:	0c 94 24 23 	jmp	0x4648	; 0x4648 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Select UCSRA
	SET_BIT(UART_UCSRC_REG , 7) ;
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24

	//selsect Asynch(baud rate)
	CLR_BIT(UART_UCSRC_REG , 6) ;
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24

	//parity disable(error)
	CLR_BIT(UART_UCSRC_REG , 4);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRC_REG , 5);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	//Stop bit 1 Or 2 bits
	CLR_BIT(UART_UCSRC_REG , 3);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24

	//Charctar Size 8 bits
	SET_BIT(UART_UCSRC_REG , 2);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRC_REG , 1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRB_REG , 2); //B
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24

	//select Baud rate reg
	CLR_BIT(UART_UCSRC_REG , 7) ;
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
	//Select Baud Rate
	UART_UBRRH_REG = (u8)(BAUD_RATE>>8);
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
	UART_UBRRL_REG = (u8)(BAUD_RATE);
     bd2:	e9 e2       	ldi	r30, 0x29	; 41
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	83 e3       	ldi	r24, 0x33	; 51
     bd8:	80 83       	st	Z, r24

	//Enable RX & TX
	SET_BIT(UART_UCSRB_REG , 3); //B
     bda:	aa e2       	ldi	r26, 0x2A	; 42
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e2       	ldi	r30, 0x2A	; 42
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG , 4); //B
     be8:	aa e2       	ldi	r26, 0x2A	; 42
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e2       	ldi	r30, 0x2A	; 42
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24

}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 5)==0);
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	86 95       	lsr	r24
     c12:	87 70       	andi	r24, 0x07	; 7
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	a1 f3       	breq	.-24     	; 0xc08 <UART_voidSendData+0xc>

	//when flag = 1
	UART_UDR_REG = Copy_u8Data ;
     c20:	ec e2       	ldi	r30, 0x2C	; 44
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24

	//clear flag
	SET_BIT(UART_UCSRA_REG , 6) ;
     c28:	ab e2       	ldi	r26, 0x2B	; 43
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	eb e2       	ldi	r30, 0x2B	; 43
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	80 64       	ori	r24, 0x40	; 64
     c34:	8c 93       	st	X, r24
}
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <UART_u8RecieveData>:

void UART_u8RecieveData(u8 *Copy_pu8Data)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <UART_u8RecieveData+0x6>
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 7)==0);
     c4c:	eb e2       	ldi	r30, 0x2B	; 43
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	dc f7       	brge	.-10     	; 0xc4c <UART_u8RecieveData+0xe>

	//when flag = 1
	*Copy_pu8Data = UART_UDR_REG ;
     c56:	ec e2       	ldi	r30, 0x2C	; 44
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	80 83       	st	Z, r24

}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	0f 92       	push	r0
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     c78:	a6 e5       	ldi	r26, 0x56	; 86
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e6 e5       	ldi	r30, 0x56	; 86
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
     c86:	e0 e2       	ldi	r30, 0x20	; 32
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     c8e:	a1 e2       	ldi	r26, 0x21	; 33
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e1 e2       	ldi	r30, 0x21	; 33
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     c9c:	a1 e2       	ldi	r26, 0x21	; 33
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e1 e2       	ldi	r30, 0x21	; 33
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	88 23       	and	r24, r24
     cae:	29 f0       	breq	.+10     	; 0xcba <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR = (Copy_u8Address << 1);
     cb0:	e2 e2       	ldi	r30, 0x22	; 34
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 0f       	add	r24, r24
     cb8:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     cba:	a6 e5       	ldi	r26, 0x56	; 86
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	8c 93       	st	X, r24
}
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
     cdc:	e2 e2       	ldi	r30, 0x22	; 34
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 0f       	add	r24, r24
     ce4:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     ce6:	a6 e5       	ldi	r26, 0x56	; 86
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e5       	ldi	r30, 0x56	; 86
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     cf4:	a6 e5       	ldi	r26, 0x56	; 86
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e5       	ldi	r30, 0x56	; 86
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     d14:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Send Start Condition Bit*/
		SET_BIT(TWCR, TWCR_TWSTA);
     d16:	a6 e5       	ldi	r26, 0x56	; 86
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e5       	ldi	r30, 0x56	; 86
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     d24:	a6 e5       	ldi	r26, 0x56	; 86
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e5       	ldi	r30, 0x56	; 86
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     d32:	e6 e5       	ldi	r30, 0x56	; 86
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 23       	and	r24, r24
     d3a:	dc f7       	brge	.-10     	; 0xd32 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
     d3c:	e1 e2       	ldi	r30, 0x21	; 33
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	88 7f       	andi	r24, 0xF8	; 248
     d48:	90 70       	andi	r25, 0x00	; 0
     d4a:	88 30       	cpi	r24, 0x08	; 8
     d4c:	91 05       	cpc	r25, r1
     d4e:	11 f0       	breq	.+4      	; 0xd54 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
}
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     d68:	19 82       	std	Y+1, r1	; 0x01
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
     d6a:	a6 e5       	ldi	r26, 0x56	; 86
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e6 e5       	ldi	r30, 0x56	; 86
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	84 6a       	ori	r24, 0xA4	; 164
     d76:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     d78:	e6 e5       	ldi	r30, 0x56	; 86
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	dc f7       	brge	.-10     	; 0xd78 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
     d82:	e1 e2       	ldi	r30, 0x21	; 33
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 7f       	andi	r24, 0xF8	; 248
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	80 31       	cpi	r24, 0x10	; 16
     d92:	91 05       	cpc	r25, r1
     d94:	11 f0       	breq	.+4      	; 0xd9a <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     db2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
     db4:	19 82       	std	Y+1, r1	; 0x01



	/*Set 7 bits slave address to the bus*/
	TWDR = ((Copy_u8SlaveAddress << 1)&0b11111110);
     db6:	e3 e2       	ldi	r30, 0x23	; 35
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	//CLR_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     dc6:	a6 e5       	ldi	r26, 0x56	; 86
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7d       	andi	r24, 0xDF	; 223
     dd2:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     dd4:	a6 e5       	ldi	r26, 0x56	; 86
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     de2:	e6 e5       	ldi	r30, 0x56	; 86
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	dc f7       	brge	.-10     	; 0xde2 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x3e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
     dec:	e1 e2       	ldi	r30, 0x21	; 33
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 7f       	andi	r24, 0xF8	; 248
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	88 31       	cpi	r24, 0x18	; 24
     dfc:	91 05       	cpc	r25, r1
     dfe:	11 f0       	breq	.+4      	; 0xe04 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x60>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e1e:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1)|1;
     e20:	e3 e2       	ldi	r30, 0x23	; 35
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	//SET_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     e32:	a6 e5       	ldi	r26, 0x56	; 86
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 7d       	andi	r24, 0xDF	; 223
     e3e:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     e40:	a6 e5       	ldi	r26, 0x56	; 86
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e5       	ldi	r30, 0x56	; 86
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e4e:	e6 e5       	ldi	r30, 0x56	; 86
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	dc f7       	brge	.-10     	; 0xe4e <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x3c>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
     e58:	e1 e2       	ldi	r30, 0x21	; 33
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 7f       	andi	r24, 0xF8	; 248
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	80 34       	cpi	r24, 0x40	; 64
     e68:	91 05       	cpc	r25, r1
     e6a:	11 f0       	breq	.+4      	; 0xe70 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x5e>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e88:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
     e8a:	e3 e2       	ldi	r30, 0x23	; 35
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     e92:	a6 e5       	ldi	r26, 0x56	; 86
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e6 e5       	ldi	r30, 0x56	; 86
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     ea0:	e6 e5       	ldi	r30, 0x56	; 86
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	dc f7       	brge	.-10     	; 0xea0 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
     eaa:	e1 e2       	ldi	r30, 0x21	; 33
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	88 7f       	andi	r24, 0xF8	; 248
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	88 32       	cpi	r24, 0x28	; 40
     eba:	91 05       	cpc	r25, r1
     ebc:	11 f0       	breq	.+4      	; 0xec2 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	9b 83       	std	Y+3, r25	; 0x03
     edc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ede:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
     ee0:	a6 e5       	ldi	r26, 0x56	; 86
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e5       	ldi	r30, 0x56	; 86
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     eee:	e6 e5       	ldi	r30, 0x56	; 86
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 23       	and	r24, r24
     ef6:	dc f7       	brge	.-10     	; 0xeee <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
     ef8:	e1 e2       	ldi	r30, 0x21	; 33
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 7f       	andi	r24, 0xF8	; 248
     f04:	90 70       	andi	r25, 0x00	; 0
     f06:	80 35       	cpi	r24, 0x50	; 80
     f08:	91 05       	cpc	r25, r1
     f0a:	19 f0       	breq	.+6      	; 0xf12 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
     f0c:	86 e0       	ldi	r24, 0x06	; 6
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
     f12:	e3 e2       	ldi	r30, 0x23	; 35
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	ea 81       	ldd	r30, Y+2	; 0x02
     f1a:	fb 81       	ldd	r31, Y+3	; 0x03
     f1c:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01

}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
     f34:	a6 e5       	ldi	r26, 0x56	; 86
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e5       	ldi	r30, 0x56	; 86
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     f42:	a6 e5       	ldi	r26, 0x56	; 86
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e6 e5       	ldi	r30, 0x56	; 86
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	8c 93       	st	X, r24
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <TIMER0_voidInit>:
void(*TIMER_GPF0)(void) = NULL ;
void(*TIMER_GPF1)(void) = NULL ;


void TIMER0_voidInit()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	//compare mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
	SET_BIT(TIMER0_TCCR0_REG , 3 );
	#elif(TIMER_MODE==TIMER_FAST_PWM_MODE)
	//fast PWM
	SET_BIT(TIMER0_TCCR0_REG , 6 );
     f5e:	a3 e5       	ldi	r26, 0x53	; 83
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e3 e5       	ldi	r30, 0x53	; 83
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 64       	ori	r24, 0x40	; 64
     f6a:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 3 );
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	88 60       	ori	r24, 0x08	; 8
     f78:	8c 93       	st	X, r24
	//set on top clear on compare
	CLR_BIT(TIMER0_TCCR0_REG , 4 );
     f7a:	a3 e5       	ldi	r26, 0x53	; 83
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 e5       	ldi	r30, 0x53	; 83
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7e       	andi	r24, 0xEF	; 239
     f86:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 5 );
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 62       	ori	r24, 0x20	; 32
     f94:	8c 93       	st	X, r24
	#endif

	//prescaller division factor = 8
	CLR_BIT(TIMER0_TCCR0_REG , 2 );
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8b 7f       	andi	r24, 0xFB	; 251
     fa2:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 0 );
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8e 7f       	andi	r24, 0xFE	; 254
     fb0:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 1 );
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	SET_BIT(TIMER0_TIMSK_REG , 0) ;
     fc0:	a9 e5       	ldi	r26, 0x59	; 89
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e9 e5       	ldi	r30, 0x59	; 89
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <TIMER0_voidSetCallBackT0Ovf>:

void TIMER0_voidSetCallBackT0Ovf(void(*LPF0)(void))
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <TIMER0_voidSetCallBackT0Ovf+0x6>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF0 = LPF0 ;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	90 93 69 00 	sts	0x0069, r25
     fea:	80 93 68 00 	sts	0x0068, r24
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue(u8 Copy_PreloadValue)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = Copy_PreloadValue ;
    1004:	e2 e5       	ldi	r30, 0x52	; 82
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 83       	st	Z, r24
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TIMER0_voidSetCallBackT0CTC>:

void TIMER0_voidSetCallBackT0CTC(void(*LPF1)(void))
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <TIMER0_voidSetCallBackT0CTC+0x6>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF1 = LPF1 ;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	90 93 6b 00 	sts	0x006B, r25
    102a:	80 93 6a 00 	sts	0x006A, r24
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_CompareMatchValue)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = Copy_CompareMatchValue ;
    1044:	ec e5       	ldi	r30, 0x5C	; 92
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24
}
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <__vector_10>:


//ISR for T0OVF
void __vector_10(void)    __attribute__((signal));
void __vector_10(void)
{
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
    107e:	80 91 6c 00 	lds	r24, 0x006C
    1082:	90 91 6d 00 	lds	r25, 0x006D
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	90 93 6d 00 	sts	0x006D, r25
    108c:	80 93 6c 00 	sts	0x006C, r24
	//compare =200 ,, time = 1sec
	if(counter == 5000)
    1090:	80 91 6c 00 	lds	r24, 0x006C
    1094:	90 91 6d 00 	lds	r25, 0x006D
    1098:	23 e1       	ldi	r18, 0x13	; 19
    109a:	88 38       	cpi	r24, 0x88	; 136
    109c:	92 07       	cpc	r25, r18
    109e:	49 f4       	brne	.+18     	; 0x10b2 <__vector_10+0x5e>
	{
		TIMER_GPF1();
    10a0:	e0 91 6a 00 	lds	r30, 0x006A
    10a4:	f0 91 6b 00 	lds	r31, 0x006B
    10a8:	09 95       	icall
		counter = 0 ;
    10aa:	10 92 6d 00 	sts	0x006D, r1
    10ae:	10 92 6c 00 	sts	0x006C, r1
	}

}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_11>:
void __vector_11(void)    __attribute__((signal));
void __vector_11(void)
{
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
    1102:	80 91 6e 00 	lds	r24, 0x006E
    1106:	90 91 6f 00 	lds	r25, 0x006F
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	90 93 6f 00 	sts	0x006F, r25
    1110:	80 93 6e 00 	sts	0x006E, r24
	//overflow 1
	if(counter == 3907)
    1114:	80 91 6e 00 	lds	r24, 0x006E
    1118:	90 91 6f 00 	lds	r25, 0x006F
    111c:	2f e0       	ldi	r18, 0x0F	; 15
    111e:	83 34       	cpi	r24, 0x43	; 67
    1120:	92 07       	cpc	r25, r18
    1122:	61 f4       	brne	.+24     	; 0x113c <__vector_11+0x64>
	{
		TIMER_GPF0();
    1124:	e0 91 68 00 	lds	r30, 0x0068
    1128:	f0 91 69 00 	lds	r31, 0x0069
    112c:	09 95       	icall
		counter = 0 ;
    112e:	10 92 6f 00 	sts	0x006F, r1
    1132:	10 92 6e 00 	sts	0x006E, r1
		TIMER0_voidSetPreloadValue(192);
    1136:	80 ec       	ldi	r24, 0xC0	; 192
    1138:	0e 94 fc 07 	call	0xff8	; 0xff8 <TIMER0_voidSetPreloadValue>
	}

}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <TIMER1_voidInit>:
void TIMER1_voidInit(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62

	//fast PWM
	CLR_BIT(TIMER1_TCCR1A_REG , 0 );
    116a:	af e4       	ldi	r26, 0x4F	; 79
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e4       	ldi	r30, 0x4F	; 79
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8e 7f       	andi	r24, 0xFE	; 254
    1176:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 1);
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 3 );
    1186:	ae e4       	ldi	r26, 0x4E	; 78
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ee e4       	ldi	r30, 0x4E	; 78
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 4);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 61       	ori	r24, 0x10	; 16
    11a0:	8c 93       	st	X, r24

	//set on top clear on compare
	CLR_BIT(TIMER1_TCCR1A_REG , 6 );
    11a2:	af e4       	ldi	r26, 0x4F	; 79
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ef e4       	ldi	r30, 0x4F	; 79
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7b       	andi	r24, 0xBF	; 191
    11ae:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 7 );
    11b0:	af e4       	ldi	r26, 0x4F	; 79
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ef e4       	ldi	r30, 0x4F	; 79
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 68       	ori	r24, 0x80	; 128
    11bc:	8c 93       	st	X, r24


	//prescaller division factor = 8
	CLR_BIT(TIMER1_TCCR1B_REG , 0 );
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 1 );
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B_REG , 2 );
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	//SET_BIT(TIMER1 , 0) ;

	//intilize value over flow value
	TIMER1_ICR1_REG = 19999 ;
    11e8:	e6 e4       	ldi	r30, 0x46	; 70
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8f e1       	ldi	r24, 0x1F	; 31
    11ee:	9e e4       	ldi	r25, 0x4E	; 78
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24

	//intilize counter
	TIMER1_TCNT1_REG = 0 ;
    11f4:	ec e4       	ldi	r30, 0x4C	; 76
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	11 82       	std	Z+1, r1	; 0x01
    11fa:	10 82       	st	Z, r1

}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <TIMER1_voidSetPinACompareMatch>:




void TIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <TIMER1_voidSetPinACompareMatch+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1A_REG = Copy_u16Value ;
    1210:	ea e4       	ldi	r30, 0x4A	; 74
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <TIMERS_voidT1SetBusyWait>:

void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	2c 97       	sbiw	r28, 0x0c	; 12
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	69 87       	std	Y+9, r22	; 0x09
    123c:	7a 87       	std	Y+10, r23	; 0x0a
    123e:	8b 87       	std	Y+11, r24	; 0x0b
    1240:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u64SWCounter = 0 ;
    1242:	1d 82       	std	Y+5, r1	; 0x05
    1244:	1e 82       	std	Y+6, r1	; 0x06
    1246:	1f 82       	std	Y+7, r1	; 0x07
    1248:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u64Iterator = 0 ;
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	1a 82       	std	Y+2, r1	; 0x02
    124e:	1b 82       	std	Y+3, r1	; 0x03
    1250:	1c 82       	std	Y+4, r1	; 0x04
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	ab 85       	ldd	r26, Y+11	; 0x0b
    1258:	bc 85       	ldd	r27, Y+12	; 0x0c
    125a:	28 ee       	ldi	r18, 0xE8	; 232
    125c:	33 e0       	ldi	r19, 0x03	; 3
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 98 22 	call	0x4530	; 0x4530 <__mulsi3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	2a ef       	ldi	r18, 0xFA	; 250
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 cb 22 	call	0x4596	; 0x4596 <__udivmodsi4>
    127e:	da 01       	movw	r26, r20
    1280:	c9 01       	movw	r24, r18
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	af 83       	std	Y+7, r26	; 0x07
    1288:	b8 87       	std	Y+8, r27	; 0x08
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
    128a:	19 82       	std	Y+1, r1	; 0x01
    128c:	1a 82       	std	Y+2, r1	; 0x02
    128e:	1b 82       	std	Y+3, r1	; 0x03
    1290:	1c 82       	std	Y+4, r1	; 0x04
    1292:	1c c0       	rjmp	.+56     	; 0x12cc <TIMERS_voidT1SetBusyWait+0xa6>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
    1294:	e8 e5       	ldi	r30, 0x58	; 88
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	86 95       	lsr	r24
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	90 70       	andi	r25, 0x00	; 0
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	b1 f3       	breq	.-20     	; 0x1294 <TIMERS_voidT1SetBusyWait+0x6e>
		SET_BIT(TIMER1_TIFR_REG , 1);
    12a8:	a8 e5       	ldi	r26, 0x58	; 88
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e5       	ldi	r30, 0x58	; 88
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	82 60       	ori	r24, 0x02	; 2
    12b4:	8c 93       	st	X, r24
void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
	u32 Local_u64SWCounter = 0 ;
	u32 Local_u64Iterator = 0 ;
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	ab 81       	ldd	r26, Y+3	; 0x03
    12bc:	bc 81       	ldd	r27, Y+4	; 0x04
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	a1 1d       	adc	r26, r1
    12c2:	b1 1d       	adc	r27, r1
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	ab 83       	std	Y+3, r26	; 0x03
    12ca:	bc 83       	std	Y+4, r27	; 0x04
    12cc:	29 81       	ldd	r18, Y+1	; 0x01
    12ce:	3a 81       	ldd	r19, Y+2	; 0x02
    12d0:	4b 81       	ldd	r20, Y+3	; 0x03
    12d2:	5c 81       	ldd	r21, Y+4	; 0x04
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	af 81       	ldd	r26, Y+7	; 0x07
    12da:	b8 85       	ldd	r27, Y+8	; 0x08
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	4a 07       	cpc	r20, r26
    12e2:	5b 07       	cpc	r21, r27
    12e4:	b8 f2       	brcs	.-82     	; 0x1294 <TIMERS_voidT1SetBusyWait+0x6e>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
		SET_BIT(TIMER1_TIFR_REG , 1);
	}
}
    12e6:	2c 96       	adiw	r28, 0x0c	; 12
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_voidSetPinvalue>:




void DIO_voidSetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	29 97       	sbiw	r28, 0x09	; 9
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	6a 83       	std	Y+2, r22	; 0x02
    1310:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	08 f0       	brcs	.+2      	; 0x131a <DIO_voidSetPinvalue+0x22>
    1318:	f6 c0       	rjmp	.+492    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	88 30       	cpi	r24, 0x08	; 8
    131e:	08 f0       	brcs	.+2      	; 0x1322 <DIO_voidSetPinvalue+0x2a>
    1320:	f2 c0       	rjmp	.+484    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8Direction)
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	39 87       	std	Y+9, r19	; 0x09
    132a:	28 87       	std	Y+8, r18	; 0x08
    132c:	88 85       	ldd	r24, Y+8	; 0x08
    132e:	99 85       	ldd	r25, Y+9	; 0x09
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	39 f0       	breq	.+14     	; 0x1342 <DIO_voidSetPinvalue+0x4a>
    1334:	28 85       	ldd	r18, Y+8	; 0x08
    1336:	39 85       	ldd	r19, Y+9	; 0x09
    1338:	21 30       	cpi	r18, 0x01	; 1
    133a:	31 05       	cpc	r19, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <DIO_voidSetPinvalue+0x48>
    133e:	75 c0       	rjmp	.+234    	; 0x142a <DIO_voidSetPinvalue+0x132>
    1340:	e2 c0       	rjmp	.+452    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
		{
			case LOW  : switch(Copy_u8PortId)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3f 83       	std	Y+7, r19	; 0x07
    134a:	2e 83       	std	Y+6, r18	; 0x06
    134c:	8e 81       	ldd	r24, Y+6	; 0x06
    134e:	9f 81       	ldd	r25, Y+7	; 0x07
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	59 f1       	breq	.+86     	; 0x13ac <DIO_voidSetPinvalue+0xb4>
    1356:	2e 81       	ldd	r18, Y+6	; 0x06
    1358:	3f 81       	ldd	r19, Y+7	; 0x07
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <DIO_voidSetPinvalue+0x72>
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	9f 81       	ldd	r25, Y+7	; 0x07
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	69 f0       	breq	.+26     	; 0x1382 <DIO_voidSetPinvalue+0x8a>
    1368:	ce c0       	rjmp	.+412    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
    136a:	2e 81       	ldd	r18, Y+6	; 0x06
    136c:	3f 81       	ldd	r19, Y+7	; 0x07
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	89 f1       	breq	.+98     	; 0x13d6 <DIO_voidSetPinvalue+0xde>
    1374:	8e 81       	ldd	r24, Y+6	; 0x06
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_voidSetPinvalue+0x88>
    137e:	40 c0       	rjmp	.+128    	; 0x1400 <DIO_voidSetPinvalue+0x108>
    1380:	c2 c0       	rjmp	.+388    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										CLR_BIT(PORTA_REG,Copy_u8PinId);
    1382:	ab e3       	ldi	r26, 0x3B	; 59
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	eb e3       	ldi	r30, 0x3B	; 59
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_voidSetPinvalue+0xa8>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_voidSetPinvalue+0xa4>
    13a4:	80 95       	com	r24
    13a6:	84 23       	and	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	ad c0       	rjmp	.+346    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										CLR_BIT(PORTB_REG,Copy_u8PinId);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_voidSetPinvalue+0xd2>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_voidSetPinvalue+0xce>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	98 c0       	rjmp	.+304    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										CLR_BIT(PORTC_REG,Copy_u8PinId);
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_voidSetPinvalue+0xfc>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_voidSetPinvalue+0xf8>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	83 c0       	rjmp	.+262    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										CLR_BIT(PORTD_REG,Copy_u8PinId);
    1400:	a2 e3       	ldi	r26, 0x32	; 50
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e2 e3       	ldi	r30, 0x32	; 50
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_voidSetPinvalue+0x126>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_voidSetPinvalue+0x122>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	6e c0       	rjmp	.+220    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							default :
										break ;
						}
						break ;
			case HIGH  : switch(Copy_u8PortId)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3d 83       	std	Y+5, r19	; 0x05
    1432:	2c 83       	std	Y+4, r18	; 0x04
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	49 f1       	breq	.+82     	; 0x1490 <DIO_voidSetPinvalue+0x198>
    143e:	2c 81       	ldd	r18, Y+4	; 0x04
    1440:	3d 81       	ldd	r19, Y+5	; 0x05
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <DIO_voidSetPinvalue+0x15a>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <DIO_voidSetPinvalue+0x170>
    1450:	5a c0       	rjmp	.+180    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	3d 81       	ldd	r19, Y+5	; 0x05
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	71 f1       	breq	.+92     	; 0x14b8 <DIO_voidSetPinvalue+0x1c0>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	e9 f1       	breq	.+122    	; 0x14e0 <DIO_voidSetPinvalue+0x1e8>
    1466:	4f c0       	rjmp	.+158    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										SET_BIT(PORTA_REG,Copy_u8PinId);
    1468:	ab e3       	ldi	r26, 0x3B	; 59
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_voidSetPinvalue+0x18e>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_voidSetPinvalue+0x18a>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	3b c0       	rjmp	.+118    	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										SET_BIT(PORTB_REG,Copy_u8PinId);
    1490:	a8 e3       	ldi	r26, 0x38	; 56
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e3       	ldi	r30, 0x38	; 56
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_voidSetPinvalue+0x1b6>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_voidSetPinvalue+0x1b2>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	27 c0       	rjmp	.+78     	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										SET_BIT(PORTC_REG,Copy_u8PinId);
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_voidSetPinvalue+0x1de>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_voidSetPinvalue+0x1da>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										SET_BIT(PORTD_REG,Copy_u8PinId);
    14e0:	a2 e3       	ldi	r26, 0x32	; 50
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_voidSetPinvalue+0x206>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_voidSetPinvalue+0x202>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24

			default :
				break ;
		}
	}
}
    1506:	29 96       	adiw	r28, 0x09	; 9
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	29 97       	sbiw	r28, 0x09	; 9
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	6a 83       	std	Y+2, r22	; 0x02
    1530:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	08 f0       	brcs	.+2      	; 0x153a <DIO_voidSetPinDirection+0x22>
    1538:	f6 c0       	rjmp	.+492    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_voidSetPinDirection+0x2a>
    1540:	f2 c0       	rjmp	.+484    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
		{
			//do nothing
		}
		else
		{
			switch(Copy_u8Direction)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	39 87       	std	Y+9, r19	; 0x09
    154a:	28 87       	std	Y+8, r18	; 0x08
    154c:	88 85       	ldd	r24, Y+8	; 0x08
    154e:	99 85       	ldd	r25, Y+9	; 0x09
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	39 f0       	breq	.+14     	; 0x1562 <DIO_voidSetPinDirection+0x4a>
    1554:	28 85       	ldd	r18, Y+8	; 0x08
    1556:	39 85       	ldd	r19, Y+9	; 0x09
    1558:	21 30       	cpi	r18, 0x01	; 1
    155a:	31 05       	cpc	r19, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_voidSetPinDirection+0x48>
    155e:	75 c0       	rjmp	.+234    	; 0x164a <DIO_voidSetPinDirection+0x132>
    1560:	e2 c0       	rjmp	.+452    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
			{
				case INPUT  : switch(Copy_u8PortId)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3f 83       	std	Y+7, r19	; 0x07
    156a:	2e 83       	std	Y+6, r18	; 0x06
    156c:	8e 81       	ldd	r24, Y+6	; 0x06
    156e:	9f 81       	ldd	r25, Y+7	; 0x07
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f1       	breq	.+86     	; 0x15cc <DIO_voidSetPinDirection+0xb4>
    1576:	2e 81       	ldd	r18, Y+6	; 0x06
    1578:	3f 81       	ldd	r19, Y+7	; 0x07
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_voidSetPinDirection+0x72>
    1580:	8e 81       	ldd	r24, Y+6	; 0x06
    1582:	9f 81       	ldd	r25, Y+7	; 0x07
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_voidSetPinDirection+0x8a>
    1588:	ce c0       	rjmp	.+412    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	3f 81       	ldd	r19, Y+7	; 0x07
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_voidSetPinDirection+0xde>
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_voidSetPinDirection+0x88>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_voidSetPinDirection+0x108>
    15a0:	c2 c0       	rjmp	.+388    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											CLR_BIT(DDRA_REG,Copy_u8PinId);
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_voidSetPinDirection+0xa8>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_voidSetPinDirection+0xa4>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	ad c0       	rjmp	.+346    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											CLR_BIT(DDRB_REG,Copy_u8PinId);
    15cc:	a7 e3       	ldi	r26, 0x37	; 55
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e7 e3       	ldi	r30, 0x37	; 55
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_voidSetPinDirection+0xd2>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_voidSetPinDirection+0xce>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	98 c0       	rjmp	.+304    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											CLR_BIT(DDRC_REG,Copy_u8PinId);
    15f6:	a4 e3       	ldi	r26, 0x34	; 52
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e4 e3       	ldi	r30, 0x34	; 52
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_voidSetPinDirection+0xfc>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_voidSetPinDirection+0xf8>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	83 c0       	rjmp	.+262    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											CLR_BIT(DDRD_REG,Copy_u8PinId);
    1620:	a1 e3       	ldi	r26, 0x31	; 49
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e1 e3       	ldi	r30, 0x31	; 49
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_voidSetPinDirection+0x126>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_voidSetPinDirection+0x122>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	6e c0       	rjmp	.+220    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								default :
											break ;
							}
							break ;
				case OUTPUT  : switch(Copy_u8PortId)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	2c 83       	std	Y+4, r18	; 0x04
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	49 f1       	breq	.+82     	; 0x16b0 <DIO_voidSetPinDirection+0x198>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_voidSetPinDirection+0x15a>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <DIO_voidSetPinDirection+0x170>
    1670:	5a c0       	rjmp	.+180    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	71 f1       	breq	.+92     	; 0x16d8 <DIO_voidSetPinDirection+0x1c0>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	e9 f1       	breq	.+122    	; 0x1700 <DIO_voidSetPinDirection+0x1e8>
    1686:	4f c0       	rjmp	.+158    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											SET_BIT(DDRA_REG,Copy_u8PinId);
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_voidSetPinDirection+0x18e>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_voidSetPinDirection+0x18a>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	3b c0       	rjmp	.+118    	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											SET_BIT(DDRB_REG,Copy_u8PinId);
    16b0:	a7 e3       	ldi	r26, 0x37	; 55
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e7 e3       	ldi	r30, 0x37	; 55
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_voidSetPinDirection+0x1b6>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_voidSetPinDirection+0x1b2>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	27 c0       	rjmp	.+78     	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											SET_BIT(DDRC_REG,Copy_u8PinId);
    16d8:	a4 e3       	ldi	r26, 0x34	; 52
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_voidSetPinDirection+0x1de>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_voidSetPinDirection+0x1da>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	13 c0       	rjmp	.+38     	; 0x1726 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											SET_BIT(DDRD_REG,Copy_u8PinId);
    1700:	a1 e3       	ldi	r26, 0x31	; 49
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e1 e3       	ldi	r30, 0x31	; 49
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_voidSetPinDirection+0x206>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_voidSetPinDirection+0x202>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24

					default :
							break ;
			}
		}
}
    1726:	29 96       	adiw	r28, 0x09	; 9
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <DIO_u8GetPinvalue>:


u8 DIO_u8GetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_u8GetPinvalue+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_u8GetPinvalue+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 83       	std	Y+5, r19	; 0x05
    1752:	2c 83       	std	Y+4, r18	; 0x04
    1754:	4c 81       	ldd	r20, Y+4	; 0x04
    1756:	5d 81       	ldd	r21, Y+5	; 0x05
    1758:	41 30       	cpi	r20, 0x01	; 1
    175a:	51 05       	cpc	r21, r1
    175c:	41 f1       	breq	.+80     	; 0x17ae <DIO_u8GetPinvalue+0x76>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	34 f4       	brge	.+12     	; 0x1774 <DIO_u8GetPinvalue+0x3c>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	21 15       	cp	r18, r1
    176e:	31 05       	cpc	r19, r1
    1770:	61 f0       	breq	.+24     	; 0x178a <DIO_u8GetPinvalue+0x52>
    1772:	52 c0       	rjmp	.+164    	; 0x1818 <DIO_u8GetPinvalue+0xe0>
    1774:	4c 81       	ldd	r20, Y+4	; 0x04
    1776:	5d 81       	ldd	r21, Y+5	; 0x05
    1778:	42 30       	cpi	r20, 0x02	; 2
    177a:	51 05       	cpc	r21, r1
    177c:	51 f1       	breq	.+84     	; 0x17d2 <DIO_u8GetPinvalue+0x9a>
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	b9 f1       	breq	.+110    	; 0x17f6 <DIO_u8GetPinvalue+0xbe>
    1788:	47 c0       	rjmp	.+142    	; 0x1818 <DIO_u8GetPinvalue+0xe0>
	{
		case PORTA : Local_u8Variable=GET_BIT(PINA_REG , Copy_u8PinId) ;
    178a:	e9 e3       	ldi	r30, 0x39	; 57
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_u8GetPinvalue+0x6a>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_u8GetPinvalue+0x66>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	35 c0       	rjmp	.+106    	; 0x1818 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTB : Local_u8Variable=GET_BIT(PINB_REG , Copy_u8PinId) ;
    17ae:	e6 e3       	ldi	r30, 0x36	; 54
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_u8GetPinvalue+0x8e>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_u8GetPinvalue+0x8a>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	23 c0       	rjmp	.+70     	; 0x1818 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTC : Local_u8Variable=GET_BIT(PINC_REG , Copy_u8PinId) ;
    17d2:	e3 e3       	ldi	r30, 0x33	; 51
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8GetPinvalue+0xb2>
    17e6:	55 95       	asr	r21
    17e8:	47 95       	ror	r20
    17ea:	8a 95       	dec	r24
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_u8GetPinvalue+0xae>
    17ee:	ca 01       	movw	r24, r20
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	11 c0       	rjmp	.+34     	; 0x1818 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTD : Local_u8Variable=GET_BIT(PIND_REG , Copy_u8PinId) ;
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_u8GetPinvalue+0xd6>
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_u8GetPinvalue+0xd2>
    1812:	ca 01       	movw	r24, r20
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_voidSetPortvalue>:

void DIO_voidSetPortvalue(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_voidSetPortvalue+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_voidSetPortvalue+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	90 f5       	brcc	.+100    	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	d1 f0       	breq	.+52     	; 0x1888 <DIO_voidSetPortvalue+0x5e>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <DIO_voidSetPortvalue+0x3e>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f0       	breq	.+24     	; 0x187e <DIO_voidSetPortvalue+0x54>
    1866:	1e c0       	rjmp	.+60     	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <DIO_voidSetPortvalue+0x68>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	81 f0       	breq	.+32     	; 0x189c <DIO_voidSetPortvalue+0x72>
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
		{
			case PORTA :PORTA_REG = Copy_u8Direction ;
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTB :
						PORTB_REG = Copy_u8Direction ;
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTC :
						PORTC_REG = Copy_u8Direction ;
    1892:	e5 e3       	ldi	r30, 0x35	; 53
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTD :
						PORTD_REG = Copy_u8Direction ;
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
						break ;

		}
	}

}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <DIO_voidSetPortDirection+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <DIO_voidSetPortDirection+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	90 f5       	brcc	.+100    	; 0x192c <DIO_voidSetPortDirection+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3c 83       	std	Y+4, r19	; 0x04
    18d0:	2b 83       	std	Y+3, r18	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	d1 f0       	breq	.+52     	; 0x1910 <DIO_voidSetPortDirection+0x5e>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <DIO_voidSetPortDirection+0x3e>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f0       	breq	.+24     	; 0x1906 <DIO_voidSetPortDirection+0x54>
    18ee:	1e c0       	rjmp	.+60     	; 0x192c <DIO_voidSetPortDirection+0x7a>
    18f0:	2b 81       	ldd	r18, Y+3	; 0x03
    18f2:	3c 81       	ldd	r19, Y+4	; 0x04
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <DIO_voidSetPortDirection+0x68>
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <DIO_voidSetPortDirection+0x72>
    1904:	13 c0       	rjmp	.+38     	; 0x192c <DIO_voidSetPortDirection+0x7a>
		{
			case PORTA :DDRA_REG = Copy_u8Direction ;
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	0e c0       	rjmp	.+28     	; 0x192c <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTB :
						DDRB_REG = Copy_u8Direction ;
    1910:	e7 e3       	ldi	r30, 0x37	; 55
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
    1918:	09 c0       	rjmp	.+18     	; 0x192c <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTC :
						DDRC_REG = Copy_u8Direction ;
    191a:	e4 e3       	ldi	r30, 0x34	; 52
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	80 83       	st	Z, r24
    1922:	04 c0       	rjmp	.+8      	; 0x192c <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTD :
						DDRD_REG = Copy_u8Direction ;
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	80 83       	st	Z, r24
						break ;

		}
	}

}u8 DIO_u8GetPortvalue(u8 Copy_u8PortId)
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <DIO_u8GetPortvalue>:
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <DIO_u8GetPortvalue+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <DIO_u8GetPortvalue+0x8>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	d1 f0       	breq	.+52     	; 0x1990 <DIO_u8GetPortvalue+0x56>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	2c f4       	brge	.+10     	; 0x1970 <DIO_u8GetPortvalue+0x36>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	61 f0       	breq	.+24     	; 0x1986 <DIO_u8GetPortvalue+0x4c>
    196e:	1e c0       	rjmp	.+60     	; 0x19ac <DIO_u8GetPortvalue+0x72>
    1970:	2b 81       	ldd	r18, Y+3	; 0x03
    1972:	3c 81       	ldd	r19, Y+4	; 0x04
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <DIO_u8GetPortvalue+0x60>
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <DIO_u8GetPortvalue+0x6a>
    1984:	13 c0       	rjmp	.+38     	; 0x19ac <DIO_u8GetPortvalue+0x72>
	{
		case PORTA : Local_u8Variable=PINA_REG ;
    1986:	e9 e3       	ldi	r30, 0x39	; 57
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	0e c0       	rjmp	.+28     	; 0x19ac <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTB : Local_u8Variable=PINB_REG ;
    1990:	e6 e3       	ldi	r30, 0x36	; 54
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTC : Local_u8Variable=PINC_REG ;
    199a:	e3 e3       	ldi	r30, 0x33	; 51
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTD : Local_u8Variable=PIND_REG ;
    19a4:	e0 e3       	ldi	r30, 0x30	; 48
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <ADC_voidInit>:
u32 ADC_u32ADCDigitalValue ;
u32 ADC_u32ADCAnalogValue ;
u8 ADC_Flag = 0 ;

void ADC_voidInit(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	//select ref voltage = AVCC
	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    19c4:	a7 e2       	ldi	r26, 0x27	; 39
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e7 e2       	ldi	r30, 0x27	; 39
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 64       	ori	r24, 0x40	; 64
    19d0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    19d2:	a7 e2       	ldi	r26, 0x27	; 39
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e2       	ldi	r30, 0x27	; 39
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 77       	andi	r24, 0x7F	; 127
    19de:	8c 93       	st	X, r24
	//right adjust
	CLR_BIT(ADMUX_REG , ADMUX_ADLAR);
    19e0:	a7 e2       	ldi	r26, 0x27	; 39
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e7 e2       	ldi	r30, 0x27	; 39
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 7d       	andi	r24, 0xDF	; 223
    19ec:	8c 93       	st	X, r24
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    19ee:	a6 e2       	ldi	r26, 0x26	; 38
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e6 e2       	ldi	r30, 0x26	; 38
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 68       	ori	r24, 0x80	; 128
    19fa:	8c 93       	st	X, r24
	//Disable Auto Trigger
	CLR_BIT(ADCSRA_REG , ADCSRA_ADATE);
    19fc:	a6 e2       	ldi	r26, 0x26	; 38
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e2       	ldi	r30, 0x26	; 38
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 7d       	andi	r24, 0xDF	; 223
    1a08:	8c 93       	st	X, r24
	//Disable PIE for ADC
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIF);
    1a0a:	a6 e2       	ldi	r26, 0x26	; 38
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e6 e2       	ldi	r30, 0x26	; 38
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7e       	andi	r24, 0xEF	; 239
    1a16:	8c 93       	st	X, r24
	//prescaler 64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    1a18:	a6 e2       	ldi	r26, 0x26	; 38
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e6 e2       	ldi	r30, 0x26	; 38
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	84 60       	ori	r24, 0x04	; 4
    1a24:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    1a26:	a6 e2       	ldi	r26, 0x26	; 38
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e6 e2       	ldi	r30, 0x26	; 38
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    1a34:	a6 e2       	ldi	r26, 0x26	; 38
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e6 e2       	ldi	r30, 0x26	; 38
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24
	//ADCSRA_REG &= 0b11111000
	//ADCSRA_REG |= ADC_PRESCALLER

}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <ADC_voidGetAnalogRead>:

u32 ADC_voidGetAnalogRead(u8 Copy_Channel)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	29 97       	sbiw	r28, 0x09	; 9
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_u32ADCDigitalValue ;
	u32 Local_u32ADCAnalogValue ;

	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= 0b11100000 ;
    1a5e:	a7 e2       	ldi	r26, 0x27	; 39
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e7 e2       	ldi	r30, 0x27	; 39
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 7e       	andi	r24, 0xE0	; 224
    1a6a:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    1a6c:	a7 e2       	ldi	r26, 0x27	; 39
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e7 e2       	ldi	r30, 0x27	; 39
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	90 81       	ld	r25, Z
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	89 2b       	or	r24, r25
    1a7a:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1a7c:	a6 e2       	ldi	r26, 0x26	; 38
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e6 e2       	ldi	r30, 0x26	; 38
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 64       	ori	r24, 0x40	; 64
    1a88:	8c 93       	st	X, r24
	//polling flag
	while(GET_BIT(ADCSRA_REG , ADCSRA_ADIF)==0);
    1a8a:	e6 e2       	ldi	r30, 0x26	; 38
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	82 95       	swap	r24
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	a9 f3       	breq	.-22     	; 0x1a8a <ADC_voidGetAnalogRead+0x42>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    1aa0:	a6 e2       	ldi	r26, 0x26	; 38
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e6 e2       	ldi	r30, 0x26	; 38
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	80 61       	ori	r24, 0x10	; 16
    1aac:	8c 93       	st	X, r24
	//get reading right adjust
	Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1aae:	e4 e2       	ldi	r30, 0x24	; 36
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	e5 e2       	ldi	r30, 0x25	; 37
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	88 27       	eor	r24, r24
    1ac6:	82 0f       	add	r24, r18
    1ac8:	93 1f       	adc	r25, r19
    1aca:	aa 27       	eor	r26, r26
    1acc:	97 fd       	sbrc	r25, 7
    1ace:	a0 95       	com	r26
    1ad0:	ba 2f       	mov	r27, r26
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	af 83       	std	Y+7, r26	; 0x07
    1ad8:	b8 87       	std	Y+8, r27	; 0x08

	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 5000) / 1024 ;
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	af 81       	ldd	r26, Y+7	; 0x07
    1ae0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae2:	28 e8       	ldi	r18, 0x88	; 136
    1ae4:	33 e1       	ldi	r19, 0x13	; 19
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 98 22 	call	0x4530	; 0x4530 <__mulsi3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	07 2e       	mov	r0, r23
    1af8:	7a e0       	ldi	r23, 0x0A	; 10
    1afa:	b6 95       	lsr	r27
    1afc:	a7 95       	ror	r26
    1afe:	97 95       	ror	r25
    1b00:	87 95       	ror	r24
    1b02:	7a 95       	dec	r23
    1b04:	d1 f7       	brne	.-12     	; 0x1afa <ADC_voidGetAnalogRead+0xb2>
    1b06:	70 2d       	mov	r23, r0
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	ab 83       	std	Y+3, r26	; 0x03
    1b0e:	bc 83       	std	Y+4, r27	; 0x04


	return Local_u32ADCAnalogValue ;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	ab 81       	ldd	r26, Y+3	; 0x03
    1b16:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	29 96       	adiw	r28, 0x09	; 9
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <ADC_voidGetAnalogReadAsynch>:

u32 ADC_voidGetAnalogReadAsynch(u8 Copy_Channel , void(*Copy_pvCallBackFunc)(void))
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	27 97       	sbiw	r28, 0x07	; 7
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	7b 83       	std	Y+3, r23	; 0x03
    1b46:	6a 83       	std	Y+2, r22	; 0x02
	if((ADC_Flag==1) ||(Copy_pvCallBackFunc==  NULL) )
    1b48:	80 91 72 00 	lds	r24, 0x0072
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	21 f0       	breq	.+8      	; 0x1b58 <ADC_voidGetAnalogReadAsynch+0x2a>
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <ADC_voidGetAnalogReadAsynch+0x34>
	{
		return 0 ;
    1b58:	1c 82       	std	Y+4, r1	; 0x04
    1b5a:	1d 82       	std	Y+5, r1	; 0x05
    1b5c:	1e 82       	std	Y+6, r1	; 0x06
    1b5e:	1f 82       	std	Y+7, r1	; 0x07
    1b60:	32 c0       	rjmp	.+100    	; 0x1bc6 <ADC_voidGetAnalogReadAsynch+0x98>
	}
	else
	{
		ADC_Flag = 1 ; //busy
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 72 00 	sts	0x0072, r24
		//clear Mux from 0 to 4 (reg&0b11100000)
		ADMUX_REG &= 0b11100000 ;
    1b68:	a7 e2       	ldi	r26, 0x27	; 39
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e7 e2       	ldi	r30, 0x27	; 39
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 7e       	andi	r24, 0xE0	; 224
    1b74:	8c 93       	st	X, r24
		//reg or with copy_channel
		ADMUX_REG |= Copy_Channel ;
    1b76:	a7 e2       	ldi	r26, 0x27	; 39
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e7 e2       	ldi	r30, 0x27	; 39
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	90 81       	ld	r25, Z
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	89 2b       	or	r24, r25
    1b84:	8c 93       	st	X, r24
		//set call back func
		ADC_GPF = Copy_pvCallBackFunc ;
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	90 93 71 00 	sts	0x0071, r25
    1b8e:	80 93 70 00 	sts	0x0070, r24
		//start conversion
		SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 64       	ori	r24, 0x40	; 64
    1b9e:	8c 93       	st	X, r24
		//Interrupt flag
		SET_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1ba0:	a6 e2       	ldi	r26, 0x26	; 38
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e2       	ldi	r30, 0x26	; 38
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	8c 93       	st	X, r24

		return ADC_u32ADCAnalogValue ;
    1bae:	80 91 73 00 	lds	r24, 0x0073
    1bb2:	90 91 74 00 	lds	r25, 0x0074
    1bb6:	a0 91 75 00 	lds	r26, 0x0075
    1bba:	b0 91 76 00 	lds	r27, 0x0076
    1bbe:	8c 83       	std	Y+4, r24	; 0x04
    1bc0:	9d 83       	std	Y+5, r25	; 0x05
    1bc2:	ae 83       	std	Y+6, r26	; 0x06
    1bc4:	bf 83       	std	Y+7, r27	; 0x07
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	ae 81       	ldd	r26, Y+6	; 0x06
    1bcc:	bf 81       	ldd	r27, Y+7	; 0x07
	}
}
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	27 96       	adiw	r28, 0x07	; 7
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <__vector_16>:


void __vector_16(void)
{
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	//get reading right adjust
	ADC_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    1c0e:	e4 e2       	ldi	r30, 0x24	; 36
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	e5 e2       	ldi	r30, 0x25	; 37
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	98 2f       	mov	r25, r24
    1c24:	88 27       	eor	r24, r24
    1c26:	82 0f       	add	r24, r18
    1c28:	93 1f       	adc	r25, r19
    1c2a:	aa 27       	eor	r26, r26
    1c2c:	97 fd       	sbrc	r25, 7
    1c2e:	a0 95       	com	r26
    1c30:	ba 2f       	mov	r27, r26
    1c32:	80 93 77 00 	sts	0x0077, r24
    1c36:	90 93 78 00 	sts	0x0078, r25
    1c3a:	a0 93 79 00 	sts	0x0079, r26
    1c3e:	b0 93 7a 00 	sts	0x007A, r27
	ADC_u32ADCAnalogValue = (ADC_u32ADCDigitalValue * 5000) / 1024 ;
    1c42:	80 91 77 00 	lds	r24, 0x0077
    1c46:	90 91 78 00 	lds	r25, 0x0078
    1c4a:	a0 91 79 00 	lds	r26, 0x0079
    1c4e:	b0 91 7a 00 	lds	r27, 0x007A
    1c52:	28 e8       	ldi	r18, 0x88	; 136
    1c54:	33 e1       	ldi	r19, 0x13	; 19
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 98 22 	call	0x4530	; 0x4530 <__mulsi3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	07 2e       	mov	r0, r23
    1c68:	7a e0       	ldi	r23, 0x0A	; 10
    1c6a:	b6 95       	lsr	r27
    1c6c:	a7 95       	ror	r26
    1c6e:	97 95       	ror	r25
    1c70:	87 95       	ror	r24
    1c72:	7a 95       	dec	r23
    1c74:	d1 f7       	brne	.-12     	; 0x1c6a <__vector_16+0x86>
    1c76:	70 2d       	mov	r23, r0
    1c78:	80 93 73 00 	sts	0x0073, r24
    1c7c:	90 93 74 00 	sts	0x0074, r25
    1c80:	a0 93 75 00 	sts	0x0075, r26
    1c84:	b0 93 76 00 	sts	0x0076, r27

	ADC_Flag = 0 ; //not busy
    1c88:	10 92 72 00 	sts	0x0072, r1

	ADC_GPF() ; //call back function
    1c8c:	e0 91 70 00 	lds	r30, 0x0070
    1c90:	f0 91 71 00 	lds	r31, 0x0071
    1c94:	09 95       	icall

	//clear intuurrupt
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    1c96:	a6 e2       	ldi	r26, 0x26	; 38
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e6 e2       	ldi	r30, 0x26	; 38
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	87 7f       	andi	r24, 0xF7	; 247
    1ca2:	8c 93       	st	X, r24


}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	bf 91       	pop	r27
    1cae:	af 91       	pop	r26
    1cb0:	9f 91       	pop	r25
    1cb2:	8f 91       	pop	r24
    1cb4:	7f 91       	pop	r23
    1cb6:	6f 91       	pop	r22
    1cb8:	5f 91       	pop	r21
    1cba:	4f 91       	pop	r20
    1cbc:	3f 91       	pop	r19
    1cbe:	2f 91       	pop	r18
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <STP_voidInit>:
#include"STP_private.h"
#include"STP_interface.h"


void STP_voidInit(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT , STP_C1 , OUTPUT) ;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C2 , OUTPUT) ;
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C3 , OUTPUT) ;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C4 , OUTPUT) ;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>

	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	63 e0       	ldi	r22, 0x03	; 3
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <STP_voidDirectionAngle>:

void STP_voidDirectionAngle(u8 Copy_u8Direction , u16 Copy_u8Angle)
{
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	ce 57       	subi	r28, 0x7E	; 126
    1d36:	d0 40       	sbci	r29, 0x00	; 0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	fe 01       	movw	r30, r28
    1d44:	e6 58       	subi	r30, 0x86	; 134
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 83       	st	Z, r24
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e5 58       	subi	r30, 0x85	; 133
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	71 83       	std	Z+1, r23	; 0x01
    1d52:	60 83       	st	Z, r22
	u32 Local_STPSteps ;
	Local_STPSteps = Copy_u8Angle * 512 /360 ;
    1d54:	fe 01       	movw	r30, r28
    1d56:	e5 58       	subi	r30, 0x85	; 133
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	98 2f       	mov	r25, r24
    1d60:	88 27       	eor	r24, r24
    1d62:	99 0f       	add	r25, r25
    1d64:	28 e6       	ldi	r18, 0x68	; 104
    1d66:	31 e0       	ldi	r19, 0x01	; 1
    1d68:	b9 01       	movw	r22, r18
    1d6a:	0e 94 b7 22 	call	0x456e	; 0x456e <__udivmodhi4>
    1d6e:	cb 01       	movw	r24, r22
    1d70:	fe 01       	movw	r30, r28
    1d72:	ea 58       	subi	r30, 0x8A	; 138
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	cc 01       	movw	r24, r24
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03

	switch(Copy_u8Direction)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e6 58       	subi	r30, 0x86	; 134
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	ef 96       	adiw	r28, 0x3f	; 63
    1d92:	3f af       	std	Y+63, r19	; 0x3f
    1d94:	2e af       	std	Y+62, r18	; 0x3e
    1d96:	ef 97       	sbiw	r28, 0x3f	; 63
    1d98:	ef 96       	adiw	r28, 0x3f	; 63
    1d9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d9e:	ef 97       	sbiw	r28, 0x3f	; 63
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <STP_voidDirectionAngle+0x7e>
    1da4:	26 c3       	rjmp	.+1612   	; 0x23f2 <STP_voidDirectionAngle+0x6ca>
    1da6:	ef 96       	adiw	r28, 0x3f	; 63
    1da8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1daa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dac:	ef 97       	sbiw	r28, 0x3f	; 63
    1dae:	e1 30       	cpi	r30, 0x01	; 1
    1db0:	f1 05       	cpc	r31, r1
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <STP_voidDirectionAngle+0x8e>
    1db4:	59 c5       	rjmp	.+2738   	; 0x2868 <STP_voidDirectionAngle+0xb40>
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    1db6:	fe 01       	movw	r30, r28
    1db8:	ee 58       	subi	r30, 0x8E	; 142
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	10 82       	st	Z, r1
    1dbe:	11 82       	std	Z+1, r1	; 0x01
    1dc0:	12 82       	std	Z+2, r1	; 0x02
    1dc2:	13 82       	std	Z+3, r1	; 0x03
    1dc4:	00 c3       	rjmp	.+1536   	; 0x23c6 <STP_voidDirectionAngle+0x69e>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	63 e0       	ldi	r22, 0x03	; 3
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	64 e0       	ldi	r22, 0x04	; 4
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    1dee:	fe 01       	movw	r30, r28
    1df0:	e3 59       	subi	r30, 0x93	; 147
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e2       	ldi	r26, 0x20	; 32
    1dfa:	b1 e4       	ldi	r27, 0x41	; 65
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	8e 01       	movw	r16, r28
    1e06:	07 59       	subi	r16, 0x97	; 151
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e3 59       	subi	r30, 0x93	; 147
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a ef       	ldi	r20, 0xFA	; 250
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e32:	fe 01       	movw	r30, r28
    1e34:	e7 59       	subi	r30, 0x97	; 151
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	44 f4       	brge	.+16     	; 0x1e60 <STP_voidDirectionAngle+0x138>
		__ticks = 1;
    1e50:	fe 01       	movw	r30, r28
    1e52:	e9 59       	subi	r30, 0x99	; 153
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	64 c0       	rjmp	.+200    	; 0x1f28 <STP_voidDirectionAngle+0x200>
	else if (__tmp > 65535)
    1e60:	fe 01       	movw	r30, r28
    1e62:	e7 59       	subi	r30, 0x97	; 151
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	0c f0       	brlt	.+2      	; 0x1e80 <STP_voidDirectionAngle+0x158>
    1e7e:	43 c0       	rjmp	.+134    	; 0x1f06 <STP_voidDirectionAngle+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	fe 01       	movw	r30, r28
    1e82:	e3 59       	subi	r30, 0x93	; 147
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	09 59       	subi	r16, 0x99	; 153
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	1f c0       	rjmp	.+62     	; 0x1ef6 <STP_voidDirectionAngle+0x1ce>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	eb 59       	subi	r30, 0x9B	; 155
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	eb 59       	subi	r30, 0x9B	; 155
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <STP_voidDirectionAngle+0x1a8>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	eb 59       	subi	r30, 0x9B	; 155
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	de 01       	movw	r26, r28
    1ee0:	a9 59       	subi	r26, 0x99	; 153
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e9 59       	subi	r30, 0x99	; 153
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	9c 93       	st	X, r25
    1ef4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e9 59       	subi	r30, 0x99	; 153
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	d1 f6       	brne	.-76     	; 0x1eb8 <STP_voidDirectionAngle+0x190>
    1f04:	27 c0       	rjmp	.+78     	; 0x1f54 <STP_voidDirectionAngle+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	8e 01       	movw	r16, r28
    1f08:	09 59       	subi	r16, 0x99	; 153
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e7 59       	subi	r30, 0x97	; 151
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	de 01       	movw	r26, r28
    1f2a:	ad 59       	subi	r26, 0x9D	; 157
    1f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e9 59       	subi	r30, 0x99	; 153
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	8d 93       	st	X+, r24
    1f3a:	9c 93       	st	X, r25
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 59       	subi	r30, 0x9D	; 157
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <STP_voidDirectionAngle+0x21e>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 59       	subi	r30, 0x9D	; 157
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	63 e0       	ldi	r22, 0x03	; 3
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	64 e0       	ldi	r22, 0x04	; 4
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e1 5a       	subi	r30, 0xA1	; 161
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e2       	ldi	r26, 0x20	; 32
    1f88:	b1 e4       	ldi	r27, 0x41	; 65
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	8e 01       	movw	r16, r28
    1f94:	05 5a       	subi	r16, 0xA5	; 165
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e1 5a       	subi	r30, 0xA1	; 161
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e5 5a       	subi	r30, 0xA5	; 165
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	44 f4       	brge	.+16     	; 0x1fee <STP_voidDirectionAngle+0x2c6>
		__ticks = 1;
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e7 5a       	subi	r30, 0xA7	; 167
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	64 c0       	rjmp	.+200    	; 0x20b6 <STP_voidDirectionAngle+0x38e>
	else if (__tmp > 65535)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5a       	subi	r30, 0xA5	; 165
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <STP_voidDirectionAngle+0x2e6>
    200c:	43 c0       	rjmp	.+134    	; 0x2094 <STP_voidDirectionAngle+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	fe 01       	movw	r30, r28
    2010:	e1 5a       	subi	r30, 0xA1	; 161
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8e 01       	movw	r16, r28
    202e:	07 5a       	subi	r16, 0xA7	; 167
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	1f c0       	rjmp	.+62     	; 0x2084 <STP_voidDirectionAngle+0x35c>
    2046:	fe 01       	movw	r30, r28
    2048:	e9 5a       	subi	r30, 0xA9	; 169
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	fe 01       	movw	r30, r28
    2056:	e9 5a       	subi	r30, 0xA9	; 169
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <STP_voidDirectionAngle+0x336>
    2062:	fe 01       	movw	r30, r28
    2064:	e9 5a       	subi	r30, 0xA9	; 169
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	de 01       	movw	r26, r28
    206e:	a7 5a       	subi	r26, 0xA7	; 167
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	e7 5a       	subi	r30, 0xA7	; 167
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	11 96       	adiw	r26, 0x01	; 1
    2080:	9c 93       	st	X, r25
    2082:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	fe 01       	movw	r30, r28
    2086:	e7 5a       	subi	r30, 0xA7	; 167
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	d1 f6       	brne	.-76     	; 0x2046 <STP_voidDirectionAngle+0x31e>
    2092:	27 c0       	rjmp	.+78     	; 0x20e2 <STP_voidDirectionAngle+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	8e 01       	movw	r16, r28
    2096:	07 5a       	subi	r16, 0xA7	; 167
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e5 5a       	subi	r30, 0xA5	; 165
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	de 01       	movw	r26, r28
    20b8:	ab 5a       	subi	r26, 0xAB	; 171
    20ba:	bf 4f       	sbci	r27, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e7 5a       	subi	r30, 0xA7	; 167
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	8d 93       	st	X+, r24
    20c8:	9c 93       	st	X, r25
    20ca:	fe 01       	movw	r30, r28
    20cc:	eb 5a       	subi	r30, 0xAB	; 171
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <STP_voidDirectionAngle+0x3ac>
    20d8:	fe 01       	movw	r30, r28
    20da:	eb 5a       	subi	r30, 0xAB	; 171
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	63 e0       	ldi	r22, 0x03	; 3
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	64 e0       	ldi	r22, 0x04	; 4
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    210a:	fe 01       	movw	r30, r28
    210c:	ef 5a       	subi	r30, 0xAF	; 175
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e2       	ldi	r26, 0x20	; 32
    2116:	b1 e4       	ldi	r27, 0x41	; 65
    2118:	80 83       	st	Z, r24
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	a2 83       	std	Z+2, r26	; 0x02
    211e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	8e 01       	movw	r16, r28
    2122:	03 5b       	subi	r16, 0xB3	; 179
    2124:	1f 4f       	sbci	r17, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	ef 5a       	subi	r30, 0xAF	; 175
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a ef       	ldi	r20, 0xFA	; 250
    213a:	54 e4       	ldi	r21, 0x44	; 68
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	f8 01       	movw	r30, r16
    2146:	80 83       	st	Z, r24
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	a2 83       	std	Z+2, r26	; 0x02
    214c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214e:	fe 01       	movw	r30, r28
    2150:	e3 5b       	subi	r30, 0xB3	; 179
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	44 f4       	brge	.+16     	; 0x217c <STP_voidDirectionAngle+0x454>
		__ticks = 1;
    216c:	fe 01       	movw	r30, r28
    216e:	e5 5b       	subi	r30, 0xB5	; 181
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	64 c0       	rjmp	.+200    	; 0x2244 <STP_voidDirectionAngle+0x51c>
	else if (__tmp > 65535)
    217c:	fe 01       	movw	r30, r28
    217e:	e3 5b       	subi	r30, 0xB3	; 179
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	0c f0       	brlt	.+2      	; 0x219c <STP_voidDirectionAngle+0x474>
    219a:	43 c0       	rjmp	.+134    	; 0x2222 <STP_voidDirectionAngle+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	fe 01       	movw	r30, r28
    219e:	ef 5a       	subi	r30, 0xAF	; 175
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8e 01       	movw	r16, r28
    21bc:	05 5b       	subi	r16, 0xB5	; 181
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	1f c0       	rjmp	.+62     	; 0x2212 <STP_voidDirectionAngle+0x4ea>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 5b       	subi	r30, 0xB7	; 183
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	fe 01       	movw	r30, r28
    21e4:	e7 5b       	subi	r30, 0xB7	; 183
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <STP_voidDirectionAngle+0x4c4>
    21f0:	fe 01       	movw	r30, r28
    21f2:	e7 5b       	subi	r30, 0xB7	; 183
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	de 01       	movw	r26, r28
    21fc:	a5 5b       	subi	r26, 0xB5	; 181
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e5 5b       	subi	r30, 0xB5	; 181
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	9c 93       	st	X, r25
    2210:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5b       	subi	r30, 0xB5	; 181
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	d1 f6       	brne	.-76     	; 0x21d4 <STP_voidDirectionAngle+0x4ac>
    2220:	27 c0       	rjmp	.+78     	; 0x2270 <STP_voidDirectionAngle+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	8e 01       	movw	r16, r28
    2224:	05 5b       	subi	r16, 0xB5	; 181
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	e3 5b       	subi	r30, 0xB3	; 179
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	de 01       	movw	r26, r28
    2246:	a9 5b       	subi	r26, 0xB9	; 185
    2248:	bf 4f       	sbci	r27, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	e5 5b       	subi	r30, 0xB5	; 181
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	8d 93       	st	X+, r24
    2256:	9c 93       	st	X, r25
    2258:	fe 01       	movw	r30, r28
    225a:	e9 5b       	subi	r30, 0xB9	; 185
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <STP_voidDirectionAngle+0x53a>
    2266:	fe 01       	movw	r30, r28
    2268:	e9 5b       	subi	r30, 0xB9	; 185
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	63 e0       	ldi	r22, 0x03	; 3
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	64 e0       	ldi	r22, 0x04	; 4
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2298:	fe 01       	movw	r30, r28
    229a:	ed 5b       	subi	r30, 0xBD	; 189
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 e2       	ldi	r26, 0x20	; 32
    22a4:	b1 e4       	ldi	r27, 0x41	; 65
    22a6:	80 83       	st	Z, r24
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	a2 83       	std	Z+2, r26	; 0x02
    22ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	8e 01       	movw	r16, r28
    22b0:	01 5c       	subi	r16, 0xC1	; 193
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 5b       	subi	r30, 0xBD	; 189
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a ef       	ldi	r20, 0xFA	; 250
    22c8:	54 e4       	ldi	r21, 0x44	; 68
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	f8 01       	movw	r30, r16
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22dc:	fe 01       	movw	r30, r28
    22de:	ff 96       	adiw	r30, 0x3f	; 63
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <STP_voidDirectionAngle+0x5da>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e af       	std	Y+62, r25	; 0x3e
    22fe:	8d af       	std	Y+61, r24	; 0x3d
    2300:	46 c0       	rjmp	.+140    	; 0x238e <STP_voidDirectionAngle+0x666>
	else if (__tmp > 65535)
    2302:	fe 01       	movw	r30, r28
    2304:	ff 96       	adiw	r30, 0x3f	; 63
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	64 f5       	brge	.+88     	; 0x2376 <STP_voidDirectionAngle+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	fe 01       	movw	r30, r28
    2320:	ed 5b       	subi	r30, 0xBD	; 189
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e af       	std	Y+62, r25	; 0x3e
    234a:	8d af       	std	Y+61, r24	; 0x3d
    234c:	0f c0       	rjmp	.+30     	; 0x236c <STP_voidDirectionAngle+0x644>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c af       	std	Y+60, r25	; 0x3c
    2354:	8b af       	std	Y+59, r24	; 0x3b
    2356:	8b ad       	ldd	r24, Y+59	; 0x3b
    2358:	9c ad       	ldd	r25, Y+60	; 0x3c
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <STP_voidDirectionAngle+0x632>
    235e:	9c af       	std	Y+60, r25	; 0x3c
    2360:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d ad       	ldd	r24, Y+61	; 0x3d
    2364:	9e ad       	ldd	r25, Y+62	; 0x3e
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e af       	std	Y+62, r25	; 0x3e
    236a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d ad       	ldd	r24, Y+61	; 0x3d
    236e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <STP_voidDirectionAngle+0x626>
    2374:	16 c0       	rjmp	.+44     	; 0x23a2 <STP_voidDirectionAngle+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	fe 01       	movw	r30, r28
    2378:	ff 96       	adiw	r30, 0x3f	; 63
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e af       	std	Y+62, r25	; 0x3e
    238c:	8d af       	std	Y+61, r24	; 0x3d
    238e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2390:	9e ad       	ldd	r25, Y+62	; 0x3e
    2392:	9a af       	std	Y+58, r25	; 0x3a
    2394:	89 af       	std	Y+57, r24	; 0x39
    2396:	89 ad       	ldd	r24, Y+57	; 0x39
    2398:	9a ad       	ldd	r25, Y+58	; 0x3a
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <STP_voidDirectionAngle+0x672>
    239e:	9a af       	std	Y+58, r25	; 0x3a
    23a0:	89 af       	std	Y+57, r24	; 0x39
	Local_STPSteps = Copy_u8Angle * 512 /360 ;

	switch(Copy_u8Direction)
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    23a2:	9e 01       	movw	r18, r28
    23a4:	2e 58       	subi	r18, 0x8E	; 142
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	ee 58       	subi	r30, 0x8E	; 142
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	a2 81       	ldd	r26, Z+2	; 0x02
    23b4:	b3 81       	ldd	r27, Z+3	; 0x03
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	a1 1d       	adc	r26, r1
    23ba:	b1 1d       	adc	r27, r1
    23bc:	f9 01       	movw	r30, r18
    23be:	80 83       	st	Z, r24
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	a2 83       	std	Z+2, r26	; 0x02
    23c4:	b3 83       	std	Z+3, r27	; 0x03
    23c6:	fe 01       	movw	r30, r28
    23c8:	ee 58       	subi	r30, 0x8E	; 142
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	de 01       	movw	r26, r28
    23ce:	aa 58       	subi	r26, 0x8A	; 138
    23d0:	bf 4f       	sbci	r27, 0xFF	; 255
    23d2:	20 81       	ld	r18, Z
    23d4:	31 81       	ldd	r19, Z+1	; 0x01
    23d6:	42 81       	ldd	r20, Z+2	; 0x02
    23d8:	53 81       	ldd	r21, Z+3	; 0x03
    23da:	8d 91       	ld	r24, X+
    23dc:	9d 91       	ld	r25, X+
    23de:	0d 90       	ld	r0, X+
    23e0:	bc 91       	ld	r27, X
    23e2:	a0 2d       	mov	r26, r0
    23e4:	28 17       	cp	r18, r24
    23e6:	39 07       	cpc	r19, r25
    23e8:	4a 07       	cpc	r20, r26
    23ea:	5b 07       	cpc	r21, r27
    23ec:	08 f4       	brcc	.+2      	; 0x23f0 <STP_voidDirectionAngle+0x6c8>
    23ee:	eb cc       	rjmp	.-1578   	; 0x1dc6 <STP_voidDirectionAngle+0x9e>
    23f0:	3b c2       	rjmp	.+1142   	; 0x2868 <STP_voidDirectionAngle+0xb40>
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    23f2:	fe 01       	movw	r30, r28
    23f4:	ef 58       	subi	r30, 0x8F	; 143
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	10 82       	st	Z, r1
    23fa:	21 c2       	rjmp	.+1090   	; 0x283e <STP_voidDirectionAngle+0xb16>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	63 e0       	ldi	r22, 0x03	; 3
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	64 e0       	ldi	r22, 0x04	; 4
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e2       	ldi	r26, 0x20	; 32
    242a:	b1 e4       	ldi	r27, 0x41	; 65
    242c:	8d ab       	std	Y+53, r24	; 0x35
    242e:	9e ab       	std	Y+54, r25	; 0x36
    2430:	af ab       	std	Y+55, r26	; 0x37
    2432:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6d a9       	ldd	r22, Y+53	; 0x35
    2436:	7e a9       	ldd	r23, Y+54	; 0x36
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a ef       	ldi	r20, 0xFA	; 250
    2442:	54 e4       	ldi	r21, 0x44	; 68
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	89 ab       	std	Y+49, r24	; 0x31
    244e:	9a ab       	std	Y+50, r25	; 0x32
    2450:	ab ab       	std	Y+51, r26	; 0x33
    2452:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2454:	69 a9       	ldd	r22, Y+49	; 0x31
    2456:	7a a9       	ldd	r23, Y+50	; 0x32
    2458:	8b a9       	ldd	r24, Y+51	; 0x33
    245a:	9c a9       	ldd	r25, Y+52	; 0x34
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <STP_voidDirectionAngle+0x74e>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	98 ab       	std	Y+48, r25	; 0x30
    2472:	8f a7       	std	Y+47, r24	; 0x2f
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <STP_voidDirectionAngle+0x7cc>
	else if (__tmp > 65535)
    2476:	69 a9       	ldd	r22, Y+49	; 0x31
    2478:	7a a9       	ldd	r23, Y+50	; 0x32
    247a:	8b a9       	ldd	r24, Y+51	; 0x33
    247c:	9c a9       	ldd	r25, Y+52	; 0x34
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <STP_voidDirectionAngle+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6d a9       	ldd	r22, Y+53	; 0x35
    2490:	7e a9       	ldd	r23, Y+54	; 0x36
    2492:	8f a9       	ldd	r24, Y+55	; 0x37
    2494:	98 ad       	ldd	r25, Y+56	; 0x38
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	98 ab       	std	Y+48, r25	; 0x30
    24b4:	8f a7       	std	Y+47, r24	; 0x2f
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <STP_voidDirectionAngle+0x7ae>
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
    24c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <STP_voidDirectionAngle+0x79c>
    24c8:	9e a7       	std	Y+46, r25	; 0x2e
    24ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	98 ab       	std	Y+48, r25	; 0x30
    24d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d8:	98 a9       	ldd	r25, Y+48	; 0x30
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <STP_voidDirectionAngle+0x790>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <STP_voidDirectionAngle+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	69 a9       	ldd	r22, Y+49	; 0x31
    24e2:	7a a9       	ldd	r23, Y+50	; 0x32
    24e4:	8b a9       	ldd	r24, Y+51	; 0x33
    24e6:	9c a9       	ldd	r25, Y+52	; 0x34
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f6:	98 a9       	ldd	r25, Y+48	; 0x30
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
    24fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <STP_voidDirectionAngle+0x7d8>
    2504:	9c a7       	std	Y+44, r25	; 0x2c
    2506:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	61 e0       	ldi	r22, 0x01	; 1
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	63 e0       	ldi	r22, 0x03	; 3
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 e2       	ldi	r26, 0x20	; 32
    2536:	b1 e4       	ldi	r27, 0x41	; 65
    2538:	8f a3       	std	Y+39, r24	; 0x27
    253a:	98 a7       	std	Y+40, r25	; 0x28
    253c:	a9 a7       	std	Y+41, r26	; 0x29
    253e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6f a1       	ldd	r22, Y+39	; 0x27
    2542:	78 a5       	ldd	r23, Y+40	; 0x28
    2544:	89 a5       	ldd	r24, Y+41	; 0x29
    2546:	9a a5       	ldd	r25, Y+42	; 0x2a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8b a3       	std	Y+35, r24	; 0x23
    255a:	9c a3       	std	Y+36, r25	; 0x24
    255c:	ad a3       	std	Y+37, r26	; 0x25
    255e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2560:	6b a1       	ldd	r22, Y+35	; 0x23
    2562:	7c a1       	ldd	r23, Y+36	; 0x24
    2564:	8d a1       	ldd	r24, Y+37	; 0x25
    2566:	9e a1       	ldd	r25, Y+38	; 0x26
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <STP_voidDirectionAngle+0x85a>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9a a3       	std	Y+34, r25	; 0x22
    257e:	89 a3       	std	Y+33, r24	; 0x21
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <STP_voidDirectionAngle+0x8d8>
	else if (__tmp > 65535)
    2582:	6b a1       	ldd	r22, Y+35	; 0x23
    2584:	7c a1       	ldd	r23, Y+36	; 0x24
    2586:	8d a1       	ldd	r24, Y+37	; 0x25
    2588:	9e a1       	ldd	r25, Y+38	; 0x26
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <STP_voidDirectionAngle+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6f a1       	ldd	r22, Y+39	; 0x27
    259c:	78 a5       	ldd	r23, Y+40	; 0x28
    259e:	89 a5       	ldd	r24, Y+41	; 0x29
    25a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9a a3       	std	Y+34, r25	; 0x22
    25c0:	89 a3       	std	Y+33, r24	; 0x21
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <STP_voidDirectionAngle+0x8ba>
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	98 a3       	std	Y+32, r25	; 0x20
    25ca:	8f 8f       	std	Y+31, r24	; 0x1f
    25cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ce:	98 a1       	ldd	r25, Y+32	; 0x20
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <STP_voidDirectionAngle+0x8a8>
    25d4:	98 a3       	std	Y+32, r25	; 0x20
    25d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9a a3       	std	Y+34, r25	; 0x22
    25e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	89 a1       	ldd	r24, Y+33	; 0x21
    25e4:	9a a1       	ldd	r25, Y+34	; 0x22
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <STP_voidDirectionAngle+0x89c>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <STP_voidDirectionAngle+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6b a1       	ldd	r22, Y+35	; 0x23
    25ee:	7c a1       	ldd	r23, Y+36	; 0x24
    25f0:	8d a1       	ldd	r24, Y+37	; 0x25
    25f2:	9e a1       	ldd	r25, Y+38	; 0x26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9a a3       	std	Y+34, r25	; 0x22
    25fe:	89 a3       	std	Y+33, r24	; 0x21
    2600:	89 a1       	ldd	r24, Y+33	; 0x21
    2602:	9a a1       	ldd	r25, Y+34	; 0x22
    2604:	9e 8f       	std	Y+30, r25	; 0x1e
    2606:	8d 8f       	std	Y+29, r24	; 0x1d
    2608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <STP_voidDirectionAngle+0x8e4>
    2610:	9e 8f       	std	Y+30, r25	; 0x1e
    2612:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	62 e0       	ldi	r22, 0x02	; 2
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	63 e0       	ldi	r22, 0x03	; 3
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	64 e0       	ldi	r22, 0x04	; 4
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e2       	ldi	r26, 0x20	; 32
    2642:	b1 e4       	ldi	r27, 0x41	; 65
    2644:	89 8f       	std	Y+25, r24	; 0x19
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	ab 8f       	std	Y+27, r26	; 0x1b
    264a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a ef       	ldi	r20, 0xFA	; 250
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d 8b       	std	Y+21, r24	; 0x15
    2666:	9e 8b       	std	Y+22, r25	; 0x16
    2668:	af 8b       	std	Y+23, r26	; 0x17
    266a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <STP_voidDirectionAngle+0x966>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	3f c0       	rjmp	.+126    	; 0x270c <STP_voidDirectionAngle+0x9e4>
	else if (__tmp > 65535)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <STP_voidDirectionAngle+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	69 8d       	ldd	r22, Y+25	; 0x19
    26a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <STP_voidDirectionAngle+0x9c6>
    26d0:	88 ec       	ldi	r24, 0xC8	; 200
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <STP_voidDirectionAngle+0x9b4>
    26e0:	9a 8b       	std	Y+18, r25	; 0x12
    26e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <STP_voidDirectionAngle+0x9a8>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <STP_voidDirectionAngle+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <STP_voidDirectionAngle+0x9f0>
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	63 e0       	ldi	r22, 0x03	; 3
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e2       	ldi	r26, 0x20	; 32
    274e:	b1 e4       	ldi	r27, 0x41	; 65
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <STP_voidDirectionAngle+0xa72>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <STP_voidDirectionAngle+0xaf0>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <STP_voidDirectionAngle+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <STP_voidDirectionAngle+0xad2>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <STP_voidDirectionAngle+0xac0>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <STP_voidDirectionAngle+0xab4>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <STP_voidDirectionAngle+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <STP_voidDirectionAngle+0xafc>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    282c:	de 01       	movw	r26, r28
    282e:	af 58       	subi	r26, 0x8F	; 143
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	ef 58       	subi	r30, 0x8F	; 143
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8c 93       	st	X, r24
    283e:	fe 01       	movw	r30, r28
    2840:	ef 58       	subi	r30, 0x8F	; 143
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	fe 01       	movw	r30, r28
    2850:	ea 58       	subi	r30, 0x8A	; 138
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	a2 81       	ldd	r26, Z+2	; 0x02
    285a:	b3 81       	ldd	r27, Z+3	; 0x03
    285c:	28 17       	cp	r18, r24
    285e:	39 07       	cpc	r19, r25
    2860:	4a 07       	cpc	r20, r26
    2862:	5b 07       	cpc	r21, r27
    2864:	08 f4       	brcc	.+2      	; 0x2868 <STP_voidDirectionAngle+0xb40>
    2866:	ca cd       	rjmp	.-1132   	; 0x23fc <STP_voidDirectionAngle+0x6d4>
			break;
		default :
			break ;
	}

}
    2868:	c2 58       	subi	r28, 0x82	; 130
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret

00002880 <STP_voidMove>:

void STP_voidMove(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	e8 97       	sbiw	r28, 0x38	; 56
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	63 e0       	ldi	r22, 0x03	; 3
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e2       	ldi	r26, 0x20	; 32
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	8d ab       	std	Y+53, r24	; 0x35
    28c6:	9e ab       	std	Y+54, r25	; 0x36
    28c8:	af ab       	std	Y+55, r26	; 0x37
    28ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6d a9       	ldd	r22, Y+53	; 0x35
    28ce:	7e a9       	ldd	r23, Y+54	; 0x36
    28d0:	8f a9       	ldd	r24, Y+55	; 0x37
    28d2:	98 ad       	ldd	r25, Y+56	; 0x38
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	89 ab       	std	Y+49, r24	; 0x31
    28e6:	9a ab       	std	Y+50, r25	; 0x32
    28e8:	ab ab       	std	Y+51, r26	; 0x33
    28ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <STP_voidMove+0x8e>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	98 ab       	std	Y+48, r25	; 0x30
    290a:	8f a7       	std	Y+47, r24	; 0x2f
    290c:	3f c0       	rjmp	.+126    	; 0x298c <STP_voidMove+0x10c>
	else if (__tmp > 65535)
    290e:	69 a9       	ldd	r22, Y+49	; 0x31
    2910:	7a a9       	ldd	r23, Y+50	; 0x32
    2912:	8b a9       	ldd	r24, Y+51	; 0x33
    2914:	9c a9       	ldd	r25, Y+52	; 0x34
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <STP_voidMove+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	0f c0       	rjmp	.+30     	; 0x296e <STP_voidMove+0xee>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9e a7       	std	Y+46, r25	; 0x2e
    2956:	8d a7       	std	Y+45, r24	; 0x2d
    2958:	8d a5       	ldd	r24, Y+45	; 0x2d
    295a:	9e a5       	ldd	r25, Y+46	; 0x2e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <STP_voidMove+0xdc>
    2960:	9e a7       	std	Y+46, r25	; 0x2e
    2962:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	98 a9       	ldd	r25, Y+48	; 0x30
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <STP_voidMove+0xd0>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <STP_voidMove+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	9c a7       	std	Y+44, r25	; 0x2c
    2992:	8b a7       	std	Y+43, r24	; 0x2b
    2994:	8b a5       	ldd	r24, Y+43	; 0x2b
    2996:	9c a5       	ldd	r25, Y+44	; 0x2c
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <STP_voidMove+0x118>
    299c:	9c a7       	std	Y+44, r25	; 0x2c
    299e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	62 e0       	ldi	r22, 0x02	; 2
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	64 e0       	ldi	r22, 0x04	; 4
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a0 e2       	ldi	r26, 0x20	; 32
    29ce:	b1 e4       	ldi	r27, 0x41	; 65
    29d0:	8f a3       	std	Y+39, r24	; 0x27
    29d2:	98 a7       	std	Y+40, r25	; 0x28
    29d4:	a9 a7       	std	Y+41, r26	; 0x29
    29d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d8:	6f a1       	ldd	r22, Y+39	; 0x27
    29da:	78 a5       	ldd	r23, Y+40	; 0x28
    29dc:	89 a5       	ldd	r24, Y+41	; 0x29
    29de:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	4a ef       	ldi	r20, 0xFA	; 250
    29e6:	54 e4       	ldi	r21, 0x44	; 68
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	8b a3       	std	Y+35, r24	; 0x23
    29f2:	9c a3       	std	Y+36, r25	; 0x24
    29f4:	ad a3       	std	Y+37, r26	; 0x25
    29f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e8       	ldi	r20, 0x80	; 128
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	2c f4       	brge	.+10     	; 0x2a1a <STP_voidMove+0x19a>
		__ticks = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9a a3       	std	Y+34, r25	; 0x22
    2a16:	89 a3       	std	Y+33, r24	; 0x21
    2a18:	3f c0       	rjmp	.+126    	; 0x2a98 <STP_voidMove+0x218>
	else if (__tmp > 65535)
    2a1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a20:	9e a1       	ldd	r25, Y+38	; 0x26
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	4f e7       	ldi	r20, 0x7F	; 127
    2a28:	57 e4       	ldi	r21, 0x47	; 71
    2a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2e:	18 16       	cp	r1, r24
    2a30:	4c f5       	brge	.+82     	; 0x2a84 <STP_voidMove+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a32:	6f a1       	ldd	r22, Y+39	; 0x27
    2a34:	78 a5       	ldd	r23, Y+40	; 0x28
    2a36:	89 a5       	ldd	r24, Y+41	; 0x29
    2a38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e2       	ldi	r20, 0x20	; 32
    2a40:	51 e4       	ldi	r21, 0x41	; 65
    2a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9a a3       	std	Y+34, r25	; 0x22
    2a58:	89 a3       	std	Y+33, r24	; 0x21
    2a5a:	0f c0       	rjmp	.+30     	; 0x2a7a <STP_voidMove+0x1fa>
    2a5c:	88 ec       	ldi	r24, 0xC8	; 200
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	98 a3       	std	Y+32, r25	; 0x20
    2a62:	8f 8f       	std	Y+31, r24	; 0x1f
    2a64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a66:	98 a1       	ldd	r25, Y+32	; 0x20
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <STP_voidMove+0x1e8>
    2a6c:	98 a3       	std	Y+32, r25	; 0x20
    2a6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a70:	89 a1       	ldd	r24, Y+33	; 0x21
    2a72:	9a a1       	ldd	r25, Y+34	; 0x22
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	9a a3       	std	Y+34, r25	; 0x22
    2a78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	69 f7       	brne	.-38     	; 0x2a5c <STP_voidMove+0x1dc>
    2a82:	14 c0       	rjmp	.+40     	; 0x2aac <STP_voidMove+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a84:	6b a1       	ldd	r22, Y+35	; 0x23
    2a86:	7c a1       	ldd	r23, Y+36	; 0x24
    2a88:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9a a3       	std	Y+34, r25	; 0x22
    2a96:	89 a3       	std	Y+33, r24	; 0x21
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9e:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <STP_voidMove+0x224>
    2aa8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aaa:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	62 e0       	ldi	r22, 0x02	; 2
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	63 e0       	ldi	r22, 0x03	; 3
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	64 e0       	ldi	r22, 0x04	; 4
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e2       	ldi	r26, 0x20	; 32
    2ada:	b1 e4       	ldi	r27, 0x41	; 65
    2adc:	89 8f       	std	Y+25, r24	; 0x19
    2ade:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a ef       	ldi	r20, 0xFA	; 250
    2af2:	54 e4       	ldi	r21, 0x44	; 68
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	9e 8b       	std	Y+22, r25	; 0x16
    2b00:	af 8b       	std	Y+23, r26	; 0x17
    2b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <STP_voidMove+0x2a6>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <STP_voidMove+0x324>
	else if (__tmp > 65535)
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <STP_voidMove+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <STP_voidMove+0x306>
    2b68:	88 ec       	ldi	r24, 0xC8	; 200
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
    2b70:	89 89       	ldd	r24, Y+17	; 0x11
    2b72:	9a 89       	ldd	r25, Y+18	; 0x12
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <STP_voidMove+0x2f4>
    2b78:	9a 8b       	std	Y+18, r25	; 0x12
    2b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9c 8b       	std	Y+20, r25	; 0x14
    2b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	8b 89       	ldd	r24, Y+19	; 0x13
    2b88:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <STP_voidMove+0x2e8>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <STP_voidMove+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6d 89       	ldd	r22, Y+21	; 0x15
    2b92:	7e 89       	ldd	r23, Y+22	; 0x16
    2b94:	8f 89       	ldd	r24, Y+23	; 0x17
    2b96:	98 8d       	ldd	r25, Y+24	; 0x18
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f
    2bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bae:	98 89       	ldd	r25, Y+16	; 0x10
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <STP_voidMove+0x330>
    2bb4:	98 8b       	std	Y+16, r25	; 0x10
    2bb6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	61 e0       	ldi	r22, 0x01	; 1
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	62 e0       	ldi	r22, 0x02	; 2
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	63 e0       	ldi	r22, 0x03	; 3
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	64 e0       	ldi	r22, 0x04	; 4
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a0 e2       	ldi	r26, 0x20	; 32
    2be6:	b1 e4       	ldi	r27, 0x41	; 65
    2be8:	8b 87       	std	Y+11, r24	; 0x0b
    2bea:	9c 87       	std	Y+12, r25	; 0x0c
    2bec:	ad 87       	std	Y+13, r26	; 0x0d
    2bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a ef       	ldi	r20, 0xFA	; 250
    2bfe:	54 e4       	ldi	r21, 0x44	; 68
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8f 83       	std	Y+7, r24	; 0x07
    2c0a:	98 87       	std	Y+8, r25	; 0x08
    2c0c:	a9 87       	std	Y+9, r26	; 0x09
    2c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <STP_voidMove+0x3b2>
		__ticks = 1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
    2c30:	3f c0       	rjmp	.+126    	; 0x2cb0 <STP_voidMove+0x430>
	else if (__tmp > 65535)
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	3f ef       	ldi	r19, 0xFF	; 255
    2c3e:	4f e7       	ldi	r20, 0x7F	; 127
    2c40:	57 e4       	ldi	r21, 0x47	; 71
    2c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c46:	18 16       	cp	r1, r24
    2c48:	4c f5       	brge	.+82     	; 0x2c9c <STP_voidMove+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	0f c0       	rjmp	.+30     	; 0x2c92 <STP_voidMove+0x412>
    2c74:	88 ec       	ldi	r24, 0xC8	; 200
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <STP_voidMove+0x400>
    2c84:	9c 83       	std	Y+4, r25	; 0x04
    2c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	69 f7       	brne	.-38     	; 0x2c74 <STP_voidMove+0x3f4>
    2c9a:	fc cd       	rjmp	.-1032   	; 0x2894 <STP_voidMove+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <STP_voidMove+0x43c>
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	e7 cd       	rjmp	.-1074   	; 0x2894 <STP_voidMove+0x14>

00002cc6 <STP_voidStop>:
			_delay_ms(10);
	}
}

void STP_voidStop(void)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	2e 97       	sbiw	r28, 0x0e	; 14
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	61 e0       	ldi	r22, 0x01	; 1
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	62 e0       	ldi	r22, 0x02	; 2
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	63 e0       	ldi	r22, 0x03	; 3
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	64 e0       	ldi	r22, 0x04	; 4
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e2       	ldi	r26, 0x20	; 32
    2d08:	b1 e4       	ldi	r27, 0x41	; 65
    2d0a:	8b 87       	std	Y+11, r24	; 0x0b
    2d0c:	9c 87       	std	Y+12, r25	; 0x0c
    2d0e:	ad 87       	std	Y+13, r26	; 0x0d
    2d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a ef       	ldi	r20, 0xFA	; 250
    2d20:	54 e4       	ldi	r21, 0x44	; 68
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8f 83       	std	Y+7, r24	; 0x07
    2d2c:	98 87       	std	Y+8, r25	; 0x08
    2d2e:	a9 87       	std	Y+9, r26	; 0x09
    2d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d32:	6f 81       	ldd	r22, Y+7	; 0x07
    2d34:	78 85       	ldd	r23, Y+8	; 0x08
    2d36:	89 85       	ldd	r24, Y+9	; 0x09
    2d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <STP_voidStop+0x8e>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <STP_voidStop+0x10c>
	else if (__tmp > 65535)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <STP_voidStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <STP_voidStop+0xee>
    2d96:	88 ec       	ldi	r24, 0xC8	; 200
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <STP_voidStop+0xdc>
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <STP_voidStop+0xd0>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <STP_voidStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc0:	78 85       	ldd	r23, Y+8	; 0x08
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <STP_voidStop+0x118>
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2de6:	2e 96       	adiw	r28, 0x0e	; 14
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	62 97       	sbiw	r28, 0x12	; 18
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	99 8b       	std	Y+17, r25	; 0x11
    2e0e:	88 8b       	std	Y+16, r24	; 0x10
    2e10:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    2e12:	88 89       	ldd	r24, Y+16	; 0x10
    2e14:	99 89       	ldd	r25, Y+17	; 0x11
    2e16:	89 2f       	mov	r24, r25
    2e18:	99 27       	eor	r25, r25
    2e1a:	80 65       	ori	r24, 0x50	; 80
    2e1c:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2e1e:	0e 94 85 06 	call	0xd0a	; 0xd0a <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    2e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e24:	0e 94 d2 06 	call	0xda4	; 0xda4 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2e28:	88 89       	ldd	r24, Y+16	; 0x10
    2e2a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    2e2e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e30:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    2e34:	0e 94 96 07 	call	0xf2c	; 0xf2c <TWI_voidSendStopCondition>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e2       	ldi	r26, 0x20	; 32
    2e3e:	b1 e4       	ldi	r27, 0x41	; 65
    2e40:	8b 87       	std	Y+11, r24	; 0x0b
    2e42:	9c 87       	std	Y+12, r25	; 0x0c
    2e44:	ad 87       	std	Y+13, r26	; 0x0d
    2e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a ef       	ldi	r20, 0xFA	; 250
    2e56:	54 e4       	ldi	r21, 0x44	; 68
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8f 83       	std	Y+7, r24	; 0x07
    2e62:	98 87       	std	Y+8, r25	; 0x08
    2e64:	a9 87       	std	Y+9, r26	; 0x09
    2e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e68:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6a:	78 85       	ldd	r23, Y+8	; 0x08
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	3f c0       	rjmp	.+126    	; 0x2f08 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	3f ef       	ldi	r19, 0xFF	; 255
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	57 e4       	ldi	r21, 0x47	; 71
    2e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9e:	18 16       	cp	r1, r24
    2ea0:	4c f5       	brge	.+82     	; 0x2ef4 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <EEPROM_voidSendDataByte+0xf2>
    2ecc:	88 ec       	ldi	r24, 0xC8	; 200
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <EEPROM_voidSendDataByte+0xe0>
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	69 f7       	brne	.-38     	; 0x2ecc <EEPROM_voidSendDataByte+0xd4>
    2ef2:	14 c0       	rjmp	.+40     	; 0x2f1c <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <EEPROM_voidSendDataByte+0x11c>
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    2f1c:	62 96       	adiw	r28, 0x12	; 18
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	62 97       	sbiw	r28, 0x12	; 18
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	9a 8b       	std	Y+18, r25	; 0x12
    2f44:	89 8b       	std	Y+17, r24	; 0x11
	u8 Data ;
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    2f46:	89 89       	ldd	r24, Y+17	; 0x11
    2f48:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4a:	89 2f       	mov	r24, r25
    2f4c:	99 27       	eor	r25, r25
    2f4e:	80 65       	ori	r24, 0x50	; 80
    2f50:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2f52:	0e 94 85 06 	call	0xd0a	; 0xd0a <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	0e 94 d2 06 	call	0xda4	; 0xda4 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    2f62:	0e 94 af 06 	call	0xd5e	; 0xd5e <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_add);
    2f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f68:	0e 94 09 07 	call	0xe12	; 0xe12 <TWI_ErrorStatusSendSlaveAddressWithReadACK>

	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Data);
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	40 96       	adiw	r24, 0x10	; 16
    2f70:	0e 94 67 07 	call	0xece	; 0xece <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    2f74:	0e 94 96 07 	call	0xf2c	; 0xf2c <TWI_voidSendStopCondition>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a0 e2       	ldi	r26, 0x20	; 32
    2f7e:	b1 e4       	ldi	r27, 0x41	; 65
    2f80:	8b 87       	std	Y+11, r24	; 0x0b
    2f82:	9c 87       	std	Y+12, r25	; 0x0c
    2f84:	ad 87       	std	Y+13, r26	; 0x0d
    2f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	4a ef       	ldi	r20, 0xFA	; 250
    2f96:	54 e4       	ldi	r21, 0x44	; 68
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	8f 83       	std	Y+7, r24	; 0x07
    2fa2:	98 87       	std	Y+8, r25	; 0x08
    2fa4:	a9 87       	std	Y+9, r26	; 0x09
    2fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2faa:	78 85       	ldd	r23, Y+8	; 0x08
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	2c f4       	brge	.+10     	; 0x2fca <EEPROM_u8ReadDataByte+0x9c>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <EEPROM_u8ReadDataByte+0x11a>
	else if (__tmp > 65535)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	4c f5       	brge	.+82     	; 0x3034 <EEPROM_u8ReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e2       	ldi	r20, 0x20	; 32
    2ff0:	51 e4       	ldi	r21, 0x41	; 65
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	0f c0       	rjmp	.+30     	; 0x302a <EEPROM_u8ReadDataByte+0xfc>
    300c:	88 ec       	ldi	r24, 0xC8	; 200
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <EEPROM_u8ReadDataByte+0xea>
    301c:	9c 83       	std	Y+4, r25	; 0x04
    301e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	9e 81       	ldd	r25, Y+6	; 0x06
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	9e 81       	ldd	r25, Y+6	; 0x06
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	69 f7       	brne	.-38     	; 0x300c <EEPROM_u8ReadDataByte+0xde>
    3032:	14 c0       	rjmp	.+40     	; 0x305c <EEPROM_u8ReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3034:	6f 81       	ldd	r22, Y+7	; 0x07
    3036:	78 85       	ldd	r23, Y+8	; 0x08
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	9a 85       	ldd	r25, Y+10	; 0x0a
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <EEPROM_u8ReadDataByte+0x126>
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
	/*Delay until the write cycle is finished*/
	_delay_ms(10);
	//return data
	return Data ;
    305c:	88 89       	ldd	r24, Y+16	; 0x10
}
    305e:	62 96       	adiw	r28, 0x12	; 18
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <main>:

#include "../HAL/StepMotor/STP_interface.h"


int main()
{
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	c4 5d       	subi	r28, 0xD4	; 212
    307e:	d0 40       	sbci	r29, 0x00	; 0
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(PORTD , PIN0 , OUTPUT);
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD , PIN1 , INPUT);
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	u8 Recieved = 0 ;
    309e:	fe 01       	movw	r30, r28
    30a0:	ec 52       	subi	r30, 0x2C	; 44
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	10 82       	st	Z, r1
	UART_voidInit();
    30a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
	//servo
	DIO_voidSetPinDirection(PORTD ,PIN5 , OUTPUT);
    30aa:	83 e0       	ldi	r24, 0x03	; 3
    30ac:	65 e0       	ldi	r22, 0x05	; 5
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_voidSetPinDirection>
	TIMER1_voidInit() ;
    30b4:	0e 94 b1 08 	call	0x1162	; 0x1162 <TIMER1_voidInit>


	//eeprom
	u8 Return_Data =3 ;
    30b8:	fe 01       	movw	r30, r28
    30ba:	ed 52       	subi	r30, 0x2D	; 45
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	83 e0       	ldi	r24, 0x03	; 3
    30c0:	80 83       	st	Z, r24
	TWI_voidInitMaster(0);
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 36 06 	call	0xc6c	; 0xc6c <TWI_voidInitMaster>
	Return_Data = EEPROM_u8ReadDataByte(5);
    30ca:	85 e0       	ldi	r24, 0x05	; 5
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <EEPROM_u8ReadDataByte>
    30d2:	fe 01       	movw	r30, r28
    30d4:	ed 52       	subi	r30, 0x2D	; 45
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 83       	st	Z, r24
	EEPROM_voidSendDataByte(5,3);
    30da:	85 e0       	ldi	r24, 0x05	; 5
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	63 e0       	ldi	r22, 0x03	; 3
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <EEPROM_voidSendDataByte>



	DIO_voidSetPortDirection(PORTA,0xff);
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	6f ef       	ldi	r22, 0xFF	; 255
    30ea:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <DIO_voidSetPortDirection>
	DIO_voidSetPortvalue(PORTA,0X00);
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_voidSetPortvalue>

	while(1)
	{
		UART_u8RecieveData(&Recieved);
    30f6:	ce 01       	movw	r24, r28
    30f8:	8c 52       	subi	r24, 0x2C	; 44
    30fa:	9f 4f       	sbci	r25, 0xFF	; 255
    30fc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <UART_u8RecieveData>
		Return_Data = EEPROM_u8ReadDataByte(5);
    3100:	85 e0       	ldi	r24, 0x05	; 5
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <EEPROM_u8ReadDataByte>
    3108:	fe 01       	movw	r30, r28
    310a:	ed 52       	subi	r30, 0x2D	; 45
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 83       	st	Z, r24

		if(Recieved == 's')
    3110:	fe 01       	movw	r30, r28
    3112:	ec 52       	subi	r30, 0x2C	; 44
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	83 37       	cpi	r24, 0x73	; 115
    311a:	21 f4       	brne	.+8      	; 0x3124 <main+0xb4>
		{
			TIMER1_voidSetPinACompareMatch(1999);
    311c:	8f ec       	ldi	r24, 0xCF	; 207
    311e:	97 e0       	ldi	r25, 0x07	; 7
    3120:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER1_voidSetPinACompareMatch>
		}
		if(Recieved == 'a')
    3124:	fe 01       	movw	r30, r28
    3126:	ec 52       	subi	r30, 0x2C	; 44
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	81 36       	cpi	r24, 0x61	; 97
    312e:	09 f0       	breq	.+2      	; 0x3132 <main+0xc2>
    3130:	e5 c2       	rjmp	.+1482   	; 0x36fc <main+0x68c>
		{

			DIO_voidSetPinvalue(PORTA , PIN0 , HIGH);
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	41 e0       	ldi	r20, 0x01	; 1
    3138:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    313c:	fe 01       	movw	r30, r28
    313e:	e1 53       	subi	r30, 0x31	; 49
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a0 ea       	ldi	r26, 0xA0	; 160
    3148:	b1 e4       	ldi	r27, 0x41	; 65
    314a:	80 83       	st	Z, r24
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	a2 83       	std	Z+2, r26	; 0x02
    3150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	8e 01       	movw	r16, r28
    3154:	05 53       	subi	r16, 0x35	; 53
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	e1 53       	subi	r30, 0x31	; 49
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	4a ef       	ldi	r20, 0xFA	; 250
    316c:	54 e4       	ldi	r21, 0x44	; 68
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	f8 01       	movw	r30, r16
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3180:	fe 01       	movw	r30, r28
    3182:	e5 53       	subi	r30, 0x35	; 53
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	44 f4       	brge	.+16     	; 0x31ae <main+0x13e>
		__ticks = 1;
    319e:	fe 01       	movw	r30, r28
    31a0:	e7 53       	subi	r30, 0x37	; 55
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	64 c0       	rjmp	.+200    	; 0x3276 <main+0x206>
	else if (__tmp > 65535)
    31ae:	fe 01       	movw	r30, r28
    31b0:	e5 53       	subi	r30, 0x35	; 53
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	0c f0       	brlt	.+2      	; 0x31ce <main+0x15e>
    31cc:	43 c0       	rjmp	.+134    	; 0x3254 <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	fe 01       	movw	r30, r28
    31d0:	e1 53       	subi	r30, 0x31	; 49
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8e 01       	movw	r16, r28
    31ee:	07 53       	subi	r16, 0x37	; 55
    31f0:	1f 4f       	sbci	r17, 0xFF	; 255
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <main+0x1d4>
    3206:	fe 01       	movw	r30, r28
    3208:	e9 53       	subi	r30, 0x39	; 57
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	88 ec       	ldi	r24, 0xC8	; 200
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
    3214:	fe 01       	movw	r30, r28
    3216:	e9 53       	subi	r30, 0x39	; 57
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <main+0x1ae>
    3222:	fe 01       	movw	r30, r28
    3224:	e9 53       	subi	r30, 0x39	; 57
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	de 01       	movw	r26, r28
    322e:	a7 53       	subi	r26, 0x37	; 55
    3230:	bf 4f       	sbci	r27, 0xFF	; 255
    3232:	fe 01       	movw	r30, r28
    3234:	e7 53       	subi	r30, 0x37	; 55
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	fe 01       	movw	r30, r28
    3246:	e7 53       	subi	r30, 0x37	; 55
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	d1 f6       	brne	.-76     	; 0x3206 <main+0x196>
    3252:	27 c0       	rjmp	.+78     	; 0x32a2 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	8e 01       	movw	r16, r28
    3256:	07 53       	subi	r16, 0x37	; 55
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	fe 01       	movw	r30, r28
    325c:	e5 53       	subi	r30, 0x35	; 53
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	f8 01       	movw	r30, r16
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	de 01       	movw	r26, r28
    3278:	ab 53       	subi	r26, 0x3B	; 59
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	fe 01       	movw	r30, r28
    327e:	e7 53       	subi	r30, 0x37	; 55
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	8d 93       	st	X+, r24
    3288:	9c 93       	st	X, r25
    328a:	fe 01       	movw	r30, r28
    328c:	eb 53       	subi	r30, 0x3B	; 59
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <main+0x224>
    3298:	fe 01       	movw	r30, r28
    329a:	eb 53       	subi	r30, 0x3B	; 59
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
			_delay_ms(20);
			DIO_voidSetPinvalue(PORTA , PIN0 , LOW);	_delay_ms(100);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    32ac:	fe 01       	movw	r30, r28
    32ae:	ef 53       	subi	r30, 0x3F	; 63
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a8 ec       	ldi	r26, 0xC8	; 200
    32b8:	b2 e4       	ldi	r27, 0x42	; 66
    32ba:	80 83       	st	Z, r24
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	a2 83       	std	Z+2, r26	; 0x02
    32c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c2:	8e 01       	movw	r16, r28
    32c4:	03 54       	subi	r16, 0x43	; 67
    32c6:	1f 4f       	sbci	r17, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	ef 53       	subi	r30, 0x3F	; 63
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4a ef       	ldi	r20, 0xFA	; 250
    32dc:	54 e4       	ldi	r21, 0x44	; 68
    32de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	f8 01       	movw	r30, r16
    32e8:	80 83       	st	Z, r24
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	a2 83       	std	Z+2, r26	; 0x02
    32ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32f0:	fe 01       	movw	r30, r28
    32f2:	e3 54       	subi	r30, 0x43	; 67
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e8       	ldi	r20, 0x80	; 128
    3304:	5f e3       	ldi	r21, 0x3F	; 63
    3306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    330a:	88 23       	and	r24, r24
    330c:	44 f4       	brge	.+16     	; 0x331e <main+0x2ae>
		__ticks = 1;
    330e:	fe 01       	movw	r30, r28
    3310:	e5 54       	subi	r30, 0x45	; 69
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
    331c:	64 c0       	rjmp	.+200    	; 0x33e6 <main+0x376>
	else if (__tmp > 65535)
    331e:	fe 01       	movw	r30, r28
    3320:	e3 54       	subi	r30, 0x43	; 67
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	0c f0       	brlt	.+2      	; 0x333e <main+0x2ce>
    333c:	43 c0       	rjmp	.+134    	; 0x33c4 <main+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	fe 01       	movw	r30, r28
    3340:	ef 53       	subi	r30, 0x3F	; 63
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	60 81       	ld	r22, Z
    3346:	71 81       	ldd	r23, Z+1	; 0x01
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e2       	ldi	r20, 0x20	; 32
    3352:	51 e4       	ldi	r21, 0x41	; 65
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	8e 01       	movw	r16, r28
    335e:	05 54       	subi	r16, 0x45	; 69
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	f8 01       	movw	r30, r16
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24
    3374:	1f c0       	rjmp	.+62     	; 0x33b4 <main+0x344>
    3376:	fe 01       	movw	r30, r28
    3378:	e7 54       	subi	r30, 0x47	; 71
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	88 ec       	ldi	r24, 0xC8	; 200
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	91 83       	std	Z+1, r25	; 0x01
    3382:	80 83       	st	Z, r24
    3384:	fe 01       	movw	r30, r28
    3386:	e7 54       	subi	r30, 0x47	; 71
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <main+0x31e>
    3392:	fe 01       	movw	r30, r28
    3394:	e7 54       	subi	r30, 0x47	; 71
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339c:	de 01       	movw	r26, r28
    339e:	a5 54       	subi	r26, 0x45	; 69
    33a0:	bf 4f       	sbci	r27, 0xFF	; 255
    33a2:	fe 01       	movw	r30, r28
    33a4:	e5 54       	subi	r30, 0x45	; 69
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	11 96       	adiw	r26, 0x01	; 1
    33b0:	9c 93       	st	X, r25
    33b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b4:	fe 01       	movw	r30, r28
    33b6:	e5 54       	subi	r30, 0x45	; 69
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	d1 f6       	brne	.-76     	; 0x3376 <main+0x306>
    33c2:	27 c0       	rjmp	.+78     	; 0x3412 <main+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c4:	8e 01       	movw	r16, r28
    33c6:	05 54       	subi	r16, 0x45	; 69
    33c8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	e3 54       	subi	r30, 0x43	; 67
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	f8 01       	movw	r30, r16
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    33e6:	de 01       	movw	r26, r28
    33e8:	a9 54       	subi	r26, 0x49	; 73
    33ea:	bf 4f       	sbci	r27, 0xFF	; 255
    33ec:	fe 01       	movw	r30, r28
    33ee:	e5 54       	subi	r30, 0x45	; 69
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	8d 93       	st	X+, r24
    33f8:	9c 93       	st	X, r25
    33fa:	fe 01       	movw	r30, r28
    33fc:	e9 54       	subi	r30, 0x49	; 73
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <main+0x394>
    3408:	fe 01       	movw	r30, r28
    340a:	e9 54       	subi	r30, 0x49	; 73
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN0 , HIGH);	_delay_ms(100);
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    341c:	fe 01       	movw	r30, r28
    341e:	ed 54       	subi	r30, 0x4D	; 77
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a8 ec       	ldi	r26, 0xC8	; 200
    3428:	b2 e4       	ldi	r27, 0x42	; 66
    342a:	80 83       	st	Z, r24
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	a2 83       	std	Z+2, r26	; 0x02
    3430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3432:	8e 01       	movw	r16, r28
    3434:	01 55       	subi	r16, 0x51	; 81
    3436:	1f 4f       	sbci	r17, 0xFF	; 255
    3438:	fe 01       	movw	r30, r28
    343a:	ed 54       	subi	r30, 0x4D	; 77
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	60 81       	ld	r22, Z
    3440:	71 81       	ldd	r23, Z+1	; 0x01
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	93 81       	ldd	r25, Z+3	; 0x03
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	4a ef       	ldi	r20, 0xFA	; 250
    344c:	54 e4       	ldi	r21, 0x44	; 68
    344e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	f8 01       	movw	r30, r16
    3458:	80 83       	st	Z, r24
    345a:	91 83       	std	Z+1, r25	; 0x01
    345c:	a2 83       	std	Z+2, r26	; 0x02
    345e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3460:	fe 01       	movw	r30, r28
    3462:	e1 55       	subi	r30, 0x51	; 81
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e8       	ldi	r20, 0x80	; 128
    3474:	5f e3       	ldi	r21, 0x3F	; 63
    3476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    347a:	88 23       	and	r24, r24
    347c:	44 f4       	brge	.+16     	; 0x348e <main+0x41e>
		__ticks = 1;
    347e:	fe 01       	movw	r30, r28
    3480:	e3 55       	subi	r30, 0x53	; 83
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
    348c:	64 c0       	rjmp	.+200    	; 0x3556 <main+0x4e6>
	else if (__tmp > 65535)
    348e:	fe 01       	movw	r30, r28
    3490:	e1 55       	subi	r30, 0x51	; 81
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	3f ef       	ldi	r19, 0xFF	; 255
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	57 e4       	ldi	r21, 0x47	; 71
    34a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <main+0x43e>
    34ac:	43 c0       	rjmp	.+134    	; 0x3534 <main+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ae:	fe 01       	movw	r30, r28
    34b0:	ed 54       	subi	r30, 0x4D	; 77
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	60 81       	ld	r22, Z
    34b6:	71 81       	ldd	r23, Z+1	; 0x01
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	93 81       	ldd	r25, Z+3	; 0x03
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e2       	ldi	r20, 0x20	; 32
    34c2:	51 e4       	ldi	r21, 0x41	; 65
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	8e 01       	movw	r16, r28
    34ce:	03 55       	subi	r16, 0x53	; 83
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	bc 01       	movw	r22, r24
    34d4:	cd 01       	movw	r24, r26
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	f8 01       	movw	r30, r16
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
    34e4:	1f c0       	rjmp	.+62     	; 0x3524 <main+0x4b4>
    34e6:	fe 01       	movw	r30, r28
    34e8:	e5 55       	subi	r30, 0x55	; 85
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	88 ec       	ldi	r24, 0xC8	; 200
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	fe 01       	movw	r30, r28
    34f6:	e5 55       	subi	r30, 0x55	; 85
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	91 81       	ldd	r25, Z+1	; 0x01
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <main+0x48e>
    3502:	fe 01       	movw	r30, r28
    3504:	e5 55       	subi	r30, 0x55	; 85
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350c:	de 01       	movw	r26, r28
    350e:	a3 55       	subi	r26, 0x53	; 83
    3510:	bf 4f       	sbci	r27, 0xFF	; 255
    3512:	fe 01       	movw	r30, r28
    3514:	e3 55       	subi	r30, 0x53	; 83
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	80 81       	ld	r24, Z
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	11 96       	adiw	r26, 0x01	; 1
    3520:	9c 93       	st	X, r25
    3522:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3524:	fe 01       	movw	r30, r28
    3526:	e3 55       	subi	r30, 0x53	; 83
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	d1 f6       	brne	.-76     	; 0x34e6 <main+0x476>
    3532:	27 c0       	rjmp	.+78     	; 0x3582 <main+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3534:	8e 01       	movw	r16, r28
    3536:	03 55       	subi	r16, 0x53	; 83
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	e1 55       	subi	r30, 0x51	; 81
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	f8 01       	movw	r30, r16
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	80 83       	st	Z, r24
    3556:	de 01       	movw	r26, r28
    3558:	a7 55       	subi	r26, 0x57	; 87
    355a:	bf 4f       	sbci	r27, 0xFF	; 255
    355c:	fe 01       	movw	r30, r28
    355e:	e3 55       	subi	r30, 0x53	; 83
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	8d 93       	st	X+, r24
    3568:	9c 93       	st	X, r25
    356a:	fe 01       	movw	r30, r28
    356c:	e7 55       	subi	r30, 0x57	; 87
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <main+0x504>
    3578:	fe 01       	movw	r30, r28
    357a:	e7 55       	subi	r30, 0x57	; 87
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN0 , LOW);	_delay_ms(100);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    358c:	fe 01       	movw	r30, r28
    358e:	eb 55       	subi	r30, 0x5B	; 91
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	a8 ec       	ldi	r26, 0xC8	; 200
    3598:	b2 e4       	ldi	r27, 0x42	; 66
    359a:	80 83       	st	Z, r24
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	a2 83       	std	Z+2, r26	; 0x02
    35a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a2:	8e 01       	movw	r16, r28
    35a4:	0f 55       	subi	r16, 0x5F	; 95
    35a6:	1f 4f       	sbci	r17, 0xFF	; 255
    35a8:	fe 01       	movw	r30, r28
    35aa:	eb 55       	subi	r30, 0x5B	; 91
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	4a ef       	ldi	r20, 0xFA	; 250
    35bc:	54 e4       	ldi	r21, 0x44	; 68
    35be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	f8 01       	movw	r30, r16
    35c8:	80 83       	st	Z, r24
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	a2 83       	std	Z+2, r26	; 0x02
    35ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35d0:	fe 01       	movw	r30, r28
    35d2:	ef 55       	subi	r30, 0x5F	; 95
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	60 81       	ld	r22, Z
    35d8:	71 81       	ldd	r23, Z+1	; 0x01
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	93 81       	ldd	r25, Z+3	; 0x03
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e8       	ldi	r20, 0x80	; 128
    35e4:	5f e3       	ldi	r21, 0x3F	; 63
    35e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ea:	88 23       	and	r24, r24
    35ec:	44 f4       	brge	.+16     	; 0x35fe <main+0x58e>
		__ticks = 1;
    35ee:	fe 01       	movw	r30, r28
    35f0:	e1 56       	subi	r30, 0x61	; 97
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24
    35fc:	64 c0       	rjmp	.+200    	; 0x36c6 <main+0x656>
	else if (__tmp > 65535)
    35fe:	fe 01       	movw	r30, r28
    3600:	ef 55       	subi	r30, 0x5F	; 95
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	0c f0       	brlt	.+2      	; 0x361e <main+0x5ae>
    361c:	43 c0       	rjmp	.+134    	; 0x36a4 <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361e:	fe 01       	movw	r30, r28
    3620:	eb 55       	subi	r30, 0x5B	; 91
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	82 81       	ldd	r24, Z+2	; 0x02
    362a:	93 81       	ldd	r25, Z+3	; 0x03
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	8e 01       	movw	r16, r28
    363e:	01 56       	subi	r16, 0x61	; 97
    3640:	1f 4f       	sbci	r17, 0xFF	; 255
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	f8 01       	movw	r30, r16
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	1f c0       	rjmp	.+62     	; 0x3694 <main+0x624>
    3656:	fe 01       	movw	r30, r28
    3658:	e3 56       	subi	r30, 0x63	; 99
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	fe 01       	movw	r30, r28
    3666:	e3 56       	subi	r30, 0x63	; 99
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <main+0x5fe>
    3672:	fe 01       	movw	r30, r28
    3674:	e3 56       	subi	r30, 0x63	; 99
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	de 01       	movw	r26, r28
    367e:	a1 56       	subi	r26, 0x61	; 97
    3680:	bf 4f       	sbci	r27, 0xFF	; 255
    3682:	fe 01       	movw	r30, r28
    3684:	e1 56       	subi	r30, 0x61	; 97
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	11 96       	adiw	r26, 0x01	; 1
    3690:	9c 93       	st	X, r25
    3692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3694:	fe 01       	movw	r30, r28
    3696:	e1 56       	subi	r30, 0x61	; 97
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	d1 f6       	brne	.-76     	; 0x3656 <main+0x5e6>
    36a2:	27 c0       	rjmp	.+78     	; 0x36f2 <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a4:	8e 01       	movw	r16, r28
    36a6:	01 56       	subi	r16, 0x61	; 97
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 55       	subi	r30, 0x5F	; 95
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	f8 01       	movw	r30, r16
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	de 01       	movw	r26, r28
    36c8:	a5 56       	subi	r26, 0x65	; 101
    36ca:	bf 4f       	sbci	r27, 0xFF	; 255
    36cc:	fe 01       	movw	r30, r28
    36ce:	e1 56       	subi	r30, 0x61	; 97
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	8d 93       	st	X+, r24
    36d8:	9c 93       	st	X, r25
    36da:	fe 01       	movw	r30, r28
    36dc:	e5 56       	subi	r30, 0x65	; 101
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <main+0x674>
    36e8:	fe 01       	movw	r30, r28
    36ea:	e5 56       	subi	r30, 0x65	; 101
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN0 , HIGH);
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	41 e0       	ldi	r20, 0x01	; 1
    36f8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
		}
		if(Recieved == 'b')
    36fc:	fe 01       	movw	r30, r28
    36fe:	ec 52       	subi	r30, 0x2C	; 44
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 81       	ld	r24, Z
    3704:	82 36       	cpi	r24, 0x62	; 98
    3706:	09 f0       	breq	.+2      	; 0x370a <main+0x69a>
    3708:	33 c2       	rjmp	.+1126   	; 0x3b70 <main+0xb00>
		{
			EEPROM_voidSendDataByte(5,2);
    370a:	85 e0       	ldi	r24, 0x05	; 5
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	62 e0       	ldi	r22, 0x02	; 2
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <EEPROM_voidSendDataByte>
			DIO_voidSetPinvalue(PORTA , PIN1 , HIGH);   _delay_ms(100);
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	61 e0       	ldi	r22, 0x01	; 1
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3720:	fe 01       	movw	r30, r28
    3722:	e9 56       	subi	r30, 0x69	; 105
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	a8 ec       	ldi	r26, 0xC8	; 200
    372c:	b2 e4       	ldi	r27, 0x42	; 66
    372e:	80 83       	st	Z, r24
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	a2 83       	std	Z+2, r26	; 0x02
    3734:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3736:	8e 01       	movw	r16, r28
    3738:	0d 56       	subi	r16, 0x6D	; 109
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e9 56       	subi	r30, 0x69	; 105
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	60 81       	ld	r22, Z
    3744:	71 81       	ldd	r23, Z+1	; 0x01
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4a ef       	ldi	r20, 0xFA	; 250
    3750:	54 e4       	ldi	r21, 0x44	; 68
    3752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	f8 01       	movw	r30, r16
    375c:	80 83       	st	Z, r24
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	a2 83       	std	Z+2, r26	; 0x02
    3762:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3764:	fe 01       	movw	r30, r28
    3766:	ed 56       	subi	r30, 0x6D	; 109
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e8       	ldi	r20, 0x80	; 128
    3778:	5f e3       	ldi	r21, 0x3F	; 63
    377a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    377e:	88 23       	and	r24, r24
    3780:	44 f4       	brge	.+16     	; 0x3792 <main+0x722>
		__ticks = 1;
    3782:	fe 01       	movw	r30, r28
    3784:	ef 56       	subi	r30, 0x6F	; 111
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
    3790:	64 c0       	rjmp	.+200    	; 0x385a <main+0x7ea>
	else if (__tmp > 65535)
    3792:	fe 01       	movw	r30, r28
    3794:	ed 56       	subi	r30, 0x6D	; 109
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	3f ef       	ldi	r19, 0xFF	; 255
    37a4:	4f e7       	ldi	r20, 0x7F	; 127
    37a6:	57 e4       	ldi	r21, 0x47	; 71
    37a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ac:	18 16       	cp	r1, r24
    37ae:	0c f0       	brlt	.+2      	; 0x37b2 <main+0x742>
    37b0:	43 c0       	rjmp	.+134    	; 0x3838 <main+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b2:	fe 01       	movw	r30, r28
    37b4:	e9 56       	subi	r30, 0x69	; 105
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e2       	ldi	r20, 0x20	; 32
    37c6:	51 e4       	ldi	r21, 0x41	; 65
    37c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	8e 01       	movw	r16, r28
    37d2:	0f 56       	subi	r16, 0x6F	; 111
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	f8 01       	movw	r30, r16
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	1f c0       	rjmp	.+62     	; 0x3828 <main+0x7b8>
    37ea:	fe 01       	movw	r30, r28
    37ec:	e1 57       	subi	r30, 0x71	; 113
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	88 ec       	ldi	r24, 0xC8	; 200
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	80 83       	st	Z, r24
    37f8:	fe 01       	movw	r30, r28
    37fa:	e1 57       	subi	r30, 0x71	; 113
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <main+0x792>
    3806:	fe 01       	movw	r30, r28
    3808:	e1 57       	subi	r30, 0x71	; 113
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3810:	de 01       	movw	r26, r28
    3812:	af 56       	subi	r26, 0x6F	; 111
    3814:	bf 4f       	sbci	r27, 0xFF	; 255
    3816:	fe 01       	movw	r30, r28
    3818:	ef 56       	subi	r30, 0x6F	; 111
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	11 96       	adiw	r26, 0x01	; 1
    3824:	9c 93       	st	X, r25
    3826:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3828:	fe 01       	movw	r30, r28
    382a:	ef 56       	subi	r30, 0x6F	; 111
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	d1 f6       	brne	.-76     	; 0x37ea <main+0x77a>
    3836:	27 c0       	rjmp	.+78     	; 0x3886 <main+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3838:	8e 01       	movw	r16, r28
    383a:	0f 56       	subi	r16, 0x6F	; 111
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
    383e:	fe 01       	movw	r30, r28
    3840:	ed 56       	subi	r30, 0x6D	; 109
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
    385a:	de 01       	movw	r26, r28
    385c:	a3 57       	subi	r26, 0x73	; 115
    385e:	bf 4f       	sbci	r27, 0xFF	; 255
    3860:	fe 01       	movw	r30, r28
    3862:	ef 56       	subi	r30, 0x6F	; 111
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	8d 93       	st	X+, r24
    386c:	9c 93       	st	X, r25
    386e:	fe 01       	movw	r30, r28
    3870:	e3 57       	subi	r30, 0x73	; 115
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <main+0x808>
    387c:	fe 01       	movw	r30, r28
    387e:	e3 57       	subi	r30, 0x73	; 115
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN1 , HIGH);	_delay_ms(100);
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	61 e0       	ldi	r22, 0x01	; 1
    388a:	41 e0       	ldi	r20, 0x01	; 1
    388c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3890:	fe 01       	movw	r30, r28
    3892:	e7 57       	subi	r30, 0x77	; 119
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	a8 ec       	ldi	r26, 0xC8	; 200
    389c:	b2 e4       	ldi	r27, 0x42	; 66
    389e:	80 83       	st	Z, r24
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	a2 83       	std	Z+2, r26	; 0x02
    38a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a6:	8e 01       	movw	r16, r28
    38a8:	0b 57       	subi	r16, 0x7B	; 123
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	fe 01       	movw	r30, r28
    38ae:	e7 57       	subi	r30, 0x77	; 119
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4a ef       	ldi	r20, 0xFA	; 250
    38c0:	54 e4       	ldi	r21, 0x44	; 68
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	f8 01       	movw	r30, r16
    38cc:	80 83       	st	Z, r24
    38ce:	91 83       	std	Z+1, r25	; 0x01
    38d0:	a2 83       	std	Z+2, r26	; 0x02
    38d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38d4:	fe 01       	movw	r30, r28
    38d6:	eb 57       	subi	r30, 0x7B	; 123
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	60 81       	ld	r22, Z
    38dc:	71 81       	ldd	r23, Z+1	; 0x01
    38de:	82 81       	ldd	r24, Z+2	; 0x02
    38e0:	93 81       	ldd	r25, Z+3	; 0x03
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5f e3       	ldi	r21, 0x3F	; 63
    38ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ee:	88 23       	and	r24, r24
    38f0:	44 f4       	brge	.+16     	; 0x3902 <main+0x892>
		__ticks = 1;
    38f2:	fe 01       	movw	r30, r28
    38f4:	ed 57       	subi	r30, 0x7D	; 125
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	64 c0       	rjmp	.+200    	; 0x39ca <main+0x95a>
	else if (__tmp > 65535)
    3902:	fe 01       	movw	r30, r28
    3904:	eb 57       	subi	r30, 0x7B	; 123
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	60 81       	ld	r22, Z
    390a:	71 81       	ldd	r23, Z+1	; 0x01
    390c:	82 81       	ldd	r24, Z+2	; 0x02
    390e:	93 81       	ldd	r25, Z+3	; 0x03
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	3f ef       	ldi	r19, 0xFF	; 255
    3914:	4f e7       	ldi	r20, 0x7F	; 127
    3916:	57 e4       	ldi	r21, 0x47	; 71
    3918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    391c:	18 16       	cp	r1, r24
    391e:	0c f0       	brlt	.+2      	; 0x3922 <main+0x8b2>
    3920:	43 c0       	rjmp	.+134    	; 0x39a8 <main+0x938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3922:	fe 01       	movw	r30, r28
    3924:	e7 57       	subi	r30, 0x77	; 119
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	60 81       	ld	r22, Z
    392a:	71 81       	ldd	r23, Z+1	; 0x01
    392c:	82 81       	ldd	r24, Z+2	; 0x02
    392e:	93 81       	ldd	r25, Z+3	; 0x03
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	8e 01       	movw	r16, r28
    3942:	0d 57       	subi	r16, 0x7D	; 125
    3944:	1f 4f       	sbci	r17, 0xFF	; 255
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	f8 01       	movw	r30, r16
    3954:	91 83       	std	Z+1, r25	; 0x01
    3956:	80 83       	st	Z, r24
    3958:	1f c0       	rjmp	.+62     	; 0x3998 <main+0x928>
    395a:	fe 01       	movw	r30, r28
    395c:	ef 57       	subi	r30, 0x7F	; 127
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	88 ec       	ldi	r24, 0xC8	; 200
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	91 83       	std	Z+1, r25	; 0x01
    3966:	80 83       	st	Z, r24
    3968:	fe 01       	movw	r30, r28
    396a:	ef 57       	subi	r30, 0x7F	; 127
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	80 81       	ld	r24, Z
    3970:	91 81       	ldd	r25, Z+1	; 0x01
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <main+0x902>
    3976:	fe 01       	movw	r30, r28
    3978:	ef 57       	subi	r30, 0x7F	; 127
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3980:	de 01       	movw	r26, r28
    3982:	ad 57       	subi	r26, 0x7D	; 125
    3984:	bf 4f       	sbci	r27, 0xFF	; 255
    3986:	fe 01       	movw	r30, r28
    3988:	ed 57       	subi	r30, 0x7D	; 125
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	11 96       	adiw	r26, 0x01	; 1
    3994:	9c 93       	st	X, r25
    3996:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3998:	fe 01       	movw	r30, r28
    399a:	ed 57       	subi	r30, 0x7D	; 125
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	d1 f6       	brne	.-76     	; 0x395a <main+0x8ea>
    39a6:	27 c0       	rjmp	.+78     	; 0x39f6 <main+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	8e 01       	movw	r16, r28
    39aa:	0d 57       	subi	r16, 0x7D	; 125
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	fe 01       	movw	r30, r28
    39b0:	eb 57       	subi	r30, 0x7B	; 123
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	f8 01       	movw	r30, r16
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
    39ca:	de 01       	movw	r26, r28
    39cc:	a1 58       	subi	r26, 0x81	; 129
    39ce:	bf 4f       	sbci	r27, 0xFF	; 255
    39d0:	fe 01       	movw	r30, r28
    39d2:	ed 57       	subi	r30, 0x7D	; 125
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	8d 93       	st	X+, r24
    39dc:	9c 93       	st	X, r25
    39de:	fe 01       	movw	r30, r28
    39e0:	e1 58       	subi	r30, 0x81	; 129
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <main+0x978>
    39ec:	fe 01       	movw	r30, r28
    39ee:	e1 58       	subi	r30, 0x81	; 129
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN1 ,  LOW);	_delay_ms(100);
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	61 e0       	ldi	r22, 0x01	; 1
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3a00:	fe 01       	movw	r30, r28
    3a02:	e5 58       	subi	r30, 0x85	; 133
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	a8 ec       	ldi	r26, 0xC8	; 200
    3a0c:	b2 e4       	ldi	r27, 0x42	; 66
    3a0e:	80 83       	st	Z, r24
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	a2 83       	std	Z+2, r26	; 0x02
    3a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	8e 01       	movw	r16, r28
    3a18:	09 58       	subi	r16, 0x89	; 137
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e5 58       	subi	r30, 0x85	; 133
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	4a ef       	ldi	r20, 0xFA	; 250
    3a30:	54 e4       	ldi	r21, 0x44	; 68
    3a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	80 83       	st	Z, r24
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	a2 83       	std	Z+2, r26	; 0x02
    3a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a44:	fe 01       	movw	r30, r28
    3a46:	e9 58       	subi	r30, 0x89	; 137
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	44 f4       	brge	.+16     	; 0x3a72 <main+0xa02>
		__ticks = 1;
    3a62:	fe 01       	movw	r30, r28
    3a64:	eb 58       	subi	r30, 0x8B	; 139
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	80 83       	st	Z, r24
    3a70:	64 c0       	rjmp	.+200    	; 0x3b3a <main+0xaca>
	else if (__tmp > 65535)
    3a72:	fe 01       	movw	r30, r28
    3a74:	e9 58       	subi	r30, 0x89	; 137
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	0c f0       	brlt	.+2      	; 0x3a92 <main+0xa22>
    3a90:	43 c0       	rjmp	.+134    	; 0x3b18 <main+0xaa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	fe 01       	movw	r30, r28
    3a94:	e5 58       	subi	r30, 0x85	; 133
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e2       	ldi	r20, 0x20	; 32
    3aa6:	51 e4       	ldi	r21, 0x41	; 65
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8e 01       	movw	r16, r28
    3ab2:	0b 58       	subi	r16, 0x8B	; 139
    3ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	91 83       	std	Z+1, r25	; 0x01
    3ac6:	80 83       	st	Z, r24
    3ac8:	1f c0       	rjmp	.+62     	; 0x3b08 <main+0xa98>
    3aca:	fe 01       	movw	r30, r28
    3acc:	ed 58       	subi	r30, 0x8D	; 141
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	88 ec       	ldi	r24, 0xC8	; 200
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	fe 01       	movw	r30, r28
    3ada:	ed 58       	subi	r30, 0x8D	; 141
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	80 81       	ld	r24, Z
    3ae0:	91 81       	ldd	r25, Z+1	; 0x01
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <main+0xa72>
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ed 58       	subi	r30, 0x8D	; 141
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	de 01       	movw	r26, r28
    3af2:	ab 58       	subi	r26, 0x8B	; 139
    3af4:	bf 4f       	sbci	r27, 0xFF	; 255
    3af6:	fe 01       	movw	r30, r28
    3af8:	eb 58       	subi	r30, 0x8B	; 139
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	80 81       	ld	r24, Z
    3afe:	91 81       	ldd	r25, Z+1	; 0x01
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	11 96       	adiw	r26, 0x01	; 1
    3b04:	9c 93       	st	X, r25
    3b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b08:	fe 01       	movw	r30, r28
    3b0a:	eb 58       	subi	r30, 0x8B	; 139
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	91 81       	ldd	r25, Z+1	; 0x01
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	d1 f6       	brne	.-76     	; 0x3aca <main+0xa5a>
    3b16:	27 c0       	rjmp	.+78     	; 0x3b66 <main+0xaf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b18:	8e 01       	movw	r16, r28
    3b1a:	0b 58       	subi	r16, 0x8B	; 139
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e9 58       	subi	r30, 0x89	; 137
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	f8 01       	movw	r30, r16
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	de 01       	movw	r26, r28
    3b3c:	af 58       	subi	r26, 0x8F	; 143
    3b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b40:	fe 01       	movw	r30, r28
    3b42:	eb 58       	subi	r30, 0x8B	; 139
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	91 81       	ldd	r25, Z+1	; 0x01
    3b4a:	8d 93       	st	X+, r24
    3b4c:	9c 93       	st	X, r25
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ef 58       	subi	r30, 0x8F	; 143
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <main+0xae8>
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ef 58       	subi	r30, 0x8F	; 143
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN1 , HIGH);
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	41 e0       	ldi	r20, 0x01	; 1
    3b6c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>

		}
		if(Recieved == 'c')
    3b70:	fe 01       	movw	r30, r28
    3b72:	ec 52       	subi	r30, 0x2C	; 44
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	83 36       	cpi	r24, 0x63	; 99
    3b7a:	09 f0       	breq	.+2      	; 0x3b7e <main+0xb0e>
    3b7c:	33 c2       	rjmp	.+1126   	; 0x3fe4 <main+0xf74>
		{
			EEPROM_voidSendDataByte(5,1);
    3b7e:	85 e0       	ldi	r24, 0x05	; 5
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	61 e0       	ldi	r22, 0x01	; 1
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <EEPROM_voidSendDataByte>

			DIO_voidSetPinvalue(PORTA , PIN2 , HIGH);   _delay_ms(20);
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	62 e0       	ldi	r22, 0x02	; 2
    3b8e:	41 e0       	ldi	r20, 0x01	; 1
    3b90:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3b94:	fe 01       	movw	r30, r28
    3b96:	e3 59       	subi	r30, 0x93	; 147
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	a0 ea       	ldi	r26, 0xA0	; 160
    3ba0:	b1 e4       	ldi	r27, 0x41	; 65
    3ba2:	80 83       	st	Z, r24
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	a2 83       	std	Z+2, r26	; 0x02
    3ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3baa:	8e 01       	movw	r16, r28
    3bac:	07 59       	subi	r16, 0x97	; 151
    3bae:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e3 59       	subi	r30, 0x93	; 147
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	4a ef       	ldi	r20, 0xFA	; 250
    3bc4:	54 e4       	ldi	r21, 0x44	; 68
    3bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	f8 01       	movw	r30, r16
    3bd0:	80 83       	st	Z, r24
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	a2 83       	std	Z+2, r26	; 0x02
    3bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e7 59       	subi	r30, 0x97	; 151
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	60 81       	ld	r22, Z
    3be0:	71 81       	ldd	r23, Z+1	; 0x01
    3be2:	82 81       	ldd	r24, Z+2	; 0x02
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	44 f4       	brge	.+16     	; 0x3c06 <main+0xb96>
		__ticks = 1;
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e9 59       	subi	r30, 0x99	; 153
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	80 83       	st	Z, r24
    3c04:	64 c0       	rjmp	.+200    	; 0x3cce <main+0xc5e>
	else if (__tmp > 65535)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 59       	subi	r30, 0x97	; 151
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	3f ef       	ldi	r19, 0xFF	; 255
    3c18:	4f e7       	ldi	r20, 0x7F	; 127
    3c1a:	57 e4       	ldi	r21, 0x47	; 71
    3c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c20:	18 16       	cp	r1, r24
    3c22:	0c f0       	brlt	.+2      	; 0x3c26 <main+0xbb6>
    3c24:	43 c0       	rjmp	.+134    	; 0x3cac <main+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c26:	fe 01       	movw	r30, r28
    3c28:	e3 59       	subi	r30, 0x93	; 147
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	60 81       	ld	r22, Z
    3c2e:	71 81       	ldd	r23, Z+1	; 0x01
    3c30:	82 81       	ldd	r24, Z+2	; 0x02
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e2       	ldi	r20, 0x20	; 32
    3c3a:	51 e4       	ldi	r21, 0x41	; 65
    3c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	8e 01       	movw	r16, r28
    3c46:	09 59       	subi	r16, 0x99	; 153
    3c48:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4a:	bc 01       	movw	r22, r24
    3c4c:	cd 01       	movw	r24, r26
    3c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	f8 01       	movw	r30, r16
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
    3c5c:	1f c0       	rjmp	.+62     	; 0x3c9c <main+0xc2c>
    3c5e:	fe 01       	movw	r30, r28
    3c60:	eb 59       	subi	r30, 0x9B	; 155
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	88 ec       	ldi	r24, 0xC8	; 200
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	80 83       	st	Z, r24
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	eb 59       	subi	r30, 0x9B	; 155
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <main+0xc06>
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	eb 59       	subi	r30, 0x9B	; 155
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c84:	de 01       	movw	r26, r28
    3c86:	a9 59       	subi	r26, 0x99	; 153
    3c88:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e9 59       	subi	r30, 0x99	; 153
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	11 96       	adiw	r26, 0x01	; 1
    3c98:	9c 93       	st	X, r25
    3c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e9 59       	subi	r30, 0x99	; 153
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	d1 f6       	brne	.-76     	; 0x3c5e <main+0xbee>
    3caa:	27 c0       	rjmp	.+78     	; 0x3cfa <main+0xc8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	8e 01       	movw	r16, r28
    3cae:	09 59       	subi	r16, 0x99	; 153
    3cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e7 59       	subi	r30, 0x97	; 151
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	60 81       	ld	r22, Z
    3cba:	71 81       	ldd	r23, Z+1	; 0x01
    3cbc:	82 81       	ldd	r24, Z+2	; 0x02
    3cbe:	93 81       	ldd	r25, Z+3	; 0x03
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	f8 01       	movw	r30, r16
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	80 83       	st	Z, r24
    3cce:	de 01       	movw	r26, r28
    3cd0:	ad 59       	subi	r26, 0x9D	; 157
    3cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e9 59       	subi	r30, 0x99	; 153
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	91 81       	ldd	r25, Z+1	; 0x01
    3cde:	8d 93       	st	X+, r24
    3ce0:	9c 93       	st	X, r25
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	ed 59       	subi	r30, 0x9D	; 157
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 81       	ld	r24, Z
    3cea:	91 81       	ldd	r25, Z+1	; 0x01
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <main+0xc7c>
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ed 59       	subi	r30, 0x9D	; 157
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN2 , HIGH);	_delay_ms(20);
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	62 e0       	ldi	r22, 0x02	; 2
    3cfe:	41 e0       	ldi	r20, 0x01	; 1
    3d00:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3d04:	fe 01       	movw	r30, r28
    3d06:	e1 5a       	subi	r30, 0xA1	; 161
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a0 ea       	ldi	r26, 0xA0	; 160
    3d10:	b1 e4       	ldi	r27, 0x41	; 65
    3d12:	80 83       	st	Z, r24
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	a2 83       	std	Z+2, r26	; 0x02
    3d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	05 5a       	subi	r16, 0xA5	; 165
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	e1 5a       	subi	r30, 0xA1	; 161
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	4a ef       	ldi	r20, 0xFA	; 250
    3d34:	54 e4       	ldi	r21, 0x44	; 68
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	f8 01       	movw	r30, r16
    3d40:	80 83       	st	Z, r24
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	a2 83       	std	Z+2, r26	; 0x02
    3d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e5 5a       	subi	r30, 0xA5	; 165
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	44 f4       	brge	.+16     	; 0x3d76 <main+0xd06>
		__ticks = 1;
    3d66:	fe 01       	movw	r30, r28
    3d68:	e7 5a       	subi	r30, 0xA7	; 167
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
    3d74:	64 c0       	rjmp	.+200    	; 0x3e3e <main+0xdce>
	else if (__tmp > 65535)
    3d76:	fe 01       	movw	r30, r28
    3d78:	e5 5a       	subi	r30, 0xA5	; 165
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	3f ef       	ldi	r19, 0xFF	; 255
    3d88:	4f e7       	ldi	r20, 0x7F	; 127
    3d8a:	57 e4       	ldi	r21, 0x47	; 71
    3d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d90:	18 16       	cp	r1, r24
    3d92:	0c f0       	brlt	.+2      	; 0x3d96 <main+0xd26>
    3d94:	43 c0       	rjmp	.+134    	; 0x3e1c <main+0xdac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d96:	fe 01       	movw	r30, r28
    3d98:	e1 5a       	subi	r30, 0xA1	; 161
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e2       	ldi	r20, 0x20	; 32
    3daa:	51 e4       	ldi	r21, 0x41	; 65
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	8e 01       	movw	r16, r28
    3db6:	07 5a       	subi	r16, 0xA7	; 167
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	80 83       	st	Z, r24
    3dcc:	1f c0       	rjmp	.+62     	; 0x3e0c <main+0xd9c>
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e9 5a       	subi	r30, 0xA9	; 169
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	88 ec       	ldi	r24, 0xC8	; 200
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e9 5a       	subi	r30, 0xA9	; 169
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <main+0xd76>
    3dea:	fe 01       	movw	r30, r28
    3dec:	e9 5a       	subi	r30, 0xA9	; 169
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df4:	de 01       	movw	r26, r28
    3df6:	a7 5a       	subi	r26, 0xA7	; 167
    3df8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e7 5a       	subi	r30, 0xA7	; 167
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	11 96       	adiw	r26, 0x01	; 1
    3e08:	9c 93       	st	X, r25
    3e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e7 5a       	subi	r30, 0xA7	; 167
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	d1 f6       	brne	.-76     	; 0x3dce <main+0xd5e>
    3e1a:	27 c0       	rjmp	.+78     	; 0x3e6a <main+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	07 5a       	subi	r16, 0xA7	; 167
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	e5 5a       	subi	r30, 0xA5	; 165
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	f8 01       	movw	r30, r16
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	80 83       	st	Z, r24
    3e3e:	de 01       	movw	r26, r28
    3e40:	ab 5a       	subi	r26, 0xAB	; 171
    3e42:	bf 4f       	sbci	r27, 0xFF	; 255
    3e44:	fe 01       	movw	r30, r28
    3e46:	e7 5a       	subi	r30, 0xA7	; 167
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	8d 93       	st	X+, r24
    3e50:	9c 93       	st	X, r25
    3e52:	fe 01       	movw	r30, r28
    3e54:	eb 5a       	subi	r30, 0xAB	; 171
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <main+0xdec>
    3e60:	fe 01       	movw	r30, r28
    3e62:	eb 5a       	subi	r30, 0xAB	; 171
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN2 , LOW);	_delay_ms(20);
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	62 e0       	ldi	r22, 0x02	; 2
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    3e74:	fe 01       	movw	r30, r28
    3e76:	ef 5a       	subi	r30, 0xAF	; 175
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    3e80:	b1 e4       	ldi	r27, 0x41	; 65
    3e82:	80 83       	st	Z, r24
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	a2 83       	std	Z+2, r26	; 0x02
    3e88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8a:	8e 01       	movw	r16, r28
    3e8c:	03 5b       	subi	r16, 0xB3	; 179
    3e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e90:	fe 01       	movw	r30, r28
    3e92:	ef 5a       	subi	r30, 0xAF	; 175
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4a ef       	ldi	r20, 0xFA	; 250
    3ea4:	54 e4       	ldi	r21, 0x44	; 68
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	f8 01       	movw	r30, r16
    3eb0:	80 83       	st	Z, r24
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	a2 83       	std	Z+2, r26	; 0x02
    3eb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e3 5b       	subi	r30, 0xB3	; 179
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	44 f4       	brge	.+16     	; 0x3ee6 <main+0xe76>
		__ticks = 1;
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e5 5b       	subi	r30, 0xB5	; 181
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	91 83       	std	Z+1, r25	; 0x01
    3ee2:	80 83       	st	Z, r24
    3ee4:	64 c0       	rjmp	.+200    	; 0x3fae <main+0xf3e>
	else if (__tmp > 65535)
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e3 5b       	subi	r30, 0xB3	; 179
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	60 81       	ld	r22, Z
    3eee:	71 81       	ldd	r23, Z+1	; 0x01
    3ef0:	82 81       	ldd	r24, Z+2	; 0x02
    3ef2:	93 81       	ldd	r25, Z+3	; 0x03
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	3f ef       	ldi	r19, 0xFF	; 255
    3ef8:	4f e7       	ldi	r20, 0x7F	; 127
    3efa:	57 e4       	ldi	r21, 0x47	; 71
    3efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f00:	18 16       	cp	r1, r24
    3f02:	0c f0       	brlt	.+2      	; 0x3f06 <main+0xe96>
    3f04:	43 c0       	rjmp	.+134    	; 0x3f8c <main+0xf1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f06:	fe 01       	movw	r30, r28
    3f08:	ef 5a       	subi	r30, 0xAF	; 175
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	60 81       	ld	r22, Z
    3f0e:	71 81       	ldd	r23, Z+1	; 0x01
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	93 81       	ldd	r25, Z+3	; 0x03
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e2       	ldi	r20, 0x20	; 32
    3f1a:	51 e4       	ldi	r21, 0x41	; 65
    3f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	8e 01       	movw	r16, r28
    3f26:	05 5b       	subi	r16, 0xB5	; 181
    3f28:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	f8 01       	movw	r30, r16
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
    3f3c:	1f c0       	rjmp	.+62     	; 0x3f7c <main+0xf0c>
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e7 5b       	subi	r30, 0xB7	; 183
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	88 ec       	ldi	r24, 0xC8	; 200
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	80 83       	st	Z, r24
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e7 5b       	subi	r30, 0xB7	; 183
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <main+0xee6>
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e7 5b       	subi	r30, 0xB7	; 183
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f64:	de 01       	movw	r26, r28
    3f66:	a5 5b       	subi	r26, 0xB5	; 181
    3f68:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e5 5b       	subi	r30, 0xB5	; 181
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	11 96       	adiw	r26, 0x01	; 1
    3f78:	9c 93       	st	X, r25
    3f7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e5 5b       	subi	r30, 0xB5	; 181
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	00 97       	sbiw	r24, 0x00	; 0
    3f88:	d1 f6       	brne	.-76     	; 0x3f3e <main+0xece>
    3f8a:	27 c0       	rjmp	.+78     	; 0x3fda <main+0xf6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8c:	8e 01       	movw	r16, r28
    3f8e:	05 5b       	subi	r16, 0xB5	; 181
    3f90:	1f 4f       	sbci	r17, 0xFF	; 255
    3f92:	fe 01       	movw	r30, r28
    3f94:	e3 5b       	subi	r30, 0xB3	; 179
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	f8 01       	movw	r30, r16
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
    3fae:	de 01       	movw	r26, r28
    3fb0:	a9 5b       	subi	r26, 0xB9	; 185
    3fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e5 5b       	subi	r30, 0xB5	; 181
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	8d 93       	st	X+, r24
    3fc0:	9c 93       	st	X, r25
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e9 5b       	subi	r30, 0xB9	; 185
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	f1 f7       	brne	.-4      	; 0x3fcc <main+0xf5c>
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e9 5b       	subi	r30, 0xB9	; 185
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	91 83       	std	Z+1, r25	; 0x01
    3fd8:	80 83       	st	Z, r24
			DIO_voidSetPinvalue(PORTA , PIN2 , HIGH);
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	62 e0       	ldi	r22, 0x02	; 2
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>


		}
		if(Recieved == 'd')
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	ec 52       	subi	r30, 0x2C	; 44
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	80 81       	ld	r24, Z
    3fec:	84 36       	cpi	r24, 0x64	; 100
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <main+0xf82>
    3ff0:	82 c8       	rjmp	.-3836   	; 0x30f6 <main+0x86>
		{

			EEPROM_voidSendDataByte(5,0);
    3ff2:	85 e0       	ldi	r24, 0x05	; 5
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	60 e0       	ldi	r22, 0x00	; 0
    3ff8:	70 e0       	ldi	r23, 0x00	; 0
    3ffa:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <EEPROM_voidSendDataByte>

			while(1){
						DIO_voidSetPinvalue(PORTA , PIN1, HIGH);
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	61 e0       	ldi	r22, 0x01	; 1
    4002:	41 e0       	ldi	r20, 0x01	; 1
    4004:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN2 , LOW);
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	62 e0       	ldi	r22, 0x02	; 2
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN3 , LOW);	_delay_ms(100);
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	63 e0       	ldi	r22, 0x03	; 3
    4016:	40 e0       	ldi	r20, 0x00	; 0
    4018:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    401c:	fe 01       	movw	r30, r28
    401e:	ed 5b       	subi	r30, 0xBD	; 189
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	a8 ec       	ldi	r26, 0xC8	; 200
    4028:	b2 e4       	ldi	r27, 0x42	; 66
    402a:	80 83       	st	Z, r24
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	a2 83       	std	Z+2, r26	; 0x02
    4030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	8e 01       	movw	r16, r28
    4034:	01 5c       	subi	r16, 0xC1	; 193
    4036:	1f 4f       	sbci	r17, 0xFF	; 255
    4038:	fe 01       	movw	r30, r28
    403a:	ed 5b       	subi	r30, 0xBD	; 189
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	4a ef       	ldi	r20, 0xFA	; 250
    404c:	54 e4       	ldi	r21, 0x44	; 68
    404e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	f8 01       	movw	r30, r16
    4058:	80 83       	st	Z, r24
    405a:	91 83       	std	Z+1, r25	; 0x01
    405c:	a2 83       	std	Z+2, r26	; 0x02
    405e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4060:	fe 01       	movw	r30, r28
    4062:	ff 96       	adiw	r30, 0x3f	; 63
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	93 81       	ldd	r25, Z+3	; 0x03
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	2c f4       	brge	.+10     	; 0x4086 <main+0x1016>
		__ticks = 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	9e af       	std	Y+62, r25	; 0x3e
    4082:	8d af       	std	Y+61, r24	; 0x3d
    4084:	46 c0       	rjmp	.+140    	; 0x4112 <main+0x10a2>
	else if (__tmp > 65535)
    4086:	fe 01       	movw	r30, r28
    4088:	ff 96       	adiw	r30, 0x3f	; 63
    408a:	60 81       	ld	r22, Z
    408c:	71 81       	ldd	r23, Z+1	; 0x01
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	3f ef       	ldi	r19, 0xFF	; 255
    4096:	4f e7       	ldi	r20, 0x7F	; 127
    4098:	57 e4       	ldi	r21, 0x47	; 71
    409a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    409e:	18 16       	cp	r1, r24
    40a0:	64 f5       	brge	.+88     	; 0x40fa <main+0x108a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a2:	fe 01       	movw	r30, r28
    40a4:	ed 5b       	subi	r30, 0xBD	; 189
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	60 81       	ld	r22, Z
    40aa:	71 81       	ldd	r23, Z+1	; 0x01
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e2       	ldi	r20, 0x20	; 32
    40b6:	51 e4       	ldi	r21, 0x41	; 65
    40b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	9e af       	std	Y+62, r25	; 0x3e
    40ce:	8d af       	std	Y+61, r24	; 0x3d
    40d0:	0f c0       	rjmp	.+30     	; 0x40f0 <main+0x1080>
    40d2:	88 ec       	ldi	r24, 0xC8	; 200
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	9c af       	std	Y+60, r25	; 0x3c
    40d8:	8b af       	std	Y+59, r24	; 0x3b
    40da:	8b ad       	ldd	r24, Y+59	; 0x3b
    40dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <main+0x106e>
    40e2:	9c af       	std	Y+60, r25	; 0x3c
    40e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    40e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	9e af       	std	Y+62, r25	; 0x3e
    40ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40f4:	00 97       	sbiw	r24, 0x00	; 0
    40f6:	69 f7       	brne	.-38     	; 0x40d2 <main+0x1062>
    40f8:	16 c0       	rjmp	.+44     	; 0x4126 <main+0x10b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40fa:	fe 01       	movw	r30, r28
    40fc:	ff 96       	adiw	r30, 0x3f	; 63
    40fe:	60 81       	ld	r22, Z
    4100:	71 81       	ldd	r23, Z+1	; 0x01
    4102:	82 81       	ldd	r24, Z+2	; 0x02
    4104:	93 81       	ldd	r25, Z+3	; 0x03
    4106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	9e af       	std	Y+62, r25	; 0x3e
    4110:	8d af       	std	Y+61, r24	; 0x3d
    4112:	8d ad       	ldd	r24, Y+61	; 0x3d
    4114:	9e ad       	ldd	r25, Y+62	; 0x3e
    4116:	9a af       	std	Y+58, r25	; 0x3a
    4118:	89 af       	std	Y+57, r24	; 0x39
    411a:	89 ad       	ldd	r24, Y+57	; 0x39
    411c:	9a ad       	ldd	r25, Y+58	; 0x3a
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	f1 f7       	brne	.-4      	; 0x411e <main+0x10ae>
    4122:	9a af       	std	Y+58, r25	; 0x3a
    4124:	89 af       	std	Y+57, r24	; 0x39

						DIO_voidSetPinvalue(PORTA , PIN1, LOW);
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	61 e0       	ldi	r22, 0x01	; 1
    412a:	40 e0       	ldi	r20, 0x00	; 0
    412c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN2 , HIGH);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	62 e0       	ldi	r22, 0x02	; 2
    4134:	41 e0       	ldi	r20, 0x01	; 1
    4136:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN3 , LOW);	_delay_ms(100);
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	63 e0       	ldi	r22, 0x03	; 3
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	a8 ec       	ldi	r26, 0xC8	; 200
    414a:	b2 e4       	ldi	r27, 0x42	; 66
    414c:	8d ab       	std	Y+53, r24	; 0x35
    414e:	9e ab       	std	Y+54, r25	; 0x36
    4150:	af ab       	std	Y+55, r26	; 0x37
    4152:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4154:	6d a9       	ldd	r22, Y+53	; 0x35
    4156:	7e a9       	ldd	r23, Y+54	; 0x36
    4158:	8f a9       	ldd	r24, Y+55	; 0x37
    415a:	98 ad       	ldd	r25, Y+56	; 0x38
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4a ef       	ldi	r20, 0xFA	; 250
    4162:	54 e4       	ldi	r21, 0x44	; 68
    4164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	89 ab       	std	Y+49, r24	; 0x31
    416e:	9a ab       	std	Y+50, r25	; 0x32
    4170:	ab ab       	std	Y+51, r26	; 0x33
    4172:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4174:	69 a9       	ldd	r22, Y+49	; 0x31
    4176:	7a a9       	ldd	r23, Y+50	; 0x32
    4178:	8b a9       	ldd	r24, Y+51	; 0x33
    417a:	9c a9       	ldd	r25, Y+52	; 0x34
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	40 e8       	ldi	r20, 0x80	; 128
    4182:	5f e3       	ldi	r21, 0x3F	; 63
    4184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4188:	88 23       	and	r24, r24
    418a:	2c f4       	brge	.+10     	; 0x4196 <main+0x1126>
		__ticks = 1;
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	98 ab       	std	Y+48, r25	; 0x30
    4192:	8f a7       	std	Y+47, r24	; 0x2f
    4194:	3f c0       	rjmp	.+126    	; 0x4214 <main+0x11a4>
	else if (__tmp > 65535)
    4196:	69 a9       	ldd	r22, Y+49	; 0x31
    4198:	7a a9       	ldd	r23, Y+50	; 0x32
    419a:	8b a9       	ldd	r24, Y+51	; 0x33
    419c:	9c a9       	ldd	r25, Y+52	; 0x34
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	3f ef       	ldi	r19, 0xFF	; 255
    41a2:	4f e7       	ldi	r20, 0x7F	; 127
    41a4:	57 e4       	ldi	r21, 0x47	; 71
    41a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41aa:	18 16       	cp	r1, r24
    41ac:	4c f5       	brge	.+82     	; 0x4200 <main+0x1190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ae:	6d a9       	ldd	r22, Y+53	; 0x35
    41b0:	7e a9       	ldd	r23, Y+54	; 0x36
    41b2:	8f a9       	ldd	r24, Y+55	; 0x37
    41b4:	98 ad       	ldd	r25, Y+56	; 0x38
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e2       	ldi	r20, 0x20	; 32
    41bc:	51 e4       	ldi	r21, 0x41	; 65
    41be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	bc 01       	movw	r22, r24
    41c8:	cd 01       	movw	r24, r26
    41ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	98 ab       	std	Y+48, r25	; 0x30
    41d4:	8f a7       	std	Y+47, r24	; 0x2f
    41d6:	0f c0       	rjmp	.+30     	; 0x41f6 <main+0x1186>
    41d8:	88 ec       	ldi	r24, 0xC8	; 200
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9e a7       	std	Y+46, r25	; 0x2e
    41de:	8d a7       	std	Y+45, r24	; 0x2d
    41e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    41e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	f1 f7       	brne	.-4      	; 0x41e4 <main+0x1174>
    41e8:	9e a7       	std	Y+46, r25	; 0x2e
    41ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ee:	98 a9       	ldd	r25, Y+48	; 0x30
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	98 ab       	std	Y+48, r25	; 0x30
    41f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f8:	98 a9       	ldd	r25, Y+48	; 0x30
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	69 f7       	brne	.-38     	; 0x41d8 <main+0x1168>
    41fe:	14 c0       	rjmp	.+40     	; 0x4228 <main+0x11b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4200:	69 a9       	ldd	r22, Y+49	; 0x31
    4202:	7a a9       	ldd	r23, Y+50	; 0x32
    4204:	8b a9       	ldd	r24, Y+51	; 0x33
    4206:	9c a9       	ldd	r25, Y+52	; 0x34
    4208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	98 ab       	std	Y+48, r25	; 0x30
    4212:	8f a7       	std	Y+47, r24	; 0x2f
    4214:	8f a5       	ldd	r24, Y+47	; 0x2f
    4216:	98 a9       	ldd	r25, Y+48	; 0x30
    4218:	9c a7       	std	Y+44, r25	; 0x2c
    421a:	8b a7       	std	Y+43, r24	; 0x2b
    421c:	8b a5       	ldd	r24, Y+43	; 0x2b
    421e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <main+0x11b0>
    4224:	9c a7       	std	Y+44, r25	; 0x2c
    4226:	8b a7       	std	Y+43, r24	; 0x2b

						DIO_voidSetPinvalue(PORTA , PIN1, LOW);
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	61 e0       	ldi	r22, 0x01	; 1
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN2 , LOW);
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	62 e0       	ldi	r22, 0x02	; 2
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN3 , HIGH);	_delay_ms(100);
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	63 e0       	ldi	r22, 0x03	; 3
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a8 ec       	ldi	r26, 0xC8	; 200
    424c:	b2 e4       	ldi	r27, 0x42	; 66
    424e:	8f a3       	std	Y+39, r24	; 0x27
    4250:	98 a7       	std	Y+40, r25	; 0x28
    4252:	a9 a7       	std	Y+41, r26	; 0x29
    4254:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4256:	6f a1       	ldd	r22, Y+39	; 0x27
    4258:	78 a5       	ldd	r23, Y+40	; 0x28
    425a:	89 a5       	ldd	r24, Y+41	; 0x29
    425c:	9a a5       	ldd	r25, Y+42	; 0x2a
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	4a ef       	ldi	r20, 0xFA	; 250
    4264:	54 e4       	ldi	r21, 0x44	; 68
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	8b a3       	std	Y+35, r24	; 0x23
    4270:	9c a3       	std	Y+36, r25	; 0x24
    4272:	ad a3       	std	Y+37, r26	; 0x25
    4274:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4276:	6b a1       	ldd	r22, Y+35	; 0x23
    4278:	7c a1       	ldd	r23, Y+36	; 0x24
    427a:	8d a1       	ldd	r24, Y+37	; 0x25
    427c:	9e a1       	ldd	r25, Y+38	; 0x26
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e8       	ldi	r20, 0x80	; 128
    4284:	5f e3       	ldi	r21, 0x3F	; 63
    4286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    428a:	88 23       	and	r24, r24
    428c:	2c f4       	brge	.+10     	; 0x4298 <main+0x1228>
		__ticks = 1;
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	9a a3       	std	Y+34, r25	; 0x22
    4294:	89 a3       	std	Y+33, r24	; 0x21
    4296:	3f c0       	rjmp	.+126    	; 0x4316 <main+0x12a6>
	else if (__tmp > 65535)
    4298:	6b a1       	ldd	r22, Y+35	; 0x23
    429a:	7c a1       	ldd	r23, Y+36	; 0x24
    429c:	8d a1       	ldd	r24, Y+37	; 0x25
    429e:	9e a1       	ldd	r25, Y+38	; 0x26
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	3f ef       	ldi	r19, 0xFF	; 255
    42a4:	4f e7       	ldi	r20, 0x7F	; 127
    42a6:	57 e4       	ldi	r21, 0x47	; 71
    42a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42ac:	18 16       	cp	r1, r24
    42ae:	4c f5       	brge	.+82     	; 0x4302 <main+0x1292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b0:	6f a1       	ldd	r22, Y+39	; 0x27
    42b2:	78 a5       	ldd	r23, Y+40	; 0x28
    42b4:	89 a5       	ldd	r24, Y+41	; 0x29
    42b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e2       	ldi	r20, 0x20	; 32
    42be:	51 e4       	ldi	r21, 0x41	; 65
    42c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	bc 01       	movw	r22, r24
    42ca:	cd 01       	movw	r24, r26
    42cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	9a a3       	std	Y+34, r25	; 0x22
    42d6:	89 a3       	std	Y+33, r24	; 0x21
    42d8:	0f c0       	rjmp	.+30     	; 0x42f8 <main+0x1288>
    42da:	88 ec       	ldi	r24, 0xC8	; 200
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	98 a3       	std	Y+32, r25	; 0x20
    42e0:	8f 8f       	std	Y+31, r24	; 0x1f
    42e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42e4:	98 a1       	ldd	r25, Y+32	; 0x20
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <main+0x1276>
    42ea:	98 a3       	std	Y+32, r25	; 0x20
    42ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ee:	89 a1       	ldd	r24, Y+33	; 0x21
    42f0:	9a a1       	ldd	r25, Y+34	; 0x22
    42f2:	01 97       	sbiw	r24, 0x01	; 1
    42f4:	9a a3       	std	Y+34, r25	; 0x22
    42f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f8:	89 a1       	ldd	r24, Y+33	; 0x21
    42fa:	9a a1       	ldd	r25, Y+34	; 0x22
    42fc:	00 97       	sbiw	r24, 0x00	; 0
    42fe:	69 f7       	brne	.-38     	; 0x42da <main+0x126a>
    4300:	14 c0       	rjmp	.+40     	; 0x432a <main+0x12ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4302:	6b a1       	ldd	r22, Y+35	; 0x23
    4304:	7c a1       	ldd	r23, Y+36	; 0x24
    4306:	8d a1       	ldd	r24, Y+37	; 0x25
    4308:	9e a1       	ldd	r25, Y+38	; 0x26
    430a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	9a a3       	std	Y+34, r25	; 0x22
    4314:	89 a3       	std	Y+33, r24	; 0x21
    4316:	89 a1       	ldd	r24, Y+33	; 0x21
    4318:	9a a1       	ldd	r25, Y+34	; 0x22
    431a:	9e 8f       	std	Y+30, r25	; 0x1e
    431c:	8d 8f       	std	Y+29, r24	; 0x1d
    431e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4320:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4322:	01 97       	sbiw	r24, 0x01	; 1
    4324:	f1 f7       	brne	.-4      	; 0x4322 <main+0x12b2>
    4326:	9e 8f       	std	Y+30, r25	; 0x1e
    4328:	8d 8f       	std	Y+29, r24	; 0x1d


						DIO_voidSetPinvalue(PORTA , PIN1, LOW);
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	61 e0       	ldi	r22, 0x01	; 1
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN2 , LOW);
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	62 e0       	ldi	r22, 0x02	; 2
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN3 , LOW);    _delay_ms(100);
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	63 e0       	ldi	r22, 0x03	; 3
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	a8 ec       	ldi	r26, 0xC8	; 200
    434e:	b2 e4       	ldi	r27, 0x42	; 66
    4350:	89 8f       	std	Y+25, r24	; 0x19
    4352:	9a 8f       	std	Y+26, r25	; 0x1a
    4354:	ab 8f       	std	Y+27, r26	; 0x1b
    4356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4358:	69 8d       	ldd	r22, Y+25	; 0x19
    435a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    435c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    435e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	4a ef       	ldi	r20, 0xFA	; 250
    4366:	54 e4       	ldi	r21, 0x44	; 68
    4368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	8d 8b       	std	Y+21, r24	; 0x15
    4372:	9e 8b       	std	Y+22, r25	; 0x16
    4374:	af 8b       	std	Y+23, r26	; 0x17
    4376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4378:	6d 89       	ldd	r22, Y+21	; 0x15
    437a:	7e 89       	ldd	r23, Y+22	; 0x16
    437c:	8f 89       	ldd	r24, Y+23	; 0x17
    437e:	98 8d       	ldd	r25, Y+24	; 0x18
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e8       	ldi	r20, 0x80	; 128
    4386:	5f e3       	ldi	r21, 0x3F	; 63
    4388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    438c:	88 23       	and	r24, r24
    438e:	2c f4       	brge	.+10     	; 0x439a <main+0x132a>
		__ticks = 1;
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	9c 8b       	std	Y+20, r25	; 0x14
    4396:	8b 8b       	std	Y+19, r24	; 0x13
    4398:	3f c0       	rjmp	.+126    	; 0x4418 <main+0x13a8>
	else if (__tmp > 65535)
    439a:	6d 89       	ldd	r22, Y+21	; 0x15
    439c:	7e 89       	ldd	r23, Y+22	; 0x16
    439e:	8f 89       	ldd	r24, Y+23	; 0x17
    43a0:	98 8d       	ldd	r25, Y+24	; 0x18
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	3f ef       	ldi	r19, 0xFF	; 255
    43a6:	4f e7       	ldi	r20, 0x7F	; 127
    43a8:	57 e4       	ldi	r21, 0x47	; 71
    43aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43ae:	18 16       	cp	r1, r24
    43b0:	4c f5       	brge	.+82     	; 0x4404 <main+0x1394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b2:	69 8d       	ldd	r22, Y+25	; 0x19
    43b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	40 e2       	ldi	r20, 0x20	; 32
    43c0:	51 e4       	ldi	r21, 0x41	; 65
    43c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	bc 01       	movw	r22, r24
    43cc:	cd 01       	movw	r24, r26
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	0f c0       	rjmp	.+30     	; 0x43fa <main+0x138a>
    43dc:	88 ec       	ldi	r24, 0xC8	; 200
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	9a 8b       	std	Y+18, r25	; 0x12
    43e2:	89 8b       	std	Y+17, r24	; 0x11
    43e4:	89 89       	ldd	r24, Y+17	; 0x11
    43e6:	9a 89       	ldd	r25, Y+18	; 0x12
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	f1 f7       	brne	.-4      	; 0x43e8 <main+0x1378>
    43ec:	9a 8b       	std	Y+18, r25	; 0x12
    43ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f0:	8b 89       	ldd	r24, Y+19	; 0x13
    43f2:	9c 89       	ldd	r25, Y+20	; 0x14
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	9c 8b       	std	Y+20, r25	; 0x14
    43f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fa:	8b 89       	ldd	r24, Y+19	; 0x13
    43fc:	9c 89       	ldd	r25, Y+20	; 0x14
    43fe:	00 97       	sbiw	r24, 0x00	; 0
    4400:	69 f7       	brne	.-38     	; 0x43dc <main+0x136c>
    4402:	14 c0       	rjmp	.+40     	; 0x442c <main+0x13bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4404:	6d 89       	ldd	r22, Y+21	; 0x15
    4406:	7e 89       	ldd	r23, Y+22	; 0x16
    4408:	8f 89       	ldd	r24, Y+23	; 0x17
    440a:	98 8d       	ldd	r25, Y+24	; 0x18
    440c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	9c 8b       	std	Y+20, r25	; 0x14
    4416:	8b 8b       	std	Y+19, r24	; 0x13
    4418:	8b 89       	ldd	r24, Y+19	; 0x13
    441a:	9c 89       	ldd	r25, Y+20	; 0x14
    441c:	98 8b       	std	Y+16, r25	; 0x10
    441e:	8f 87       	std	Y+15, r24	; 0x0f
    4420:	8f 85       	ldd	r24, Y+15	; 0x0f
    4422:	98 89       	ldd	r25, Y+16	; 0x10
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	f1 f7       	brne	.-4      	; 0x4424 <main+0x13b4>
    4428:	98 8b       	std	Y+16, r25	; 0x10
    442a:	8f 87       	std	Y+15, r24	; 0x0f


						DIO_voidSetPinvalue(PORTA , PIN1, HIGH);
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	61 e0       	ldi	r22, 0x01	; 1
    4430:	41 e0       	ldi	r20, 0x01	; 1
    4432:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN2 , HIGH);
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	62 e0       	ldi	r22, 0x02	; 2
    443a:	41 e0       	ldi	r20, 0x01	; 1
    443c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(PORTA , PIN3 , HIGH);	_delay_ms(400);
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	63 e0       	ldi	r22, 0x03	; 3
    4444:	41 e0       	ldi	r20, 0x01	; 1
    4446:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_voidSetPinvalue>
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	a8 ec       	ldi	r26, 0xC8	; 200
    4450:	b3 e4       	ldi	r27, 0x43	; 67
    4452:	8b 87       	std	Y+11, r24	; 0x0b
    4454:	9c 87       	std	Y+12, r25	; 0x0c
    4456:	ad 87       	std	Y+13, r26	; 0x0d
    4458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    445a:	6b 85       	ldd	r22, Y+11	; 0x0b
    445c:	7c 85       	ldd	r23, Y+12	; 0x0c
    445e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4460:	9e 85       	ldd	r25, Y+14	; 0x0e
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	4a ef       	ldi	r20, 0xFA	; 250
    4468:	54 e4       	ldi	r21, 0x44	; 68
    446a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	8f 83       	std	Y+7, r24	; 0x07
    4474:	98 87       	std	Y+8, r25	; 0x08
    4476:	a9 87       	std	Y+9, r26	; 0x09
    4478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    447a:	6f 81       	ldd	r22, Y+7	; 0x07
    447c:	78 85       	ldd	r23, Y+8	; 0x08
    447e:	89 85       	ldd	r24, Y+9	; 0x09
    4480:	9a 85       	ldd	r25, Y+10	; 0x0a
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e8       	ldi	r20, 0x80	; 128
    4488:	5f e3       	ldi	r21, 0x3F	; 63
    448a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    448e:	88 23       	and	r24, r24
    4490:	2c f4       	brge	.+10     	; 0x449c <main+0x142c>
		__ticks = 1;
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	9e 83       	std	Y+6, r25	; 0x06
    4498:	8d 83       	std	Y+5, r24	; 0x05
    449a:	3f c0       	rjmp	.+126    	; 0x451a <main+0x14aa>
	else if (__tmp > 65535)
    449c:	6f 81       	ldd	r22, Y+7	; 0x07
    449e:	78 85       	ldd	r23, Y+8	; 0x08
    44a0:	89 85       	ldd	r24, Y+9	; 0x09
    44a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	3f ef       	ldi	r19, 0xFF	; 255
    44a8:	4f e7       	ldi	r20, 0x7F	; 127
    44aa:	57 e4       	ldi	r21, 0x47	; 71
    44ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44b0:	18 16       	cp	r1, r24
    44b2:	4c f5       	brge	.+82     	; 0x4506 <main+0x1496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    44b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    44b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e2       	ldi	r20, 0x20	; 32
    44c2:	51 e4       	ldi	r21, 0x41	; 65
    44c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c8:	dc 01       	movw	r26, r24
    44ca:	cb 01       	movw	r24, r22
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
    44dc:	0f c0       	rjmp	.+30     	; 0x44fc <main+0x148c>
    44de:	88 ec       	ldi	r24, 0xC8	; 200
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	9c 83       	std	Y+4, r25	; 0x04
    44e4:	8b 83       	std	Y+3, r24	; 0x03
    44e6:	8b 81       	ldd	r24, Y+3	; 0x03
    44e8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ea:	01 97       	sbiw	r24, 0x01	; 1
    44ec:	f1 f7       	brne	.-4      	; 0x44ea <main+0x147a>
    44ee:	9c 83       	std	Y+4, r25	; 0x04
    44f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f2:	8d 81       	ldd	r24, Y+5	; 0x05
    44f4:	9e 81       	ldd	r25, Y+6	; 0x06
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	9e 83       	std	Y+6, r25	; 0x06
    44fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44fc:	8d 81       	ldd	r24, Y+5	; 0x05
    44fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4500:	00 97       	sbiw	r24, 0x00	; 0
    4502:	69 f7       	brne	.-38     	; 0x44de <main+0x146e>
    4504:	7c cd       	rjmp	.-1288   	; 0x3ffe <main+0xf8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4506:	6f 81       	ldd	r22, Y+7	; 0x07
    4508:	78 85       	ldd	r23, Y+8	; 0x08
    450a:	89 85       	ldd	r24, Y+9	; 0x09
    450c:	9a 85       	ldd	r25, Y+10	; 0x0a
    450e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	9e 83       	std	Y+6, r25	; 0x06
    4518:	8d 83       	std	Y+5, r24	; 0x05
    451a:	8d 81       	ldd	r24, Y+5	; 0x05
    451c:	9e 81       	ldd	r25, Y+6	; 0x06
    451e:	9a 83       	std	Y+2, r25	; 0x02
    4520:	89 83       	std	Y+1, r24	; 0x01
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	01 97       	sbiw	r24, 0x01	; 1
    4528:	f1 f7       	brne	.-4      	; 0x4526 <main+0x14b6>
    452a:	9a 83       	std	Y+2, r25	; 0x02
    452c:	89 83       	std	Y+1, r24	; 0x01
    452e:	67 cd       	rjmp	.-1330   	; 0x3ffe <main+0xf8e>

00004530 <__mulsi3>:
    4530:	62 9f       	mul	r22, r18
    4532:	d0 01       	movw	r26, r0
    4534:	73 9f       	mul	r23, r19
    4536:	f0 01       	movw	r30, r0
    4538:	82 9f       	mul	r24, r18
    453a:	e0 0d       	add	r30, r0
    453c:	f1 1d       	adc	r31, r1
    453e:	64 9f       	mul	r22, r20
    4540:	e0 0d       	add	r30, r0
    4542:	f1 1d       	adc	r31, r1
    4544:	92 9f       	mul	r25, r18
    4546:	f0 0d       	add	r31, r0
    4548:	83 9f       	mul	r24, r19
    454a:	f0 0d       	add	r31, r0
    454c:	74 9f       	mul	r23, r20
    454e:	f0 0d       	add	r31, r0
    4550:	65 9f       	mul	r22, r21
    4552:	f0 0d       	add	r31, r0
    4554:	99 27       	eor	r25, r25
    4556:	72 9f       	mul	r23, r18
    4558:	b0 0d       	add	r27, r0
    455a:	e1 1d       	adc	r30, r1
    455c:	f9 1f       	adc	r31, r25
    455e:	63 9f       	mul	r22, r19
    4560:	b0 0d       	add	r27, r0
    4562:	e1 1d       	adc	r30, r1
    4564:	f9 1f       	adc	r31, r25
    4566:	bd 01       	movw	r22, r26
    4568:	cf 01       	movw	r24, r30
    456a:	11 24       	eor	r1, r1
    456c:	08 95       	ret

0000456e <__udivmodhi4>:
    456e:	aa 1b       	sub	r26, r26
    4570:	bb 1b       	sub	r27, r27
    4572:	51 e1       	ldi	r21, 0x11	; 17
    4574:	07 c0       	rjmp	.+14     	; 0x4584 <__udivmodhi4_ep>

00004576 <__udivmodhi4_loop>:
    4576:	aa 1f       	adc	r26, r26
    4578:	bb 1f       	adc	r27, r27
    457a:	a6 17       	cp	r26, r22
    457c:	b7 07       	cpc	r27, r23
    457e:	10 f0       	brcs	.+4      	; 0x4584 <__udivmodhi4_ep>
    4580:	a6 1b       	sub	r26, r22
    4582:	b7 0b       	sbc	r27, r23

00004584 <__udivmodhi4_ep>:
    4584:	88 1f       	adc	r24, r24
    4586:	99 1f       	adc	r25, r25
    4588:	5a 95       	dec	r21
    458a:	a9 f7       	brne	.-22     	; 0x4576 <__udivmodhi4_loop>
    458c:	80 95       	com	r24
    458e:	90 95       	com	r25
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	08 95       	ret

00004596 <__udivmodsi4>:
    4596:	a1 e2       	ldi	r26, 0x21	; 33
    4598:	1a 2e       	mov	r1, r26
    459a:	aa 1b       	sub	r26, r26
    459c:	bb 1b       	sub	r27, r27
    459e:	fd 01       	movw	r30, r26
    45a0:	0d c0       	rjmp	.+26     	; 0x45bc <__udivmodsi4_ep>

000045a2 <__udivmodsi4_loop>:
    45a2:	aa 1f       	adc	r26, r26
    45a4:	bb 1f       	adc	r27, r27
    45a6:	ee 1f       	adc	r30, r30
    45a8:	ff 1f       	adc	r31, r31
    45aa:	a2 17       	cp	r26, r18
    45ac:	b3 07       	cpc	r27, r19
    45ae:	e4 07       	cpc	r30, r20
    45b0:	f5 07       	cpc	r31, r21
    45b2:	20 f0       	brcs	.+8      	; 0x45bc <__udivmodsi4_ep>
    45b4:	a2 1b       	sub	r26, r18
    45b6:	b3 0b       	sbc	r27, r19
    45b8:	e4 0b       	sbc	r30, r20
    45ba:	f5 0b       	sbc	r31, r21

000045bc <__udivmodsi4_ep>:
    45bc:	66 1f       	adc	r22, r22
    45be:	77 1f       	adc	r23, r23
    45c0:	88 1f       	adc	r24, r24
    45c2:	99 1f       	adc	r25, r25
    45c4:	1a 94       	dec	r1
    45c6:	69 f7       	brne	.-38     	; 0x45a2 <__udivmodsi4_loop>
    45c8:	60 95       	com	r22
    45ca:	70 95       	com	r23
    45cc:	80 95       	com	r24
    45ce:	90 95       	com	r25
    45d0:	9b 01       	movw	r18, r22
    45d2:	ac 01       	movw	r20, r24
    45d4:	bd 01       	movw	r22, r26
    45d6:	cf 01       	movw	r24, r30
    45d8:	08 95       	ret

000045da <__prologue_saves__>:
    45da:	2f 92       	push	r2
    45dc:	3f 92       	push	r3
    45de:	4f 92       	push	r4
    45e0:	5f 92       	push	r5
    45e2:	6f 92       	push	r6
    45e4:	7f 92       	push	r7
    45e6:	8f 92       	push	r8
    45e8:	9f 92       	push	r9
    45ea:	af 92       	push	r10
    45ec:	bf 92       	push	r11
    45ee:	cf 92       	push	r12
    45f0:	df 92       	push	r13
    45f2:	ef 92       	push	r14
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	ca 1b       	sub	r28, r26
    4604:	db 0b       	sbc	r29, r27
    4606:	0f b6       	in	r0, 0x3f	; 63
    4608:	f8 94       	cli
    460a:	de bf       	out	0x3e, r29	; 62
    460c:	0f be       	out	0x3f, r0	; 63
    460e:	cd bf       	out	0x3d, r28	; 61
    4610:	09 94       	ijmp

00004612 <__epilogue_restores__>:
    4612:	2a 88       	ldd	r2, Y+18	; 0x12
    4614:	39 88       	ldd	r3, Y+17	; 0x11
    4616:	48 88       	ldd	r4, Y+16	; 0x10
    4618:	5f 84       	ldd	r5, Y+15	; 0x0f
    461a:	6e 84       	ldd	r6, Y+14	; 0x0e
    461c:	7d 84       	ldd	r7, Y+13	; 0x0d
    461e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4620:	9b 84       	ldd	r9, Y+11	; 0x0b
    4622:	aa 84       	ldd	r10, Y+10	; 0x0a
    4624:	b9 84       	ldd	r11, Y+9	; 0x09
    4626:	c8 84       	ldd	r12, Y+8	; 0x08
    4628:	df 80       	ldd	r13, Y+7	; 0x07
    462a:	ee 80       	ldd	r14, Y+6	; 0x06
    462c:	fd 80       	ldd	r15, Y+5	; 0x05
    462e:	0c 81       	ldd	r16, Y+4	; 0x04
    4630:	1b 81       	ldd	r17, Y+3	; 0x03
    4632:	aa 81       	ldd	r26, Y+2	; 0x02
    4634:	b9 81       	ldd	r27, Y+1	; 0x01
    4636:	ce 0f       	add	r28, r30
    4638:	d1 1d       	adc	r29, r1
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	ed 01       	movw	r28, r26
    4646:	08 95       	ret

00004648 <_exit>:
    4648:	f8 94       	cli

0000464a <__stop_program>:
    464a:	ff cf       	rjmp	.-2      	; 0x464a <__stop_program>
